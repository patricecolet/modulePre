{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"html { overflow-y: scroll }","title":"Home"},{"location":"download/","text":"Download the latest release # Click here to read the installation guide. Open Stage Control Loading assets... var oReq = new XMLHttpRequest(); oReq.addEventListener('load', reqListener); oReq.open('GET', 'https://api.github.com/repos/jean-emmanuel/open-stage-control/releases/latest') oReq.send() function text(id, str) { var el = typeof id === 'string' ? document.getElementById(id) : id el.textContent = str } var names = { 'amd64': 'GNU/Linux Debian (64-bit)', 'linux-x64': 'GNU/Linux (64-bit)', 'node': 'Node.js', 'osx': 'MacOS', 'win32-x64': 'Windows (64-bit)' } function reqListener () { var data = JSON.parse(this.responseText) var date = new Date(data.published_at) text('osc-version', data.tag_name + ' (' + date.toLocaleDateString() + ')') var list = document.createElement('ul') for (var i in data.assets) { var item = document.createElement('li'), link = document.createElement('a'), name = data.assets[i].name try { name = names[name.match(/[0-9]+\\.[0-9]+\\.[0-9]+\\-([^\\.]+)/)[1]] } catch(e) { console.log(e) } link.innerHTML = '<i class=\"fa fa-download\"></i> ' + name + ' <span class=\"download-size\">(' + (data.assets[i].size / 1024 / 1024).toFixed(0) + 'M)</span>' link.href = data.assets[i].browser_download_url item.appendChild(link) list.appendChild(item) } var assets = document.getElementById('osc-assets') assets.innerHTML = '' assets.appendChild(list) } html { overflow-y: scroll } .md-sidebar--secondary { display: none; } @media screen and (min-width: 76.25em) { .md-sidebar--primary { display: none; } } .md-content { margin: 0; } .md-content__inner { margin-left: .8rem; margin-right: .6rem; } li { list-style: none; } li i { margin-right: 10px } .download-size { color: var(--md-typeset-color); opacity: 0.5; } Read the Changelog Support on Patreon","title":"Download the latest release"},{"location":"download/#download-the-latest-release","text":"Click here to read the installation guide. Open Stage Control Loading assets... var oReq = new XMLHttpRequest(); oReq.addEventListener('load', reqListener); oReq.open('GET', 'https://api.github.com/repos/jean-emmanuel/open-stage-control/releases/latest') oReq.send() function text(id, str) { var el = typeof id === 'string' ? document.getElementById(id) : id el.textContent = str } var names = { 'amd64': 'GNU/Linux Debian (64-bit)', 'linux-x64': 'GNU/Linux (64-bit)', 'node': 'Node.js', 'osx': 'MacOS', 'win32-x64': 'Windows (64-bit)' } function reqListener () { var data = JSON.parse(this.responseText) var date = new Date(data.published_at) text('osc-version', data.tag_name + ' (' + date.toLocaleDateString() + ')') var list = document.createElement('ul') for (var i in data.assets) { var item = document.createElement('li'), link = document.createElement('a'), name = data.assets[i].name try { name = names[name.match(/[0-9]+\\.[0-9]+\\.[0-9]+\\-([^\\.]+)/)[1]] } catch(e) { console.log(e) } link.innerHTML = '<i class=\"fa fa-download\"></i> ' + name + ' <span class=\"download-size\">(' + (data.assets[i].size / 1024 / 1024).toFixed(0) + 'M)</span>' link.href = data.assets[i].browser_download_url item.appendChild(link) list.appendChild(item) } var assets = document.getElementById('osc-assets') assets.innerHTML = '' assets.appendChild(list) } html { overflow-y: scroll } .md-sidebar--secondary { display: none; } @media screen and (min-width: 76.25em) { .md-sidebar--primary { display: none; } } .md-content { margin: 0; } .md-content__inner { margin-left: .8rem; margin-right: .6rem; } li { list-style: none; } li i { margin-right: 10px } .download-size { color: var(--md-typeset-color); opacity: 0.5; } Read the Changelog Support on Patreon","title":"Download the latest release"},{"location":"docs/changelog/","text":"Changelog # 1.19.2 # bug fixes regression breaking touch move events 1.19.1 # bug fixes editor zoom: adjust root widget size when zooming out 1.19.0 # editor add keyboard shortcut \"h\" to hide selection and widget drag / resize handles while pressed inspector: add some shortcut buttons in the header widgets add folder widget (flat container that doesn't affect layout) input: add maxLength property multixy: allow setting its own value from onValue script while touched ui add a virtual onscreen keyboard for desktop clients (can be enabled from the clients main menu) change local zoom (alt+scroll) behavior so that it only affect widgets and add scrollbars to navigate while zooming instead of following the mouse server client-options: add virtualKeyboard option to enable virtual keyboard by default (desktop clients only) 1.18.3 # bug fixes button: regression in push mode ( on value not passed to onValue script when triggered from another widget) button: decoupled push mode returning wrong value when activated from a widget script 1.18.2 # bug fixes canvas: onTouch not triggered on iOS when when event.force , event.altitudeAngle or event.azimuthAngle changes switch: interaction issue when value labels contain icons ios: attempt to fix rendering glitch when waking up after sleep 1.18.1 # widgets button: add decoupled property, compatible with all button modes button: remove decoupled mode 1.18.0 # bug fixes client script source map not loading (helps providing useful error messages) widgets button: add decoupled mode (toggle mode that only updates its state when it receives a value from osc/midi messages) button: add client option altTraversing to allow one-way response to traversing gestures for toggle buttons canvas: iOS: trigger onTouch when event.force , event.altitudeAngle or event.azimuthAngle updates knob: add snap-alt mode (snap mode that allows jumping between range.min and range.max) all: add borderRadius property scripting add updateCanvas() function (forces a canvas widget to redraw) remote control /NOTIFY : if multiple arguments are provided, interpret the first one as the icon's name for the client notification midi on Mac, name virtual ports after the device name to avoid confusion server client-options: add clientSync option to allow disabling client synchronization client-options: add altTraversing option editor add F2 keyboard shortcut to bring label property input into view if selected widget has one 1.17.0 # bug fixes editor: error when ctrl+clicking on a root's child range: multitouch interaction issue widget knob / encoder: sensitivity and ctrl+drag gesture preserve circular mode behavior knob / encoder: snap mode now works like circular mode except for the touch start event (value can't jump from start to end anymore) patchbay: add exclusive option editor allow interacting with a widget without selecting it by using the middle mouse button or by holding shift+win (shift+cmd on mac). 1.16.6 # bug fixes visibility property update issues 1.16.4 # bug fixes modal: display issue when a modal receives the same value multiple times patchbay: outputs property not handling object value properly server: resolution conflict between app files and user files widgets patchbay: trigger onValue script when a connection changes misc windows: allow accessing other drives than the default one (list drives when the file browser reaches the filesystem's root) 1.16.3 # bug fixes custom module: submodules not loading their own submodules with relative paths properly custom module: issue with circular submodule requires server: harmless error message when importing css files from the main theme file server: allow using folder names \"client\" and \"assets\" for user files (eg for images used in a session) widgets canvas: add onResize script property scripting: expose javascript's Image constructor 1.16.2 # bug fixes widget visibility not updated properly when set as a non-boolean value widgets tabs: detach hidden tabs from the DOM (reduces lag caused by heavy tabs) 1.16.1 # bug fixes eq widgets not properly converted when importing v0 sessions image paths with url queries not loaded properly @{} syntax not returning truncated value according to the widget's precision property (fixed for primitive values only, object values are still returned as is) 1.16.0 # advanced syntaxes @{} and VAR{} that return objects / arrays do not return a copy of their value anymore as it may introduce a significant overhead when used extensively. Mutating these objects in #{} and JS{} scripts will now affect the actual values and should be avoided at all cost. widgets comments property flagged as dynamic multixy: add doubleTap property 1.15.8 # bug fixes range: value update issue (internal touch state not updated properly) scripting: send(): ignore ignoreDefaults property script: onKeyboard script not cleaned upon edition / removal editor: some variables not appearing as defined in onKeyboard 1.15.7 # bug fixes matrix: property resolution issue with object/array items in props bypass client option nofocus=1 when the editor is enabled menu/dropdown: display label when value is undefined misc updated midi bridge: provide more information when loading fails; may fix some compatibility issue on windows 1.15.6 # bug fixes ios: prevent server error related to the use of cookies scripting: getVar() now returns a copy of the variable to prevent mutations on saved object 1.15.5 # bug fixes matrix: advanced property issue in props property (bis) editor inspector: add solo mode with alt+click for category panels 1.15.4 # bug fixes matrix: advanced property issue in props property 1.15.3 # bug fixes interaction issue (\"deadzone\") on touch screens main menu not hidden when read-only is set osc messages containing unicode characters not encoded correctly 1.15.2 # bug fixes modal: scroll state not restored when the modal container is recreated server: allow spaces and accentuated characters in client id 1.15.1 # bug fixes prevent flickering on canvas based widgets when they are recreated editor added code editor for html and css properties remote control add /RELOAD command 1.15.0 # bug fixes editor: prevent accessing non-editable widgets with right arrow multixy: regression causing interaction issue widgets add lock property to all widgets launcher add Autostart menu option misc update FontAwesome icon font to version 6 1.14.6 # bug fixes inspector: script editor: cursor alignment issue in indented lines clone: prevent freeze and print an error when attempting to create a circular clone modal: regression on android that prevents focusing input widgets in modals 1.14.5 # bug fixes session loading error with some malformed property cases 1.14.4 # bug fixes broken console interpreter since v1.14.0 widgets button: add momentary mode for sending messages with no value; prevent button from getting stuck when on and off are equal in momentary and tap modes inspector color picker: inline picker widget (no longer in a modal); show color changes on the fly code editor: validate input with cmd+enter instead of ctrl+enter on Mac scripting screen.height and screen.width always returns the current screen dimensions added screen.orientation global variable misc some performance improvements 1.14.3 # bug fixes osc receivers ( OSC{} syntax) now apply the same rule as widgets regarding midi messages (only receive if the message's origin matches one of the host widget's midi targets) modal: rendering issue on iOS button: locals.touchCoords not updated since v1.14.0 widgets clone/fragment: remove scripting properties as they are supposed to be overridden in props 1.14.2 # bug fixes context-menu: double click issue in submenus on small touch screens clone/fragment: broken onDraw / onTouch scripts if cloned widget is a canvas 1.14.0, 1.14.1 # bug fixes misc: sending typed arguments ( {type, value} objects) should override the widget's typeTags definition multixy: errors when ephemeral is true scripting: setVar not affecting all widgets when multiple widgets match provided id widgets renamed script property to onValue , draw to onDraw , touch to onTouch added onCreate script property to all widgets added onTouch script to widgets that supported the touch state variable in scripts (now deprecated) script: added onKeyboard property, removed event property canvas: expose additional touch event informations ( radiusX , radiusY , rotationAngle and iOS-only altitudeAngle , azimuthAngle and touchType ) scripting special keyword this now returns the string \"this\" advanced syntaxes added IMPORT{file} syntax to allow loading external files in properties editor add fullscreen mode for properties with code editor enabled 1.13.2 # bug fixes editor: keep relative sizes and positions when resizing multiple widgets at a time widgets canvas: expose touch pressure (as event.force ) in the touch script. canvas: expose touch events for extra elements added with the html property 1.13.1 # bug fixes editor: data loss when leaving the editor's focus with no modifications 1.13.0 # bug fixes scripting: storage.getItem() not returning anything editor new code editor for script , touch , draw and props properties with syntax highlighting, line numbers, etc scripting set() : add an option to prevent target widget's script widgets root: add hideMenu property misc minor cosmetic changes 1.12.0 # widgets new canvas widget (under pads ): allows creating custom widgets button: expose normalized touch coordinates in scripts as locals.touchCoords print a warning in the console when using advanced syntaxes in the script property 1.11.1 # bug fixes client options specified in server config not working unless lowercased make disconnection detection less aggressive (don't display notification if reconnection succeeds quickly) panel: initial scroll state issue 1.11.0 # bug fixes menu: interaction issue on iOS script: prevent script functions from being called in the wrong scope (ie when leaked using the globals object) and print an explicit error containers: prevent errors with some color formats in colorWidget theme: relative url not resolved correctly widgets when a panel contains widgets and has scroll set to true , its value will be used to represent the scroll position for x-axis and y-axis between 0 and 1. 1.10.3 # bug fixes config not persistent on windows misc read-only mode now hides and disables the main menu 1.10.2 # bug fixes certificate expiration issue regression breaking colors in canvas-based widgets 1.10.0 # bug fixes sliders: ignore key order in range sliders: handle mousewheel increment when starting from a value between two steps with steps property defined inspector: allow scrolling in the help modal console: fix command history behavior and increase history size widgets encoder: expose angle in script (as locals.angle ) new textarea widget (multi line input) expose the computed dimensions of canvas-based widgets in css (as --widget-width and --widget-height ) and script (as locals.width and locals.height ) client add Save backup menu action (saves a backup copy of current session with an incremented suffix appended to the file name) 1.9.14 # bug fixes modal: remove html property matrix: nested property inheritance (eg. @{id_@{id_x}} ) not working in props 1.9.13 # bug fixes nested property inheritance (eg. @{id_@{id_x}} ) not updating properly canvas based widgets not updating when hidden 1.9.12 # bug fixes client options: options ignored if not lowercased sliders: prevent errors for some edge-case range values 1.9.11 # bug fixes range: value not properly updated with set() misc (built-in client only) add nofocus client option to prevent the client window from taking focus unless a text input or a dropdown is clicked. 1.9.10 # bug fixes matrix: regression from 1.9.8 (broken nested @{} syntax in props property) misc midi: detect missing binary (eg when deleted by antivirus) and print a message 1.9.9 # bug fixes matrix: regression from 1.9.8 1.9.8 # bug fixes matrix: update children when props is modified even when the result for $ = 0 doesn't change fragments: fragment widgets empty when reloading panel: scrollbar issue on iOS 13+ scripting expose console.clear() 1.9.7 # bug fixes issue when resizing widget using keyboard shortcuts advanced syntaxes (VAR{}): avoid storing default value as string if it can be parsed as a javascript primitive (boolean, number, etc) advanced syntaxes (VAR{}): ignore quotes around variable name editor change keyboard shortcuts for moving widgets (now mod + arrows ) and navigating in widgets (now arrows ) to feel more natural with the project tree view. widgets script: bypass keyboard shortcuts already used by the editor if it is enabled matrix: removed ambiguous start property matrix: advanced syntax blocks can be passed to children without being resolved at the matrix\\' scope by adding an underscore before the opening bracket text: add soft mode for the wrap property input: improve numeric mode on iOS 1.9.6 # bug fixes advanced syntaxes: VAR{} not updating when the default value is edited editor: fix \"Bring to front\" and \"Send to back\" context menu actions ui add keyboard shortcuts mod + \"+\" and mod + \"-\" to control zoom level widgets input: add numeric property (allows numeric values only and displays numeric keyboard on mobile devices) button: add soft mode for the wrap property switch: add wrap property editor display dropdown and checkbox for boolean properties with extra choices 1.9.5 # bug fixes advanced syntaxes: various issues and regressions editor: preserve advanced syntaxes in left and top when pasting a widget editor tree: update widget visibility when it changes dynamically 1.9.4 # bug fixes prevent error with empty OSC{} blocks regression breaking advanced syntax blocks containing nested brackets advanced syntaxes new syntax for creating and using custom variables in properties: VAR{name, default} JS{} blocks don't require 2 brackets anymore ( JS{{}} still works) scripting add getVar() and setVar() for reading and modifying custom variables. This allows modifying properties directly from scripts (if they contain VAR{} blocks). expose session path as globals.session editor make tree item blink when hitting \"Show in tree\" remote control add /SCRIPT command to run scripts remotely 1.9.3 # bug fixes scripting: set() not working from a slider to a pad tabs not sending messages / triggering scripts when clicked in editing mode prevent hang with some syntax errors in advanced syntaxes don't show project tree if minimized when creating a new widget (1.9.2 regression) fix \"ID + 1\" paste for widgets with numeric ids dropdown: reset the underlying dropdown when the widget's value is undefined editor tree: allow specifying multiple type filters tree: add \"Show in session\" context menu action 1.9.2 # bug fixes visualizer: remove bars and dots option plot: fix bars option project tree: clear filter input when loading a session server: fix serving files from paths containing accents editor: keep editor open when loading a session menu: prevent clipping in container on iOS widgets image: add pre defined values for size , position and repeat properties text: add vertical alignment choices to align editor tree: add icons before widget ids depending on the category tree: activate tab when selecting it in the project tree tree: allow dragging widgets from a container to another tree: expand container when a new widget is created inside it tree: add support for filtering widgets by type (by typing type:fader for example) smarter shift+drag selection: allow selecting widgets in the area when the event started on the parent container select newly created widgets/tab except when copy-pasting remote control add /STATE/SEND command 1.9.1 # bug fixes button: allow writing strings like \"1.0\" in label without removing the decimals editor: use css variable --grid-width at startup and after disabling & enabling the grid launcher: regression preventing server halt when built-in client is closed manually beforehand scripting: prevent crash (built-in client only) when using the variable navigator widgets menu/switch/dropdown: reset value to undefined when receiving a value that's not defined in values scripting expose instance of navigator Clipboard as globals.clipboard midi allow sending note off with velocity add option for receiving note off with velocity misc v0->v1 session conversion: remove JS{{}} in script property 1.9.0 # Warning Sessions saved with this version will not open in older versions (sessions saved with older version will open in this version). bug fixes remote-root option not applied on resources loaded by the client app (css images, etc) input: display issue when resizing the window launcher: cancel stopping the server when there are unsaved changes in the built-in client editor context menu: add export action to export a widget as a fragment file show project tree if minimized when clicking on \"Show in tree\" widget new fragment widgets (under containers ): embedded session or fragment file with overridable properties. add comments property to all widgets launcher add Always on top menu toggle 1.8.15 # bug fixes editor: error when duplicating widget while if the clipboard is empty ui: local zoom move issue when not in fullscreen custom module: clearInterval() not working regression breaking style attribute in html property misc faster local zoom 1.8.14 # bug fixes alt+shift+c not working when pressed before dragging incremental pasting issue with address property generate scrollbars for panels on iOS 13+ fix scrolling on chrome for iOS 13+ editor add mod+d and mod+shift+d for duplicating widgets use a temporary clipboard when duplicating widgets misc inspector: move script property to scripting category ui: minor style tweaks 1.8.13 # widgets file: show save icon when mode is set to save file: center icon when hidePath is set to true sliders/pads: apply spring property dynamically ui add alt + wheel for local zoom centered on cursor editor add alt+c+drag and alt+shift+c+drag for duplicating dragged widgets 1.8.12 # bug fixes: project tree: filter input position issue when scrolling sliders/pads: apply spring property dynamically project tree select range of contiguous widgets with shift + click misc plot: remove unused filters property; fix description for rangeX and rangeY console: focus input when the console opens 1.8.11 # bug fixes switch: widget not reacting at first touch when traversing is enabled on parent sliders: disable mousewheel when spring is enabled widgets script: add once event mode encoder: remove spring property custom module expose process global scripting add openUrl function 1.8.10 # bug fixes modal: issues with children's visibility console: allow multiple arguments in console.log() ui launcher: add many keyboard shortcuts client: add keyboard shortcuts for clearing the console scripting add setFocus function to focus an input widget programmatically misc add usePercents client option 1.8.9 # bug fixes script: issue when using the options argument in set() (options leaked to subsequent set() calls in the script) multixy: decimals property not applied multixy: spring behavior not working until all points are released custom module: prevent require() from reading submodules files each time and instead return the object in memory 1.8.8 # launcher add file browser button for the theme option and fix parsing path containing spaces if only one theme is set windows remove ctrl+w shortcut for closing a window (use alt+f4 instead) 1.8.7 # midi add active sensing messages support (received as sysex) remote control restore /TABS command (for opening tabs by ids) widgets encoder: expose rotation speed in script (as locals.speed ) 1.8.6 # bug fixes range: per-fader touch event not emitted properly rgb: fix spring property rgb: touch event not emitted 1.8.5 # bug fixes midi: debug messages displayed as errors launcher: broken context menu 1.8.4 # bug fixes input: prevent focus when selecting the widget for edition input: submit content when leaving focus, not only when hitting enter or tab ( esc still cancels) midi: prevent midi bridge from stopping when an error occurs; provide meaningful errors when connection fails editor inspector: hitting ctrl+s while editing a property will submit the change before saving ui hide the console toggle button when the bottom panel is minimized and the editor is disabled widgets file: add mode property, for choosing between open and save modes switch: add flip mode 1.8.3 # bug fixes keyboard: allow note numbers up to 127 server: return http 404 error when a user-requested resource is not found instead of keeping a pending request modal: visible property not applied correctly project tree add an input for filtering displayed widget by id 1.8.2 # bug fixes menu: allow manual line breaks (\" \\n \") in labels / values custom module: parsing issue when sending widget data using receive() ( type attribute erroneously parsed as an osc typetag) widgets html property: allow \"href\" attribute on \"a\" elements 1.8.1 # bug fixes script: stops triggering osc messages under some circumstances 1.8.0 # bug fixes project tree: layout issue with deeply nested widgets ios 10.3 regression file browser: layout issue with long paths custom module add nativeRequire function (allows loading native node modules or locally installed modules) 1.7.8 # bug fixes canvas-based widgets not drawn when placed in a modal while having a conditional visibility set text: missing decimals property clone: fix usage of osc listener syntax (acts as if clone has an address property set to auto ) widgets clone: make props property dynamic (avoid full widget rebuild when possible) misc increase client console history size and allow changing it with client url options 1.7.7 # bug fixes startup regression 1.7.6 # bug fixes (harmless) error raised when starting the server from the launcher with debug set to true editor display/save color picked values with css rgba notation instead of hexadecimal widgets modal: add ignoreTabs option (allows overflowing tab ancestors) menu: add ignoreTabs option 1.7.5 # bug fixes ios: cloned menu not displayed correctly engine: downgrade to fix startup issue on windows 1.7.4 # bug fixes editor: cloned dropdown and input widgets not opening when selected widgets: prevent value-stateless widgets (tap buttons, clone, scripts, html and svg) from sending a value for cross-client synchronization (leads to unexpected script execution) and exclude them from state saves input: apply decimals number before checking the value against the validation expression range: steps and dashed property not working; remove origin property config conflicts between launcher and server (affecting at least session history) 1.7.3 # bug fixes custom module / theme: prevent reloading the module while the file is being written to server: if a theme is used, attempt to resolve image urls against the theme file's location modal/button: prevent error when label is updated widgets encoder: add ticks property back 1.7.2 # bug fixes midi: mtc parsing error custom module: hot reload cache issue on windows 1.7.1 # bug fixes regression causing server errors 1.7.0 # Important change Prebuilt binaries are now supplied only for 64bit Linux/MacOs/Windows. Other platforms should use the node package or build it from sources. MIDI support As of this version, packages except the node package are bundled with a midi binary that will be used whenever midi's path option is not set. It is no longer necessary to install python and python-rtmidi . Changelog bug fixes editor: missing context menu (copy, paste) in inspector inputs widgets: osc listeners not resolving \"auto\" address cli: ELECTRON_RUN_AS_NODE headless mode not working without --no-gui option ios: clone widget not laid out properly in horizontal panels ui: missing vertical scrollbar when root's height overflows the workspace server: provide readable error when a file requested by the client file is not found tab: content not drawn when changing visible property matrix: addresses not generated property when matrix' address is auto ui add console bottom panel with a simple script interpreter widgets keyboard: add velocity property (allows mapping the touch coordinates between off (top) and on (bottom)) input: add validation property (allows defining a regular expression that the value must match) modal: add relative position property midi accept sending sysex strings without spaces between the bytes load prebuilt midi binary on 64bit linux/windows/osx add support for midi time code messages misc sessions converted from v0 will use the widget's html property to display the former label property 1.6.2 # bug fixes matrix: issues when changing non-dynamic properties (content not properly removed) input: apply default value when receiving an empty value or no value at all 1.6.1 # bug fixes keyboard: prevent script property from being copied to each key widgets keyboard: make on and off properties dynamic script: add getIndex function matrix/keyboard: id variable in script is now the id of the child widget that triggered the event 1.6.0 # bug fixes range: error when setting default property range: fix doubleTap property widgets all: add html property to allow inserting custom content in widgets (label, value, etc) and style it with the css property. scripting: send() : ignore the widget's bypass property (allows bypassing default messages and define custom ones) set() : add supports for wildcards in the id parameter set() : add a 3 rd optional parameter for preventing further script executions and/or osc messages from being sent custom module automatically reload custom module when the file is modified add support for loading submodules with require() theme automatically reload theme when the file is modified 1.5.4 # bug fixes ssl: generate unique certificates (with random serial numbers) to avoid reuse errors. Certificates generated with older versions of o-s-c will be updated automatically. ~/ path prefix not recognized when using remote control commands like /SESSION/SAVE ~/ path prefix not recognized in remote-root option editor: paste ID+1: midi-related addresses should not be incremented remote control add /STATE/OPEN and /STATE/SAVE commands ignore unsaved changes when loading a session with /SESSION/OPEN resolve relative file paths against remote-root setting 1.5.3 # bug fixes editor: error when preArgs and address are modified at the same time (affects /EDIT command and matrix/clone widgets) 1.5.2 # bug fixes launcher: midi device names containing multiple spaces not parsed correctly fullscreen: lack of support not detected on some ios devices multixy: labels not hidden when ephemeral is true remote control add /SESSION/OPEN and /SESSION/SAVE commands 1.5.1 # bug fixes widgets: touch state scripts not triggering some synchronization mechanism widgets encoder: remove steps , ticks and origin properties encoder: make sensitivity work with values below 1 1.5.0 # bug fixes image: broken value validation menu/dropdown: use correct z-index dropdown: prevent dropdown from opening when selecting the widget for edition editor holding alt extends the north-west handle to the widget's size to ease dragging widget properties reordered (e.g. style-related properties, even widget-specific, are now under the \"style\" category) widgets remove colorBg for all widgets except containers widgets background color is now transparent by default (can be overridden with css) keyboard: added colorBlack and colorWhite properties to customize key colors dropdown/menu: add label property (with support easy key/value display) dropdown/menu: add icon toggle property modal: add popupPadding property to control the button's and the container's padding independently 1.4.1 # bug fixes multixy/range: prevent some extra touch state events;` 1.4.0 # bug fixes project tree: error when dropping a widget at its initial position editor validate property change when clicking on a widget cancel property change when hitting escape add menu and keyboard shortcuts to reorder widgets add keyboard shortcut to show widget in project tree selected widget is not showed on top of the others anymore widgets expose widgets unique identifiers with property name \"uuid\" xy/multixy: add ephemeral property fader/knob/xy/range/multixy: remove touchAddress property fader/knob/xy/range/multixy: expose touch state in script property ( touchAddress usages will be converted automatically) 1.3.0 # bug fixes editor: hide impossible actions from context-menu (eg adding widgets in tab containers) editor: error when selecting a tab/root widget while a property field contains unsubmitted changes panel: layout issue with tabs & lineWidth property input: extend focusable area midi remove variable args in sysex messages (dynamic properties and scripting can be used to this effect) add support for sending sysex bytes as integers allow sending any system message (eg MIDI time code) add support for receiving MIDI time code messages (as raw sysex) (requires adding the mtc flag to the midi configuration) 1.2.1 # scripting expose toolbar menu actions remote control optimise small changes made with /EDIT widgets button: add wrap and vertical properties root: add width and height properties (helps building mobile layouts) 1.2.0 # bug fixes editor: id not incremented when pasting multiple widgets with id+1 main remove support for extra args in the custom-module option (fixes some path issues) widgets all: add lineWidth style property knob: add solid & line designs fader: add knobSize property editor preserve percentages in position/size add 'Relative units (%)' option to use percents automatically on new widgets 1.1.0 # bug fixes iOS 14+ scrolling issue midi add support for channel pressure and key pressure messages widgets svg: remove support for non-standard %x and %y units; fixed layout update when resized; knob: add support for custom dash/gap size in dashed property 1.0.4 # bug fixes script: broken storage.getItem and storage.removeItem regression breaking remote-root option when starting with the launcher 1.0.3 # bug fixes modal: layout issue on iOS widgets panels: added contain property to allow scrolling in vertical/horizontal layouts midi add support for named ports in midi configuration 1.0.2 # bug fixes broken scrolling on iPhone iOS 13 window geometry issue 1.0.1 # UI windows' dimensions and position are now saved upon closing and restored at startup 1.0.0 # This list is not exhaustive compatibility dropped support for iOS 9 firefox (75+) support UI overhaul design reworked foldable sidepanels removed lobby added toolbar menu display loading (spinner) in a notification instead of a modal mod + w to close window context-menu now use click event to trigger actions, not mousedown/touchstart no more uppercase text by default themes built-in themes removed except orange translations incomplete russian translation removed editor project tree dropdown for properties with multiple choices color picker preview numeric values for style-related properties set to auto context menu: added \"show in tree\" action context menu: removed \"edit parent\" action allow copying tabs (to tab containers only) shared clipboard across all clients prevent interaction with widgets when shift or ctrl is held ensure @{} bindings are always updated upon edition widget changes all: removed label option except for buttons, tabs and modals (one should use text widgets if needed) all: removed support for null and \"self\" targets all: added ignoreDefaults property (allows ignoring the server's default targets) all: precision property to decimals , don't set osc integer typetag when 0 all: added typeTags property all: multiple style properties to control visibility, colors, alphas and padding all: added interaction (=> css pointer-events: none; ) all: added expand (=> css flex: 1; ) all: prevent html tags in label pads: removed split property -> use custom-module or script instead root: can contain widgets or tabs panels: added layout , justify and gridTemplate to help managing layouts (especially responsive ones) panels: added verticalTabs property panels: added traversing property, allow restricting traversing to a specific widget type fader: removed input fader: removed meter fader: added gradient fader: added round design style fader: support setting dash size and gap size in dashed property switch: added layout (including grid) switch: added click mode plot/eq: removed smooth plots/sliders/pads: reversed logScale behavior to match standard implementations; can be either false (disabled), true (logarithmic scale) or number (manual log scale, negative for exponential scale) visualizer: added framerate property visualizer: added freeze property menu: always centered menu modal: modals can't overflow parent tab boundaries input: removed vertical pads, range: when touchAddress is set, one message per touched point is sent, in addition to the former touch state message eq: removed logScaleX property, always draw logarithmic frequency response eq: logarithmic x-axis scale fixed eq: filters are now defined with the filters property, leaving the value to its default purpose eq: added rangeX html: allow class , title and style attributes dropdown: close menu when receiving a value dropdown: removed empty 1 st option switch: removed showValues (inconsistent with menu/dropdown, feature covered by values property) frame: allow loading non local urls widget removals push , toggle : merged into button strip : features now covered by panel meter : duplicate of fader with design to compact and interaction to false switcher , state , crossfader : removed => state management functions added to the script widget keys : merged with script gyroscope : not compatible since chrome 74 unless o-s-c goes HTTPS remote control removed /TABS added /NOTIFY scripting (general) removed MathJS language reuse #{} syntax as as shorthand for JS{{}} (one liner, implicit return) added locals variable, a variable store scoped to the widget renamed global to globals expose environment variables in globals : url , env (query parameters), platform , screen (width/height) script widget always hidden except in project tree script property must not be wrapped in a JS{{}} block anymore added stateGet and stateSet functions added storage object, proxy to the document's localStorage object (allows storing data that persist after refresh/close (cleared with the browser's cache) added setTimeout , clearTimeout , setInterval , clearInterval function proxies with an extra id argument (they clear automatically when called multiple times and upon widget removal. id is scoped to the widget) state quickstate (store/recall from menu) is now stored in the clients cache and persists after refresh/close (cleared with the browser's cache) custom module settings.read(name) : name is now the long name of command-line options (not a camelCased one) receive() : optional last argument to pass extra options such as clientId client id persist upon page refresh and can be set manually with the client url option id launcher config save/load allow starting/stopping server without rebooting syntax check on --midi option server renamed --url-options to --client-options and make them apply even in remote browsers (can be overridden with url queries) removed --blank , --gui-only , --examples hide --disable-gpu (cli-only) added cli-only --cache-dir and --config-file added --authentication option added --use-ssl option misc canvas: better visibility checks to avoid unnecessary draw calls visualizer: perf improvement (avoid data processing when not visible), all visualizers hook on the same loop to avoid concurrent timeouts button: in 'tap' mode (formerly push with noRelease ), never send/sync off value, automatically reset to off when receiving on more detached DOM for lighter nested canvas widgets (ie multixy) unified (kind of) dom html structure for widgets, known css tricks will require adjustments. cache and config files are now stored in a folder named open-stage-control (located in the system's default location for config file). The .open-stage-control is no longer used. added support for icons rotate/flip transform suffixes (example: ^cog.spin , ^play.rotate-horizontal )","title":"Changelog"},{"location":"docs/changelog/#changelog","text":"","title":"Changelog"},{"location":"docs/changelog/#1192","text":"bug fixes regression breaking touch move events","title":"1.19.2"},{"location":"docs/changelog/#1191","text":"bug fixes editor zoom: adjust root widget size when zooming out","title":"1.19.1"},{"location":"docs/changelog/#1190","text":"editor add keyboard shortcut \"h\" to hide selection and widget drag / resize handles while pressed inspector: add some shortcut buttons in the header widgets add folder widget (flat container that doesn't affect layout) input: add maxLength property multixy: allow setting its own value from onValue script while touched ui add a virtual onscreen keyboard for desktop clients (can be enabled from the clients main menu) change local zoom (alt+scroll) behavior so that it only affect widgets and add scrollbars to navigate while zooming instead of following the mouse server client-options: add virtualKeyboard option to enable virtual keyboard by default (desktop clients only)","title":"1.19.0"},{"location":"docs/changelog/#1183","text":"bug fixes button: regression in push mode ( on value not passed to onValue script when triggered from another widget) button: decoupled push mode returning wrong value when activated from a widget script","title":"1.18.3"},{"location":"docs/changelog/#1182","text":"bug fixes canvas: onTouch not triggered on iOS when when event.force , event.altitudeAngle or event.azimuthAngle changes switch: interaction issue when value labels contain icons ios: attempt to fix rendering glitch when waking up after sleep","title":"1.18.2"},{"location":"docs/changelog/#1181","text":"widgets button: add decoupled property, compatible with all button modes button: remove decoupled mode","title":"1.18.1"},{"location":"docs/changelog/#1180","text":"bug fixes client script source map not loading (helps providing useful error messages) widgets button: add decoupled mode (toggle mode that only updates its state when it receives a value from osc/midi messages) button: add client option altTraversing to allow one-way response to traversing gestures for toggle buttons canvas: iOS: trigger onTouch when event.force , event.altitudeAngle or event.azimuthAngle updates knob: add snap-alt mode (snap mode that allows jumping between range.min and range.max) all: add borderRadius property scripting add updateCanvas() function (forces a canvas widget to redraw) remote control /NOTIFY : if multiple arguments are provided, interpret the first one as the icon's name for the client notification midi on Mac, name virtual ports after the device name to avoid confusion server client-options: add clientSync option to allow disabling client synchronization client-options: add altTraversing option editor add F2 keyboard shortcut to bring label property input into view if selected widget has one","title":"1.18.0"},{"location":"docs/changelog/#1170","text":"bug fixes editor: error when ctrl+clicking on a root's child range: multitouch interaction issue widget knob / encoder: sensitivity and ctrl+drag gesture preserve circular mode behavior knob / encoder: snap mode now works like circular mode except for the touch start event (value can't jump from start to end anymore) patchbay: add exclusive option editor allow interacting with a widget without selecting it by using the middle mouse button or by holding shift+win (shift+cmd on mac).","title":"1.17.0"},{"location":"docs/changelog/#1166","text":"bug fixes visibility property update issues","title":"1.16.6"},{"location":"docs/changelog/#1164","text":"bug fixes modal: display issue when a modal receives the same value multiple times patchbay: outputs property not handling object value properly server: resolution conflict between app files and user files widgets patchbay: trigger onValue script when a connection changes misc windows: allow accessing other drives than the default one (list drives when the file browser reaches the filesystem's root)","title":"1.16.4"},{"location":"docs/changelog/#1163","text":"bug fixes custom module: submodules not loading their own submodules with relative paths properly custom module: issue with circular submodule requires server: harmless error message when importing css files from the main theme file server: allow using folder names \"client\" and \"assets\" for user files (eg for images used in a session) widgets canvas: add onResize script property scripting: expose javascript's Image constructor","title":"1.16.3"},{"location":"docs/changelog/#1162","text":"bug fixes widget visibility not updated properly when set as a non-boolean value widgets tabs: detach hidden tabs from the DOM (reduces lag caused by heavy tabs)","title":"1.16.2"},{"location":"docs/changelog/#1161","text":"bug fixes eq widgets not properly converted when importing v0 sessions image paths with url queries not loaded properly @{} syntax not returning truncated value according to the widget's precision property (fixed for primitive values only, object values are still returned as is)","title":"1.16.1"},{"location":"docs/changelog/#1160","text":"advanced syntaxes @{} and VAR{} that return objects / arrays do not return a copy of their value anymore as it may introduce a significant overhead when used extensively. Mutating these objects in #{} and JS{} scripts will now affect the actual values and should be avoided at all cost. widgets comments property flagged as dynamic multixy: add doubleTap property","title":"1.16.0"},{"location":"docs/changelog/#1158","text":"bug fixes range: value update issue (internal touch state not updated properly) scripting: send(): ignore ignoreDefaults property script: onKeyboard script not cleaned upon edition / removal editor: some variables not appearing as defined in onKeyboard","title":"1.15.8"},{"location":"docs/changelog/#1157","text":"bug fixes matrix: property resolution issue with object/array items in props bypass client option nofocus=1 when the editor is enabled menu/dropdown: display label when value is undefined misc updated midi bridge: provide more information when loading fails; may fix some compatibility issue on windows","title":"1.15.7"},{"location":"docs/changelog/#1156","text":"bug fixes ios: prevent server error related to the use of cookies scripting: getVar() now returns a copy of the variable to prevent mutations on saved object","title":"1.15.6"},{"location":"docs/changelog/#1155","text":"bug fixes matrix: advanced property issue in props property (bis) editor inspector: add solo mode with alt+click for category panels","title":"1.15.5"},{"location":"docs/changelog/#1154","text":"bug fixes matrix: advanced property issue in props property","title":"1.15.4"},{"location":"docs/changelog/#1153","text":"bug fixes interaction issue (\"deadzone\") on touch screens main menu not hidden when read-only is set osc messages containing unicode characters not encoded correctly","title":"1.15.3"},{"location":"docs/changelog/#1152","text":"bug fixes modal: scroll state not restored when the modal container is recreated server: allow spaces and accentuated characters in client id","title":"1.15.2"},{"location":"docs/changelog/#1151","text":"bug fixes prevent flickering on canvas based widgets when they are recreated editor added code editor for html and css properties remote control add /RELOAD command","title":"1.15.1"},{"location":"docs/changelog/#1150","text":"bug fixes editor: prevent accessing non-editable widgets with right arrow multixy: regression causing interaction issue widgets add lock property to all widgets launcher add Autostart menu option misc update FontAwesome icon font to version 6","title":"1.15.0"},{"location":"docs/changelog/#1146","text":"bug fixes inspector: script editor: cursor alignment issue in indented lines clone: prevent freeze and print an error when attempting to create a circular clone modal: regression on android that prevents focusing input widgets in modals","title":"1.14.6"},{"location":"docs/changelog/#1145","text":"bug fixes session loading error with some malformed property cases","title":"1.14.5"},{"location":"docs/changelog/#1144","text":"bug fixes broken console interpreter since v1.14.0 widgets button: add momentary mode for sending messages with no value; prevent button from getting stuck when on and off are equal in momentary and tap modes inspector color picker: inline picker widget (no longer in a modal); show color changes on the fly code editor: validate input with cmd+enter instead of ctrl+enter on Mac scripting screen.height and screen.width always returns the current screen dimensions added screen.orientation global variable misc some performance improvements","title":"1.14.4"},{"location":"docs/changelog/#1143","text":"bug fixes osc receivers ( OSC{} syntax) now apply the same rule as widgets regarding midi messages (only receive if the message's origin matches one of the host widget's midi targets) modal: rendering issue on iOS button: locals.touchCoords not updated since v1.14.0 widgets clone/fragment: remove scripting properties as they are supposed to be overridden in props","title":"1.14.3"},{"location":"docs/changelog/#1142","text":"bug fixes context-menu: double click issue in submenus on small touch screens clone/fragment: broken onDraw / onTouch scripts if cloned widget is a canvas","title":"1.14.2"},{"location":"docs/changelog/#1140-1141","text":"bug fixes misc: sending typed arguments ( {type, value} objects) should override the widget's typeTags definition multixy: errors when ephemeral is true scripting: setVar not affecting all widgets when multiple widgets match provided id widgets renamed script property to onValue , draw to onDraw , touch to onTouch added onCreate script property to all widgets added onTouch script to widgets that supported the touch state variable in scripts (now deprecated) script: added onKeyboard property, removed event property canvas: expose additional touch event informations ( radiusX , radiusY , rotationAngle and iOS-only altitudeAngle , azimuthAngle and touchType ) scripting special keyword this now returns the string \"this\" advanced syntaxes added IMPORT{file} syntax to allow loading external files in properties editor add fullscreen mode for properties with code editor enabled","title":"1.14.0, 1.14.1"},{"location":"docs/changelog/#1132","text":"bug fixes editor: keep relative sizes and positions when resizing multiple widgets at a time widgets canvas: expose touch pressure (as event.force ) in the touch script. canvas: expose touch events for extra elements added with the html property","title":"1.13.2"},{"location":"docs/changelog/#1131","text":"bug fixes editor: data loss when leaving the editor's focus with no modifications","title":"1.13.1"},{"location":"docs/changelog/#1130","text":"bug fixes scripting: storage.getItem() not returning anything editor new code editor for script , touch , draw and props properties with syntax highlighting, line numbers, etc scripting set() : add an option to prevent target widget's script widgets root: add hideMenu property misc minor cosmetic changes","title":"1.13.0"},{"location":"docs/changelog/#1120","text":"widgets new canvas widget (under pads ): allows creating custom widgets button: expose normalized touch coordinates in scripts as locals.touchCoords print a warning in the console when using advanced syntaxes in the script property","title":"1.12.0"},{"location":"docs/changelog/#1111","text":"bug fixes client options specified in server config not working unless lowercased make disconnection detection less aggressive (don't display notification if reconnection succeeds quickly) panel: initial scroll state issue","title":"1.11.1"},{"location":"docs/changelog/#1110","text":"bug fixes menu: interaction issue on iOS script: prevent script functions from being called in the wrong scope (ie when leaked using the globals object) and print an explicit error containers: prevent errors with some color formats in colorWidget theme: relative url not resolved correctly widgets when a panel contains widgets and has scroll set to true , its value will be used to represent the scroll position for x-axis and y-axis between 0 and 1.","title":"1.11.0"},{"location":"docs/changelog/#1103","text":"bug fixes config not persistent on windows misc read-only mode now hides and disables the main menu","title":"1.10.3"},{"location":"docs/changelog/#1102","text":"bug fixes certificate expiration issue regression breaking colors in canvas-based widgets","title":"1.10.2"},{"location":"docs/changelog/#1100","text":"bug fixes sliders: ignore key order in range sliders: handle mousewheel increment when starting from a value between two steps with steps property defined inspector: allow scrolling in the help modal console: fix command history behavior and increase history size widgets encoder: expose angle in script (as locals.angle ) new textarea widget (multi line input) expose the computed dimensions of canvas-based widgets in css (as --widget-width and --widget-height ) and script (as locals.width and locals.height ) client add Save backup menu action (saves a backup copy of current session with an incremented suffix appended to the file name)","title":"1.10.0"},{"location":"docs/changelog/#1914","text":"bug fixes modal: remove html property matrix: nested property inheritance (eg. @{id_@{id_x}} ) not working in props","title":"1.9.14"},{"location":"docs/changelog/#1913","text":"bug fixes nested property inheritance (eg. @{id_@{id_x}} ) not updating properly canvas based widgets not updating when hidden","title":"1.9.13"},{"location":"docs/changelog/#1912","text":"bug fixes client options: options ignored if not lowercased sliders: prevent errors for some edge-case range values","title":"1.9.12"},{"location":"docs/changelog/#1911","text":"bug fixes range: value not properly updated with set() misc (built-in client only) add nofocus client option to prevent the client window from taking focus unless a text input or a dropdown is clicked.","title":"1.9.11"},{"location":"docs/changelog/#1910","text":"bug fixes matrix: regression from 1.9.8 (broken nested @{} syntax in props property) misc midi: detect missing binary (eg when deleted by antivirus) and print a message","title":"1.9.10"},{"location":"docs/changelog/#199","text":"bug fixes matrix: regression from 1.9.8","title":"1.9.9"},{"location":"docs/changelog/#198","text":"bug fixes matrix: update children when props is modified even when the result for $ = 0 doesn't change fragments: fragment widgets empty when reloading panel: scrollbar issue on iOS 13+ scripting expose console.clear()","title":"1.9.8"},{"location":"docs/changelog/#197","text":"bug fixes issue when resizing widget using keyboard shortcuts advanced syntaxes (VAR{}): avoid storing default value as string if it can be parsed as a javascript primitive (boolean, number, etc) advanced syntaxes (VAR{}): ignore quotes around variable name editor change keyboard shortcuts for moving widgets (now mod + arrows ) and navigating in widgets (now arrows ) to feel more natural with the project tree view. widgets script: bypass keyboard shortcuts already used by the editor if it is enabled matrix: removed ambiguous start property matrix: advanced syntax blocks can be passed to children without being resolved at the matrix\\' scope by adding an underscore before the opening bracket text: add soft mode for the wrap property input: improve numeric mode on iOS","title":"1.9.7"},{"location":"docs/changelog/#196","text":"bug fixes advanced syntaxes: VAR{} not updating when the default value is edited editor: fix \"Bring to front\" and \"Send to back\" context menu actions ui add keyboard shortcuts mod + \"+\" and mod + \"-\" to control zoom level widgets input: add numeric property (allows numeric values only and displays numeric keyboard on mobile devices) button: add soft mode for the wrap property switch: add wrap property editor display dropdown and checkbox for boolean properties with extra choices","title":"1.9.6"},{"location":"docs/changelog/#195","text":"bug fixes advanced syntaxes: various issues and regressions editor: preserve advanced syntaxes in left and top when pasting a widget editor tree: update widget visibility when it changes dynamically","title":"1.9.5"},{"location":"docs/changelog/#194","text":"bug fixes prevent error with empty OSC{} blocks regression breaking advanced syntax blocks containing nested brackets advanced syntaxes new syntax for creating and using custom variables in properties: VAR{name, default} JS{} blocks don't require 2 brackets anymore ( JS{{}} still works) scripting add getVar() and setVar() for reading and modifying custom variables. This allows modifying properties directly from scripts (if they contain VAR{} blocks). expose session path as globals.session editor make tree item blink when hitting \"Show in tree\" remote control add /SCRIPT command to run scripts remotely","title":"1.9.4"},{"location":"docs/changelog/#193","text":"bug fixes scripting: set() not working from a slider to a pad tabs not sending messages / triggering scripts when clicked in editing mode prevent hang with some syntax errors in advanced syntaxes don't show project tree if minimized when creating a new widget (1.9.2 regression) fix \"ID + 1\" paste for widgets with numeric ids dropdown: reset the underlying dropdown when the widget's value is undefined editor tree: allow specifying multiple type filters tree: add \"Show in session\" context menu action","title":"1.9.3"},{"location":"docs/changelog/#192","text":"bug fixes visualizer: remove bars and dots option plot: fix bars option project tree: clear filter input when loading a session server: fix serving files from paths containing accents editor: keep editor open when loading a session menu: prevent clipping in container on iOS widgets image: add pre defined values for size , position and repeat properties text: add vertical alignment choices to align editor tree: add icons before widget ids depending on the category tree: activate tab when selecting it in the project tree tree: allow dragging widgets from a container to another tree: expand container when a new widget is created inside it tree: add support for filtering widgets by type (by typing type:fader for example) smarter shift+drag selection: allow selecting widgets in the area when the event started on the parent container select newly created widgets/tab except when copy-pasting remote control add /STATE/SEND command","title":"1.9.2"},{"location":"docs/changelog/#191","text":"bug fixes button: allow writing strings like \"1.0\" in label without removing the decimals editor: use css variable --grid-width at startup and after disabling & enabling the grid launcher: regression preventing server halt when built-in client is closed manually beforehand scripting: prevent crash (built-in client only) when using the variable navigator widgets menu/switch/dropdown: reset value to undefined when receiving a value that's not defined in values scripting expose instance of navigator Clipboard as globals.clipboard midi allow sending note off with velocity add option for receiving note off with velocity misc v0->v1 session conversion: remove JS{{}} in script property","title":"1.9.1"},{"location":"docs/changelog/#190","text":"Warning Sessions saved with this version will not open in older versions (sessions saved with older version will open in this version). bug fixes remote-root option not applied on resources loaded by the client app (css images, etc) input: display issue when resizing the window launcher: cancel stopping the server when there are unsaved changes in the built-in client editor context menu: add export action to export a widget as a fragment file show project tree if minimized when clicking on \"Show in tree\" widget new fragment widgets (under containers ): embedded session or fragment file with overridable properties. add comments property to all widgets launcher add Always on top menu toggle","title":"1.9.0"},{"location":"docs/changelog/#1815","text":"bug fixes editor: error when duplicating widget while if the clipboard is empty ui: local zoom move issue when not in fullscreen custom module: clearInterval() not working regression breaking style attribute in html property misc faster local zoom","title":"1.8.15"},{"location":"docs/changelog/#1814","text":"bug fixes alt+shift+c not working when pressed before dragging incremental pasting issue with address property generate scrollbars for panels on iOS 13+ fix scrolling on chrome for iOS 13+ editor add mod+d and mod+shift+d for duplicating widgets use a temporary clipboard when duplicating widgets misc inspector: move script property to scripting category ui: minor style tweaks","title":"1.8.14"},{"location":"docs/changelog/#1813","text":"widgets file: show save icon when mode is set to save file: center icon when hidePath is set to true sliders/pads: apply spring property dynamically ui add alt + wheel for local zoom centered on cursor editor add alt+c+drag and alt+shift+c+drag for duplicating dragged widgets","title":"1.8.13"},{"location":"docs/changelog/#1812","text":"bug fixes: project tree: filter input position issue when scrolling sliders/pads: apply spring property dynamically project tree select range of contiguous widgets with shift + click misc plot: remove unused filters property; fix description for rangeX and rangeY console: focus input when the console opens","title":"1.8.12"},{"location":"docs/changelog/#1811","text":"bug fixes switch: widget not reacting at first touch when traversing is enabled on parent sliders: disable mousewheel when spring is enabled widgets script: add once event mode encoder: remove spring property custom module expose process global scripting add openUrl function","title":"1.8.11"},{"location":"docs/changelog/#1810","text":"bug fixes modal: issues with children's visibility console: allow multiple arguments in console.log() ui launcher: add many keyboard shortcuts client: add keyboard shortcuts for clearing the console scripting add setFocus function to focus an input widget programmatically misc add usePercents client option","title":"1.8.10"},{"location":"docs/changelog/#189","text":"bug fixes script: issue when using the options argument in set() (options leaked to subsequent set() calls in the script) multixy: decimals property not applied multixy: spring behavior not working until all points are released custom module: prevent require() from reading submodules files each time and instead return the object in memory","title":"1.8.9"},{"location":"docs/changelog/#188","text":"launcher add file browser button for the theme option and fix parsing path containing spaces if only one theme is set windows remove ctrl+w shortcut for closing a window (use alt+f4 instead)","title":"1.8.8"},{"location":"docs/changelog/#187","text":"midi add active sensing messages support (received as sysex) remote control restore /TABS command (for opening tabs by ids) widgets encoder: expose rotation speed in script (as locals.speed )","title":"1.8.7"},{"location":"docs/changelog/#186","text":"bug fixes range: per-fader touch event not emitted properly rgb: fix spring property rgb: touch event not emitted","title":"1.8.6"},{"location":"docs/changelog/#185","text":"bug fixes midi: debug messages displayed as errors launcher: broken context menu","title":"1.8.5"},{"location":"docs/changelog/#184","text":"bug fixes input: prevent focus when selecting the widget for edition input: submit content when leaving focus, not only when hitting enter or tab ( esc still cancels) midi: prevent midi bridge from stopping when an error occurs; provide meaningful errors when connection fails editor inspector: hitting ctrl+s while editing a property will submit the change before saving ui hide the console toggle button when the bottom panel is minimized and the editor is disabled widgets file: add mode property, for choosing between open and save modes switch: add flip mode","title":"1.8.4"},{"location":"docs/changelog/#183","text":"bug fixes keyboard: allow note numbers up to 127 server: return http 404 error when a user-requested resource is not found instead of keeping a pending request modal: visible property not applied correctly project tree add an input for filtering displayed widget by id","title":"1.8.3"},{"location":"docs/changelog/#182","text":"bug fixes menu: allow manual line breaks (\" \\n \") in labels / values custom module: parsing issue when sending widget data using receive() ( type attribute erroneously parsed as an osc typetag) widgets html property: allow \"href\" attribute on \"a\" elements","title":"1.8.2"},{"location":"docs/changelog/#181","text":"bug fixes script: stops triggering osc messages under some circumstances","title":"1.8.1"},{"location":"docs/changelog/#180","text":"bug fixes project tree: layout issue with deeply nested widgets ios 10.3 regression file browser: layout issue with long paths custom module add nativeRequire function (allows loading native node modules or locally installed modules)","title":"1.8.0"},{"location":"docs/changelog/#178","text":"bug fixes canvas-based widgets not drawn when placed in a modal while having a conditional visibility set text: missing decimals property clone: fix usage of osc listener syntax (acts as if clone has an address property set to auto ) widgets clone: make props property dynamic (avoid full widget rebuild when possible) misc increase client console history size and allow changing it with client url options","title":"1.7.8"},{"location":"docs/changelog/#177","text":"bug fixes startup regression","title":"1.7.7"},{"location":"docs/changelog/#176","text":"bug fixes (harmless) error raised when starting the server from the launcher with debug set to true editor display/save color picked values with css rgba notation instead of hexadecimal widgets modal: add ignoreTabs option (allows overflowing tab ancestors) menu: add ignoreTabs option","title":"1.7.6"},{"location":"docs/changelog/#175","text":"bug fixes ios: cloned menu not displayed correctly engine: downgrade to fix startup issue on windows","title":"1.7.5"},{"location":"docs/changelog/#174","text":"bug fixes editor: cloned dropdown and input widgets not opening when selected widgets: prevent value-stateless widgets (tap buttons, clone, scripts, html and svg) from sending a value for cross-client synchronization (leads to unexpected script execution) and exclude them from state saves input: apply decimals number before checking the value against the validation expression range: steps and dashed property not working; remove origin property config conflicts between launcher and server (affecting at least session history)","title":"1.7.4"},{"location":"docs/changelog/#173","text":"bug fixes custom module / theme: prevent reloading the module while the file is being written to server: if a theme is used, attempt to resolve image urls against the theme file's location modal/button: prevent error when label is updated widgets encoder: add ticks property back","title":"1.7.3"},{"location":"docs/changelog/#172","text":"bug fixes midi: mtc parsing error custom module: hot reload cache issue on windows","title":"1.7.2"},{"location":"docs/changelog/#171","text":"bug fixes regression causing server errors","title":"1.7.1"},{"location":"docs/changelog/#170","text":"Important change Prebuilt binaries are now supplied only for 64bit Linux/MacOs/Windows. Other platforms should use the node package or build it from sources. MIDI support As of this version, packages except the node package are bundled with a midi binary that will be used whenever midi's path option is not set. It is no longer necessary to install python and python-rtmidi . Changelog bug fixes editor: missing context menu (copy, paste) in inspector inputs widgets: osc listeners not resolving \"auto\" address cli: ELECTRON_RUN_AS_NODE headless mode not working without --no-gui option ios: clone widget not laid out properly in horizontal panels ui: missing vertical scrollbar when root's height overflows the workspace server: provide readable error when a file requested by the client file is not found tab: content not drawn when changing visible property matrix: addresses not generated property when matrix' address is auto ui add console bottom panel with a simple script interpreter widgets keyboard: add velocity property (allows mapping the touch coordinates between off (top) and on (bottom)) input: add validation property (allows defining a regular expression that the value must match) modal: add relative position property midi accept sending sysex strings without spaces between the bytes load prebuilt midi binary on 64bit linux/windows/osx add support for midi time code messages misc sessions converted from v0 will use the widget's html property to display the former label property","title":"1.7.0"},{"location":"docs/changelog/#162","text":"bug fixes matrix: issues when changing non-dynamic properties (content not properly removed) input: apply default value when receiving an empty value or no value at all","title":"1.6.2"},{"location":"docs/changelog/#161","text":"bug fixes keyboard: prevent script property from being copied to each key widgets keyboard: make on and off properties dynamic script: add getIndex function matrix/keyboard: id variable in script is now the id of the child widget that triggered the event","title":"1.6.1"},{"location":"docs/changelog/#160","text":"bug fixes range: error when setting default property range: fix doubleTap property widgets all: add html property to allow inserting custom content in widgets (label, value, etc) and style it with the css property. scripting: send() : ignore the widget's bypass property (allows bypassing default messages and define custom ones) set() : add supports for wildcards in the id parameter set() : add a 3 rd optional parameter for preventing further script executions and/or osc messages from being sent custom module automatically reload custom module when the file is modified add support for loading submodules with require() theme automatically reload theme when the file is modified","title":"1.6.0"},{"location":"docs/changelog/#154","text":"bug fixes ssl: generate unique certificates (with random serial numbers) to avoid reuse errors. Certificates generated with older versions of o-s-c will be updated automatically. ~/ path prefix not recognized when using remote control commands like /SESSION/SAVE ~/ path prefix not recognized in remote-root option editor: paste ID+1: midi-related addresses should not be incremented remote control add /STATE/OPEN and /STATE/SAVE commands ignore unsaved changes when loading a session with /SESSION/OPEN resolve relative file paths against remote-root setting","title":"1.5.4"},{"location":"docs/changelog/#153","text":"bug fixes editor: error when preArgs and address are modified at the same time (affects /EDIT command and matrix/clone widgets)","title":"1.5.3"},{"location":"docs/changelog/#152","text":"bug fixes launcher: midi device names containing multiple spaces not parsed correctly fullscreen: lack of support not detected on some ios devices multixy: labels not hidden when ephemeral is true remote control add /SESSION/OPEN and /SESSION/SAVE commands","title":"1.5.2"},{"location":"docs/changelog/#151","text":"bug fixes widgets: touch state scripts not triggering some synchronization mechanism widgets encoder: remove steps , ticks and origin properties encoder: make sensitivity work with values below 1","title":"1.5.1"},{"location":"docs/changelog/#150","text":"bug fixes image: broken value validation menu/dropdown: use correct z-index dropdown: prevent dropdown from opening when selecting the widget for edition editor holding alt extends the north-west handle to the widget's size to ease dragging widget properties reordered (e.g. style-related properties, even widget-specific, are now under the \"style\" category) widgets remove colorBg for all widgets except containers widgets background color is now transparent by default (can be overridden with css) keyboard: added colorBlack and colorWhite properties to customize key colors dropdown/menu: add label property (with support easy key/value display) dropdown/menu: add icon toggle property modal: add popupPadding property to control the button's and the container's padding independently","title":"1.5.0"},{"location":"docs/changelog/#141","text":"bug fixes multixy/range: prevent some extra touch state events;`","title":"1.4.1"},{"location":"docs/changelog/#140","text":"bug fixes project tree: error when dropping a widget at its initial position editor validate property change when clicking on a widget cancel property change when hitting escape add menu and keyboard shortcuts to reorder widgets add keyboard shortcut to show widget in project tree selected widget is not showed on top of the others anymore widgets expose widgets unique identifiers with property name \"uuid\" xy/multixy: add ephemeral property fader/knob/xy/range/multixy: remove touchAddress property fader/knob/xy/range/multixy: expose touch state in script property ( touchAddress usages will be converted automatically)","title":"1.4.0"},{"location":"docs/changelog/#130","text":"bug fixes editor: hide impossible actions from context-menu (eg adding widgets in tab containers) editor: error when selecting a tab/root widget while a property field contains unsubmitted changes panel: layout issue with tabs & lineWidth property input: extend focusable area midi remove variable args in sysex messages (dynamic properties and scripting can be used to this effect) add support for sending sysex bytes as integers allow sending any system message (eg MIDI time code) add support for receiving MIDI time code messages (as raw sysex) (requires adding the mtc flag to the midi configuration)","title":"1.3.0"},{"location":"docs/changelog/#121","text":"scripting expose toolbar menu actions remote control optimise small changes made with /EDIT widgets button: add wrap and vertical properties root: add width and height properties (helps building mobile layouts)","title":"1.2.1"},{"location":"docs/changelog/#120","text":"bug fixes editor: id not incremented when pasting multiple widgets with id+1 main remove support for extra args in the custom-module option (fixes some path issues) widgets all: add lineWidth style property knob: add solid & line designs fader: add knobSize property editor preserve percentages in position/size add 'Relative units (%)' option to use percents automatically on new widgets","title":"1.2.0"},{"location":"docs/changelog/#110","text":"bug fixes iOS 14+ scrolling issue midi add support for channel pressure and key pressure messages widgets svg: remove support for non-standard %x and %y units; fixed layout update when resized; knob: add support for custom dash/gap size in dashed property","title":"1.1.0"},{"location":"docs/changelog/#104","text":"bug fixes script: broken storage.getItem and storage.removeItem regression breaking remote-root option when starting with the launcher","title":"1.0.4"},{"location":"docs/changelog/#103","text":"bug fixes modal: layout issue on iOS widgets panels: added contain property to allow scrolling in vertical/horizontal layouts midi add support for named ports in midi configuration","title":"1.0.3"},{"location":"docs/changelog/#102","text":"bug fixes broken scrolling on iPhone iOS 13 window geometry issue","title":"1.0.2"},{"location":"docs/changelog/#101","text":"UI windows' dimensions and position are now saved upon closing and restored at startup","title":"1.0.1"},{"location":"docs/changelog/#100","text":"This list is not exhaustive compatibility dropped support for iOS 9 firefox (75+) support UI overhaul design reworked foldable sidepanels removed lobby added toolbar menu display loading (spinner) in a notification instead of a modal mod + w to close window context-menu now use click event to trigger actions, not mousedown/touchstart no more uppercase text by default themes built-in themes removed except orange translations incomplete russian translation removed editor project tree dropdown for properties with multiple choices color picker preview numeric values for style-related properties set to auto context menu: added \"show in tree\" action context menu: removed \"edit parent\" action allow copying tabs (to tab containers only) shared clipboard across all clients prevent interaction with widgets when shift or ctrl is held ensure @{} bindings are always updated upon edition widget changes all: removed label option except for buttons, tabs and modals (one should use text widgets if needed) all: removed support for null and \"self\" targets all: added ignoreDefaults property (allows ignoring the server's default targets) all: precision property to decimals , don't set osc integer typetag when 0 all: added typeTags property all: multiple style properties to control visibility, colors, alphas and padding all: added interaction (=> css pointer-events: none; ) all: added expand (=> css flex: 1; ) all: prevent html tags in label pads: removed split property -> use custom-module or script instead root: can contain widgets or tabs panels: added layout , justify and gridTemplate to help managing layouts (especially responsive ones) panels: added verticalTabs property panels: added traversing property, allow restricting traversing to a specific widget type fader: removed input fader: removed meter fader: added gradient fader: added round design style fader: support setting dash size and gap size in dashed property switch: added layout (including grid) switch: added click mode plot/eq: removed smooth plots/sliders/pads: reversed logScale behavior to match standard implementations; can be either false (disabled), true (logarithmic scale) or number (manual log scale, negative for exponential scale) visualizer: added framerate property visualizer: added freeze property menu: always centered menu modal: modals can't overflow parent tab boundaries input: removed vertical pads, range: when touchAddress is set, one message per touched point is sent, in addition to the former touch state message eq: removed logScaleX property, always draw logarithmic frequency response eq: logarithmic x-axis scale fixed eq: filters are now defined with the filters property, leaving the value to its default purpose eq: added rangeX html: allow class , title and style attributes dropdown: close menu when receiving a value dropdown: removed empty 1 st option switch: removed showValues (inconsistent with menu/dropdown, feature covered by values property) frame: allow loading non local urls widget removals push , toggle : merged into button strip : features now covered by panel meter : duplicate of fader with design to compact and interaction to false switcher , state , crossfader : removed => state management functions added to the script widget keys : merged with script gyroscope : not compatible since chrome 74 unless o-s-c goes HTTPS remote control removed /TABS added /NOTIFY scripting (general) removed MathJS language reuse #{} syntax as as shorthand for JS{{}} (one liner, implicit return) added locals variable, a variable store scoped to the widget renamed global to globals expose environment variables in globals : url , env (query parameters), platform , screen (width/height) script widget always hidden except in project tree script property must not be wrapped in a JS{{}} block anymore added stateGet and stateSet functions added storage object, proxy to the document's localStorage object (allows storing data that persist after refresh/close (cleared with the browser's cache) added setTimeout , clearTimeout , setInterval , clearInterval function proxies with an extra id argument (they clear automatically when called multiple times and upon widget removal. id is scoped to the widget) state quickstate (store/recall from menu) is now stored in the clients cache and persists after refresh/close (cleared with the browser's cache) custom module settings.read(name) : name is now the long name of command-line options (not a camelCased one) receive() : optional last argument to pass extra options such as clientId client id persist upon page refresh and can be set manually with the client url option id launcher config save/load allow starting/stopping server without rebooting syntax check on --midi option server renamed --url-options to --client-options and make them apply even in remote browsers (can be overridden with url queries) removed --blank , --gui-only , --examples hide --disable-gpu (cli-only) added cli-only --cache-dir and --config-file added --authentication option added --use-ssl option misc canvas: better visibility checks to avoid unnecessary draw calls visualizer: perf improvement (avoid data processing when not visible), all visualizers hook on the same loop to avoid concurrent timeouts button: in 'tap' mode (formerly push with noRelease ), never send/sync off value, automatically reset to off when receiving on more detached DOM for lighter nested canvas widgets (ie multixy) unified (kind of) dom html structure for widgets, known css tricks will require adjustments. cache and config files are now stored in a folder named open-stage-control (located in the system's default location for config file). The .open-stage-control is no longer used. added support for icons rotate/flip transform suffixes (example: ^cog.spin , ^play.rotate-horizontal )","title":"1.0.0"},{"location":"docs/client-options/","text":"Client options can be set either with the server's --client-options option, or per client by adding query parameters to the server's url. One must prepend the url with a question mark ( ? ) followed by parameter=value pairs separated with ampersands ( & ). Option Value Default Description hdpi 1 / 0 0 enable high resolution canvas forceHdpi number 0 force canvas scaling (ignore hdpi ) doubleTap number 375 sets the double tap/click time threshold in milliseconds zoom number 1 sets the initial zoom framerate number 60 limit canvas drawing framerate desyncCanvas number 0 set to 1 to enable desynchronized canvas (may improve rendering performances) lang string system_default use a different language than the default if available (available languages: en, fr) consoleLength number 300 sets the maximum number of log messages in the client's console id string random_id client's unique id (use with caution: two clients should never have the same id) usePercents 1 / 0 0 sets the editor's \"relative units\" option noFocus 1 / 0 0 (built-in client only) prevent the client window from taking focus unless a text input or a dropdown is clicked clientSync 1 / 0 1 set to 0 to prevent the client from syncing with other clients altTraversing 1 / 0 0 set to 1 to enable an alternative traversing behavior for toggle buttons (traversing gestures on toggle buttons will change their values in only one way depending on the first touched button's state) virtualKeyboard 1 / 0 0 (desktop only) set to 1 to enable the virtual keyboard by default Example: http://server-ip:port?hdpi=1","title":"Client options"},{"location":"docs/credits/","text":"License # Copyleft \u00a9 Jean-Emmanuel Doucet @ AMMD 2014-2022. This program is a free software released under the GNU/GPL3 license. Dependencies # Open Stage Control relies on several other free softwares: https://github.com/jean-emmanuel/open-stage-control/network/dependencies The default theme is based on Nord , some UI components are inspired by the Atom text editor. Contributors # https://github.com/jean-emmanuel/open-stage-control/graphs/contributors Infrastructure supports # AMMD hosts this website and made this project possible by funding its first 2 years of development. Discourse provides the community forum. BrowserStack provides remote browsers for debugging.","title":"Credits"},{"location":"docs/credits/#license","text":"Copyleft \u00a9 Jean-Emmanuel Doucet @ AMMD 2014-2022. This program is a free software released under the GNU/GPL3 license.","title":"License"},{"location":"docs/credits/#dependencies","text":"Open Stage Control relies on several other free softwares: https://github.com/jean-emmanuel/open-stage-control/network/dependencies The default theme is based on Nord , some UI components are inspired by the Atom text editor.","title":"Dependencies"},{"location":"docs/credits/#contributors","text":"https://github.com/jean-emmanuel/open-stage-control/graphs/contributors","title":"Contributors"},{"location":"docs/credits/#infrastructure-supports","text":"AMMD hosts this website and made this project possible by funding its first 2 years of development. Discourse provides the community forum. BrowserStack provides remote browsers for debugging.","title":"Infrastructure supports"},{"location":"docs/remote-control/","text":"Remote control # When osc messages are received, the default behavior is to update the value of all widgets that match the address and preArgs. Additionally, Open Stage Control responds to some general osc commands. Multi-client setup These commands are interpreted by each client connected to the server so there might be more than one reply. Using a custom module is the only way to send a message to a single client. /EDIT id properties options # Apply a set of options to an existing widget by replacing the old ones with the new ones. This ignores the widget's lock property. id : string , widget's id properties : string , JSON5 stringified object defining the new properties to merge example: {\"label\":\"New Label\", \"color\":\"red\"} options (optional): string , JSON5 stringified object defining extra option flags: noWarning : set to true to prevent further warning when exiting. Warning Editing widgets is cpu expensive; for small and recurrent changes, consider using osc listeners instead. /EDIT/MERGE id properties options # Apply a set of options to an existing widget by merging them to the widget's options. /EDIT/UNDO # Undo editing action /EDIT/REDO # Redo editing action /EDIT/GET target id # Sends back a widget's data (JSON stringified object), including its children, to specified target. target : string , ip:port pair id : string , widget's id Replies /EDIT/GET id data id : string data : string /EDIT/GET target address preArg1 preArg2 ... # Sends back a widget's data (JSON stringified object), including its children, to specified target. target : string , ip:port pair address : string , widget's address preArg[1...] : * , widget's preArgs Replies /EDIT/GET address preArg1 preArg2 ... data address : string , widget's address preArg[1...] : * , widget's preArgs data : string /GET target id # Sends back a widget's value to specified target. target : string , ip:port pair id : string , widget's id Replies /GET id value id : string value : * /GET target address preArg1 preArg2 ... # Sends back a widget's value to specified target. target : string , ip:port pair address : string , widget's address preArg[1...] : * , widget's preArgs Replies /GET address preArg1 preArg2 ... value address : string , widget's address preArg[1...] : * , widget's preArgs value : * /GET/# # Same as /GET but uses the widget's address instead of /GET to reply. /NOTIFY icon message # Sends a notification message to the client. icon : icon for the notification, for example : ^play , ^pause , etc (see https://fontawesome.com/icons?d=gallery&s=solid&m=free ) message : message content /LOG message # Print message in the client's console. /SET id value # Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value. id : string , widget's id value : * , widget's new value /SET address preArg1 preArg2 ... value # Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value. address : string , widget's address preArg[1...] : * , widget's preArgs value : * , widget's new value /STATE/GET target # Sends back the app's state to specified target target : string , ip:port pair /STATE/SET state # Set widgets' state state : string , json stringified object ( \"widget_id\": value pairs) /STATE/STORE # Save the state of all widgets in the temporary slot. /STATE/RECALL # Reload saved state from the temporary slot. /STATE/SEND # Make all widgets send their current value. /STATE/OPEN path.state # Open state file path.state . /STATE/SAVE path.state # Save state session to path.state . If path.state is omitted, current session's path is used. /SESSION/OPEN path.json # Open session file path.json . /SESSION/SAVE path.json # Save current session to path.json . If path.json is omitted, current session's path is used. /TABS tab_id1 tab_id2 ... # Open the tabs designated by the id parameters. /SCRIPT code # Run code as if it where executed by a script widget. /RELOAD # Reload page in the browser.","title":"Remote control"},{"location":"docs/remote-control/#remote-control","text":"When osc messages are received, the default behavior is to update the value of all widgets that match the address and preArgs. Additionally, Open Stage Control responds to some general osc commands. Multi-client setup These commands are interpreted by each client connected to the server so there might be more than one reply. Using a custom module is the only way to send a message to a single client.","title":"Remote control"},{"location":"docs/remote-control/#edit-id-properties-options","text":"Apply a set of options to an existing widget by replacing the old ones with the new ones. This ignores the widget's lock property. id : string , widget's id properties : string , JSON5 stringified object defining the new properties to merge example: {\"label\":\"New Label\", \"color\":\"red\"} options (optional): string , JSON5 stringified object defining extra option flags: noWarning : set to true to prevent further warning when exiting. Warning Editing widgets is cpu expensive; for small and recurrent changes, consider using osc listeners instead.","title":"/EDIT id properties options"},{"location":"docs/remote-control/#editmerge-id-properties-options","text":"Apply a set of options to an existing widget by merging them to the widget's options.","title":"/EDIT/MERGE id properties options"},{"location":"docs/remote-control/#editundo","text":"Undo editing action","title":"/EDIT/UNDO"},{"location":"docs/remote-control/#editredo","text":"Redo editing action","title":"/EDIT/REDO"},{"location":"docs/remote-control/#editget-target-id","text":"Sends back a widget's data (JSON stringified object), including its children, to specified target. target : string , ip:port pair id : string , widget's id Replies /EDIT/GET id data id : string data : string","title":"/EDIT/GET target id"},{"location":"docs/remote-control/#editget-target-address-prearg1-prearg2","text":"Sends back a widget's data (JSON stringified object), including its children, to specified target. target : string , ip:port pair address : string , widget's address preArg[1...] : * , widget's preArgs Replies /EDIT/GET address preArg1 preArg2 ... data address : string , widget's address preArg[1...] : * , widget's preArgs data : string","title":"/EDIT/GET target address preArg1 preArg2 ..."},{"location":"docs/remote-control/#get-target-id","text":"Sends back a widget's value to specified target. target : string , ip:port pair id : string , widget's id Replies /GET id value id : string value : *","title":"/GET target id"},{"location":"docs/remote-control/#get-target-address-prearg1-prearg2","text":"Sends back a widget's value to specified target. target : string , ip:port pair address : string , widget's address preArg[1...] : * , widget's preArgs Replies /GET address preArg1 preArg2 ... value address : string , widget's address preArg[1...] : * , widget's preArgs value : *","title":"/GET target address preArg1 preArg2 ..."},{"location":"docs/remote-control/#get","text":"Same as /GET but uses the widget's address instead of /GET to reply.","title":"/GET/#"},{"location":"docs/remote-control/#notify-icon-message","text":"Sends a notification message to the client. icon : icon for the notification, for example : ^play , ^pause , etc (see https://fontawesome.com/icons?d=gallery&s=solid&m=free ) message : message content","title":"/NOTIFY icon message"},{"location":"docs/remote-control/#log-message","text":"Print message in the client's console.","title":"/LOG message"},{"location":"docs/remote-control/#set-id-value","text":"Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value. id : string , widget's id value : * , widget's new value","title":"/SET id value"},{"location":"docs/remote-control/#set-address-prearg1-prearg2-value","text":"Set a widget's value as if it was interacted with from the interface. This is likely to make it send its value. address : string , widget's address preArg[1...] : * , widget's preArgs value : * , widget's new value","title":"/SET address preArg1 preArg2 ... value"},{"location":"docs/remote-control/#stateget-target","text":"Sends back the app's state to specified target target : string , ip:port pair","title":"/STATE/GET target"},{"location":"docs/remote-control/#stateset-state","text":"Set widgets' state state : string , json stringified object ( \"widget_id\": value pairs)","title":"/STATE/SET state"},{"location":"docs/remote-control/#statestore","text":"Save the state of all widgets in the temporary slot.","title":"/STATE/STORE"},{"location":"docs/remote-control/#staterecall","text":"Reload saved state from the temporary slot.","title":"/STATE/RECALL"},{"location":"docs/remote-control/#statesend","text":"Make all widgets send their current value.","title":"/STATE/SEND"},{"location":"docs/remote-control/#stateopen-pathstate","text":"Open state file path.state .","title":"/STATE/OPEN path.state"},{"location":"docs/remote-control/#statesave-pathstate","text":"Save state session to path.state . If path.state is omitted, current session's path is used.","title":"/STATE/SAVE path.state"},{"location":"docs/remote-control/#sessionopen-pathjson","text":"Open session file path.json .","title":"/SESSION/OPEN path.json"},{"location":"docs/remote-control/#sessionsave-pathjson","text":"Save current session to path.json . If path.json is omitted, current session's path is used.","title":"/SESSION/SAVE path.json"},{"location":"docs/remote-control/#tabs-tab_id1-tab_id2","text":"Open the tabs designated by the id parameters.","title":"/TABS tab_id1 tab_id2 ..."},{"location":"docs/remote-control/#script-code","text":"Run code as if it where executed by a script widget.","title":"/SCRIPT code"},{"location":"docs/remote-control/#reload","text":"Reload page in the browser.","title":"/RELOAD"},{"location":"docs/custom-module/custom-module/","text":"Custom module # Using the server's custom-module option, users can load a custom javascript module that filters incoming and outgoing OSC / MIDI messages. Writing a custom module # // Do whatever you want // initialize variables // declare functions // load modules // etc module . exports = { init : function (){ // this will be executed once when the osc server starts }, oscInFilter : function ( data ){ // Filter incoming osc messages var { address , args , host , port } = data // do what you want // address = string // args = array of {value, type} objects // host = string // port = integer // return data if you want the message to be processed return { address , args , host , port } }, oscOutFilter : function ( data ){ // Filter outgoing osc messages var { address , args , host , port , clientId } = data // same as oscInFilter // return data if you want the message to be and sent return { address , args , host , port } }, unload : function (){ // this will be executed when the custom module is reloaded }, } Available globals # The module is executed in a restricted context, only a few globals are available : app # Event Emitter , useful for monitoring the events sent by the different clients. Event names can be found in callbacks.js , callbacks are called with 2 arguments: data (object) and client (object: {address, id} ) receive(host, port, address, ...args, options) # Send osc/midi message to connected clients. host and port can be specified to simulate a specific origin for the message. host (optional): string ip address, valid hostname or \"midi\" port (optional): integer port number or string midi device name address : osc address args : value or {type: \"OSC_TYPE_LETTER\", value: VALUE} object (objects that don't match this format will simply be turned to a JSON string). options (optional): set to {clientId: id} to define which client receives the message (where id is the client's id as retrieved from app events or oscOutFilter ) send(host, port, address, ...args) # Send osc/midi to a target (see receive() ). settings.read(name) # Returns specified server option. name must be the option's long name without the leading dashes (ie: \"send\" , not \"s\" ) settings.appAddresses() # Returns the server's http addresses. loadJSON(path) # Loads a json file (path is relative to the custom module location) saveJSON(path, object) # Saves an object/array to a json file (path is relative to the custom module location) require(path) # Load another javascript module. Returns the value of module.exports defined in this module. If path is a relative path, it will be resolved against its parent module's path. See Managing Big Modules . This function is different from node's native require function, it's merely a way to split a custom module into separate files. nativeRequire(moduleName) # This function can be used to load native node modules or locally installed modules (e.g. with npm) if a node_modules folder is found in the custom module's location. Installing node modules: resources https://nodejs.dev/ https://nodejs.dev/learn/an-introduction-to-the-npm-package-manager https://nodejs.dev/learn/the-package-json-guide Other javascript globals # console setTimeout clearTimeout setInterval clearInterval __dirname __filename process Autoreload # Custom modules (including submodules loaded with require() ) are reloaded automatically when they are modified. Upon reload, timers ( setTimeout and setInterval ) and event listeners (added to the app object) are reset. Reloading native modules When using modules loaded with nativeRequire() , you may need to tell the custom module how to unload some components to allow reloading using the module.exports.unload definition. For example, if a port is bound using the http module, you'll need to unbind it otherwise the custom module will fail to bind it again when reloading: var http = nativeRequire ( 'http' ), server = http . createServer (( req , res )=>{ res . writeHead ( 200 ) res . end ( 'Hello world' ) }) server . listen ( 5555 , 'localhost' ) module . exports = { unload : function () { server . close () // otherwise you'd get \"Error: listen EADDRINUSE: address already in use 127.0.0.1:5555\" } }","title":"Custom module"},{"location":"docs/custom-module/custom-module/#custom-module","text":"Using the server's custom-module option, users can load a custom javascript module that filters incoming and outgoing OSC / MIDI messages.","title":"Custom module"},{"location":"docs/custom-module/custom-module/#writing-a-custom-module","text":"// Do whatever you want // initialize variables // declare functions // load modules // etc module . exports = { init : function (){ // this will be executed once when the osc server starts }, oscInFilter : function ( data ){ // Filter incoming osc messages var { address , args , host , port } = data // do what you want // address = string // args = array of {value, type} objects // host = string // port = integer // return data if you want the message to be processed return { address , args , host , port } }, oscOutFilter : function ( data ){ // Filter outgoing osc messages var { address , args , host , port , clientId } = data // same as oscInFilter // return data if you want the message to be and sent return { address , args , host , port } }, unload : function (){ // this will be executed when the custom module is reloaded }, }","title":"Writing a custom module"},{"location":"docs/custom-module/custom-module/#available-globals","text":"The module is executed in a restricted context, only a few globals are available :","title":"Available globals"},{"location":"docs/custom-module/custom-module/#app","text":"Event Emitter , useful for monitoring the events sent by the different clients. Event names can be found in callbacks.js , callbacks are called with 2 arguments: data (object) and client (object: {address, id} )","title":"app"},{"location":"docs/custom-module/custom-module/#receivehost-port-address-args-options","text":"Send osc/midi message to connected clients. host and port can be specified to simulate a specific origin for the message. host (optional): string ip address, valid hostname or \"midi\" port (optional): integer port number or string midi device name address : osc address args : value or {type: \"OSC_TYPE_LETTER\", value: VALUE} object (objects that don't match this format will simply be turned to a JSON string). options (optional): set to {clientId: id} to define which client receives the message (where id is the client's id as retrieved from app events or oscOutFilter )","title":"receive(host, port, address, ...args, options)"},{"location":"docs/custom-module/custom-module/#sendhost-port-address-args","text":"Send osc/midi to a target (see receive() ).","title":"send(host, port, address, ...args)"},{"location":"docs/custom-module/custom-module/#settingsreadname","text":"Returns specified server option. name must be the option's long name without the leading dashes (ie: \"send\" , not \"s\" )","title":"settings.read(name)"},{"location":"docs/custom-module/custom-module/#settingsappaddresses","text":"Returns the server's http addresses.","title":"settings.appAddresses()"},{"location":"docs/custom-module/custom-module/#loadjsonpath","text":"Loads a json file (path is relative to the custom module location)","title":"loadJSON(path)"},{"location":"docs/custom-module/custom-module/#savejsonpath-object","text":"Saves an object/array to a json file (path is relative to the custom module location)","title":"saveJSON(path, object)"},{"location":"docs/custom-module/custom-module/#requirepath","text":"Load another javascript module. Returns the value of module.exports defined in this module. If path is a relative path, it will be resolved against its parent module's path. See Managing Big Modules . This function is different from node's native require function, it's merely a way to split a custom module into separate files.","title":"require(path)"},{"location":"docs/custom-module/custom-module/#nativerequiremodulename","text":"This function can be used to load native node modules or locally installed modules (e.g. with npm) if a node_modules folder is found in the custom module's location. Installing node modules: resources https://nodejs.dev/ https://nodejs.dev/learn/an-introduction-to-the-npm-package-manager https://nodejs.dev/learn/the-package-json-guide","title":"nativeRequire(moduleName)"},{"location":"docs/custom-module/custom-module/#other-javascript-globals","text":"console setTimeout clearTimeout setInterval clearInterval __dirname __filename process","title":"Other javascript globals"},{"location":"docs/custom-module/custom-module/#autoreload","text":"Custom modules (including submodules loaded with require() ) are reloaded automatically when they are modified. Upon reload, timers ( setTimeout and setInterval ) and event listeners (added to the app object) are reset. Reloading native modules When using modules loaded with nativeRequire() , you may need to tell the custom module how to unload some components to allow reloading using the module.exports.unload definition. For example, if a port is bound using the http module, you'll need to unbind it otherwise the custom module will fail to bind it again when reloading: var http = nativeRequire ( 'http' ), server = http . createServer (( req , res )=>{ res . writeHead ( 200 ) res . end ( 'Hello world' ) }) server . listen ( 5555 , 'localhost' ) module . exports = { unload : function () { server . close () // otherwise you'd get \"Error: listen EADDRINUSE: address already in use 127.0.0.1:5555\" } }","title":"Autoreload"},{"location":"docs/custom-module/examples/","text":"Basic address routing # module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/some_address' ) { address = '/fader_1' } return { address , args , host , port } }, oscOutFilter : function ( data ){ var { address , args , host , port , clientId } = data if ( address === '/fader_1' ) { address = '/some_address' } return { address , args , host , port } } } Value conversion # module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/some_address' ) { args [ 0 ]. value = args [ 0 ]. value * 10 } return { address , args , host , port } }, oscOutFilter : function ( data ){ var { address , args , host , port , clientId } = data if ( address === '/some_address' ) { args [ 0 ]. value = args [ 0 ]. value / 10 } return { address , args , host , port } } } Arguments split / merge # var xyValue = [ 0 , 0 ] module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data // split if ( address === '/some_xy_address' ) { var arg1 = args [ 0 ]. value , arg2 = args [ 1 ]. value receive ( '/fader_1' , arg1 ) receive ( '/fader_2' , arg2 ) return // bypass original message } return { address , args , host , port } }, oscOutFilter : function ( data ){ var { address , args , host , port , clientId } = data // merge if ( address === '/fader_1' ) { xyValue [ 0 ] = args [ 0 ]. value send ( host , port , '/some_xy_address' , ... xyValue ) return // bypass original message } else if ( address === '/fader_2' ) { xyValue [ 1 ] = args [ 1 ]. value send ( host , port , '/some_xy_address' , ... xyValue ) return // bypass original message } return { address , args , host , port } } } Reply # module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/knock_knock' ) { send ( host , port , '/who_is_there' ) return // bypass original message } return { address , args , host , port } }, } Simulate user input on a single client # // keep track of connected clients var clients = [] app . on ( 'open' , ( data , client )=>{ if ( ! clients . includes ( client . id )) clients . push ( client . id ) }) app . on ( 'close' , ( data , client )=>{ if ( clients . includes ( client . id )) clients . splice ( clients . indexOf ( client . id )) }) module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/some_osc_address' ) { // simulate user input on the first client in the array receive ( '/SET' , 'widget_id' , 1 , { clientId : clients [ 0 ]}) return // bypass original message } return { address , args , host , port } } } Auto-save client state # // store state in a variable var state = {} // keep track of connected clients var clients = [] app . on ( 'sessionOpened' , ( data , client )=>{ // client connected (and in a session) if ( ! clients . includes ( client . id )) clients . push ( client . id ) // when a client opens a session, send the state // but only if it's the only connected client (otherwise, let the regular sync happen) if ( clients . length === 1 ) { receive ( '/STATE/SET' , state , { clientId : clients [ 0 ]}) } }) app . on ( 'close' , ( data , client )=>{ // client disconnected if ( clients . includes ( client . id )) clients . splice ( clients . indexOf ( client . id )) }) // request 1st client's state every 10 seconds setInterval (()=>{ if ( clients . length > 0 ) { receive ( '/STATE/GET' , '127.0.0.1:8888' , { clientId : clients [ 0 ]}) } }, 10000 ) module . exports = { oscOutFilter : function ( data ) { if ( data . address === '/STATE/GET' ) { // update state variable when the client responds state = data . args [ 0 ]. value // bypass the osc message return } return data } } MIDI routing # var routing = { // midi cc vs widget id 60 : 'fader_1' , 61 : 'fader_2' , // etc } module . exports = { oscInFilter : function ( data ){ // Filter incoming osc messages var { address , args , host , port } = data if ( host === 'midi' ) { // MIDI routing ! if ( address === '/control' ) { // assign args to variables var [ channel , ctrl , value ] = args . map ( arg => arg . value ) // simple conditions if ( ctrl === 80 ) receive ( '/SET' , 'widget_id' , value / 127 ) // simple routing table (midi cc vs widget id) if ( routing [ ctrl ]) receive ( '/SET' , routing [ ctrl ], value / 127 ) // note: /SET simulates a user interaction and makes the widget send its osc message // but it adds some delay (we wait for the UI to respond) // AND it may trigger multiple replies if more than one client are connected. // Alternatively, we could do this: // send('/osc_address', value / 127) // receive('/osc_address', value / 127) // Or, to send /SET to a single client: // receive('/SET', '/osc_address', value / 127, {clientId: ID}) } return // bypass original message } // return data if you want the message to be processed return { address , args , host , port } } } Read file # var fs = nativeRequire ( 'fs' ) module . exports = { oscOutFilter : function ( data ){ // Filter outgoing osc messages var { address , args , host , port } = data if ( address === '/file' ) { fs . readFile ( args [ 0 ]. value , 'utf8' , ( err , data ) => { if ( err ) { console . error ( err ) return } receive ( '/html' , data ) }) return // bypass original message } // return data if you want the message to be processed return { address , args , host , port } } } Display RTSP Stream # // requires ffmpeg installed on the system // and rtsp-ffmpeg installed in the custom module's folder (by running npm install rtsp-ffmpeg) // see https://github.com/agsh/rtsp-ffmpeg#ffmpeg for available options var rtsp = nativeRequire ( 'rtsp-ffmpeg' ) var stream = new rtsp . FFMpeg ({ input : 'rtsp://freja.hiof.no:1935/rtplive/_definst_/hessdalen03.stream' , }) stream . on ( 'data' , ( data )=>{ // send frame to image widget with address set to \"/stream\" receive ( '/stream' , 'data:image/jpeg;base64,' + data . toString ( 'base64' )) }) module . exports = { unload : ()=>{ stream . stop () } } Custom module merger # var submodules = [ require ( './custom_modA.js' ), require ( './custom_modB.js' ), // etc ] module . exports = { init : function (){ for ( var m of submodules ) { if ( m . init ) m . init () } }, unload : function (){ for ( var m of submodules ) { if ( m . unload ) m . unload () } }, oscInFilter : function ( data ){ for ( var m of submodules ) { if ( m . oscInFilter ) data = m . oscInFilter ( data ) if ( ! data ) return } return data }, oscOutFilter : function ( data ){ for ( var m of submodules ) { if ( m . oscOutFilter ) data = m . oscOutFilter ( data ) if ( ! data ) return } return data } }","title":"Examples"},{"location":"docs/custom-module/examples/#basic-address-routing","text":"module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/some_address' ) { address = '/fader_1' } return { address , args , host , port } }, oscOutFilter : function ( data ){ var { address , args , host , port , clientId } = data if ( address === '/fader_1' ) { address = '/some_address' } return { address , args , host , port } } }","title":"Basic address routing"},{"location":"docs/custom-module/examples/#value-conversion","text":"module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/some_address' ) { args [ 0 ]. value = args [ 0 ]. value * 10 } return { address , args , host , port } }, oscOutFilter : function ( data ){ var { address , args , host , port , clientId } = data if ( address === '/some_address' ) { args [ 0 ]. value = args [ 0 ]. value / 10 } return { address , args , host , port } } }","title":"Value conversion"},{"location":"docs/custom-module/examples/#arguments-split-merge","text":"var xyValue = [ 0 , 0 ] module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data // split if ( address === '/some_xy_address' ) { var arg1 = args [ 0 ]. value , arg2 = args [ 1 ]. value receive ( '/fader_1' , arg1 ) receive ( '/fader_2' , arg2 ) return // bypass original message } return { address , args , host , port } }, oscOutFilter : function ( data ){ var { address , args , host , port , clientId } = data // merge if ( address === '/fader_1' ) { xyValue [ 0 ] = args [ 0 ]. value send ( host , port , '/some_xy_address' , ... xyValue ) return // bypass original message } else if ( address === '/fader_2' ) { xyValue [ 1 ] = args [ 1 ]. value send ( host , port , '/some_xy_address' , ... xyValue ) return // bypass original message } return { address , args , host , port } } }","title":"Arguments split / merge"},{"location":"docs/custom-module/examples/#reply","text":"module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/knock_knock' ) { send ( host , port , '/who_is_there' ) return // bypass original message } return { address , args , host , port } }, }","title":"Reply"},{"location":"docs/custom-module/examples/#simulate-user-input-on-a-single-client","text":"// keep track of connected clients var clients = [] app . on ( 'open' , ( data , client )=>{ if ( ! clients . includes ( client . id )) clients . push ( client . id ) }) app . on ( 'close' , ( data , client )=>{ if ( clients . includes ( client . id )) clients . splice ( clients . indexOf ( client . id )) }) module . exports = { oscInFilter : function ( data ){ var { address , args , host , port } = data if ( address === '/some_osc_address' ) { // simulate user input on the first client in the array receive ( '/SET' , 'widget_id' , 1 , { clientId : clients [ 0 ]}) return // bypass original message } return { address , args , host , port } } }","title":"Simulate user input on a single client"},{"location":"docs/custom-module/examples/#auto-save-client-state","text":"// store state in a variable var state = {} // keep track of connected clients var clients = [] app . on ( 'sessionOpened' , ( data , client )=>{ // client connected (and in a session) if ( ! clients . includes ( client . id )) clients . push ( client . id ) // when a client opens a session, send the state // but only if it's the only connected client (otherwise, let the regular sync happen) if ( clients . length === 1 ) { receive ( '/STATE/SET' , state , { clientId : clients [ 0 ]}) } }) app . on ( 'close' , ( data , client )=>{ // client disconnected if ( clients . includes ( client . id )) clients . splice ( clients . indexOf ( client . id )) }) // request 1st client's state every 10 seconds setInterval (()=>{ if ( clients . length > 0 ) { receive ( '/STATE/GET' , '127.0.0.1:8888' , { clientId : clients [ 0 ]}) } }, 10000 ) module . exports = { oscOutFilter : function ( data ) { if ( data . address === '/STATE/GET' ) { // update state variable when the client responds state = data . args [ 0 ]. value // bypass the osc message return } return data } }","title":"Auto-save client state"},{"location":"docs/custom-module/examples/#midi-routing","text":"var routing = { // midi cc vs widget id 60 : 'fader_1' , 61 : 'fader_2' , // etc } module . exports = { oscInFilter : function ( data ){ // Filter incoming osc messages var { address , args , host , port } = data if ( host === 'midi' ) { // MIDI routing ! if ( address === '/control' ) { // assign args to variables var [ channel , ctrl , value ] = args . map ( arg => arg . value ) // simple conditions if ( ctrl === 80 ) receive ( '/SET' , 'widget_id' , value / 127 ) // simple routing table (midi cc vs widget id) if ( routing [ ctrl ]) receive ( '/SET' , routing [ ctrl ], value / 127 ) // note: /SET simulates a user interaction and makes the widget send its osc message // but it adds some delay (we wait for the UI to respond) // AND it may trigger multiple replies if more than one client are connected. // Alternatively, we could do this: // send('/osc_address', value / 127) // receive('/osc_address', value / 127) // Or, to send /SET to a single client: // receive('/SET', '/osc_address', value / 127, {clientId: ID}) } return // bypass original message } // return data if you want the message to be processed return { address , args , host , port } } }","title":"MIDI routing"},{"location":"docs/custom-module/examples/#read-file","text":"var fs = nativeRequire ( 'fs' ) module . exports = { oscOutFilter : function ( data ){ // Filter outgoing osc messages var { address , args , host , port } = data if ( address === '/file' ) { fs . readFile ( args [ 0 ]. value , 'utf8' , ( err , data ) => { if ( err ) { console . error ( err ) return } receive ( '/html' , data ) }) return // bypass original message } // return data if you want the message to be processed return { address , args , host , port } } }","title":"Read file"},{"location":"docs/custom-module/examples/#display-rtsp-stream","text":"// requires ffmpeg installed on the system // and rtsp-ffmpeg installed in the custom module's folder (by running npm install rtsp-ffmpeg) // see https://github.com/agsh/rtsp-ffmpeg#ffmpeg for available options var rtsp = nativeRequire ( 'rtsp-ffmpeg' ) var stream = new rtsp . FFMpeg ({ input : 'rtsp://freja.hiof.no:1935/rtplive/_definst_/hessdalen03.stream' , }) stream . on ( 'data' , ( data )=>{ // send frame to image widget with address set to \"/stream\" receive ( '/stream' , 'data:image/jpeg;base64,' + data . toString ( 'base64' )) }) module . exports = { unload : ()=>{ stream . stop () } }","title":"Display RTSP Stream"},{"location":"docs/custom-module/examples/#custom-module-merger","text":"var submodules = [ require ( './custom_modA.js' ), require ( './custom_modB.js' ), // etc ] module . exports = { init : function (){ for ( var m of submodules ) { if ( m . init ) m . init () } }, unload : function (){ for ( var m of submodules ) { if ( m . unload ) m . unload () } }, oscInFilter : function ( data ){ for ( var m of submodules ) { if ( m . oscInFilter ) data = m . oscInFilter ( data ) if ( ! data ) return } return data }, oscOutFilter : function ( data ){ for ( var m of submodules ) { if ( m . oscOutFilter ) data = m . oscOutFilter ( data ) if ( ! data ) return } return data } }","title":"Custom module merger"},{"location":"docs/custom-module/managing-big-modules/","text":"Starting with v1.6.0 , custom modules can load submodules with the require() function. 1 . define some variable in number.js module . exports = 42 2 . retrieve it in your main module file ( main.js ): var num = require ( './number.js' ) module . exports = { init : function (){ console . log ( num ) // 42 }, oscInFilter : function ( data ){ // etc } }","title":"Managing big modules"},{"location":"docs/customization/css-tips/","text":"CSS Tips # Browser inspector # Hit F12 to open the developers tools panel. The html/css inspector helps retrieving the class names needed to style specific parts of the widgets: hit Ctrl + Shift + C or click on the inspect icon ( ) and click on a element in the interface to reveal its html code. Inline syntax # For simple use cases, the css property can be written as a HTML inline styles (without any CSS selector). CSS rules will apply to the widget element. opacity : 0 . 5 ; /* make the widget transparent */ font-size : 120 %; /* increase font-size */ Selector syntax # CSS selectors can be used to apply styles to specific elements: : host { /* style for the widget element & { } also works (deprecated) */ } . label { /* style for the .label elements */ } > . label { /* style for the direct child .label element */ } Mixing Inline and Selector syntaxes doesn't work, once you use selectors, you have to use the :host selector to target the widget element. Extra css classes: class # This non-standard css property can be used to add custom css classes to the widget element: class: my-custom-class; Multiple classes can be added (one per class statement). Custom classes are always added to the widget's root element, css selectors are ignored. Using class names that are already used in the app can be hazardous. In order to avoid that, custom class names should be prefixed with something uncommon and preferably cool, such as xxx-myclass or crispy-seitan-myclass . Layering: z-index # Z-Axis ordering can be set using the z-index rule. Widgets positioned at absolute coordinates (when top or left is different from auto ) have z-index:10; by default. Responsive sizing # In most cases, using vertical , horizontal or grid layouts as well as using percentages in height and width will do. CSS calc() function can help in some cases (set the corresponding property to auto to avoid conflicts): : host { width : calc ( 100 % - 100 rem ); } Media queries can also be used: @ media screen and ( min-width : 768px ) { : host { /* style the widget if the screen is bigger than 768px */ } } Size units # use rem instead of px ( px values will not scale when zooming), except for media queries use % for font-size CSS variables # CSS variables declared in the default theme can be overridden. Widgets also rely on CSS variables for the style properties (colors, padding, etc). These are documented in the widgets' css property description. Loading images # Image urls are resolved in this order: - in the session's directory - in theme's directory - in the server's remote-root directory if the option is set - as absolute paths","title":"CSS Tips"},{"location":"docs/customization/css-tips/#css-tips","text":"","title":"CSS Tips"},{"location":"docs/customization/css-tips/#browser-inspector","text":"Hit F12 to open the developers tools panel. The html/css inspector helps retrieving the class names needed to style specific parts of the widgets: hit Ctrl + Shift + C or click on the inspect icon ( ) and click on a element in the interface to reveal its html code.","title":"Browser inspector"},{"location":"docs/customization/css-tips/#inline-syntax","text":"For simple use cases, the css property can be written as a HTML inline styles (without any CSS selector). CSS rules will apply to the widget element. opacity : 0 . 5 ; /* make the widget transparent */ font-size : 120 %; /* increase font-size */","title":"Inline syntax"},{"location":"docs/customization/css-tips/#selector-syntax","text":"CSS selectors can be used to apply styles to specific elements: : host { /* style for the widget element & { } also works (deprecated) */ } . label { /* style for the .label elements */ } > . label { /* style for the direct child .label element */ } Mixing Inline and Selector syntaxes doesn't work, once you use selectors, you have to use the :host selector to target the widget element.","title":"Selector syntax"},{"location":"docs/customization/css-tips/#extra-css-classes-class","text":"This non-standard css property can be used to add custom css classes to the widget element: class: my-custom-class; Multiple classes can be added (one per class statement). Custom classes are always added to the widget's root element, css selectors are ignored. Using class names that are already used in the app can be hazardous. In order to avoid that, custom class names should be prefixed with something uncommon and preferably cool, such as xxx-myclass or crispy-seitan-myclass .","title":"Extra css classes: class"},{"location":"docs/customization/css-tips/#layering-z-index","text":"Z-Axis ordering can be set using the z-index rule. Widgets positioned at absolute coordinates (when top or left is different from auto ) have z-index:10; by default.","title":"Layering: z-index"},{"location":"docs/customization/css-tips/#responsive-sizing","text":"In most cases, using vertical , horizontal or grid layouts as well as using percentages in height and width will do. CSS calc() function can help in some cases (set the corresponding property to auto to avoid conflicts): : host { width : calc ( 100 % - 100 rem ); } Media queries can also be used: @ media screen and ( min-width : 768px ) { : host { /* style the widget if the screen is bigger than 768px */ } }","title":"Responsive sizing"},{"location":"docs/customization/css-tips/#size-units","text":"use rem instead of px ( px values will not scale when zooming), except for media queries use % for font-size","title":"Size units"},{"location":"docs/customization/css-tips/#css-variables","text":"CSS variables declared in the default theme can be overridden. Widgets also rely on CSS variables for the style properties (colors, padding, etc). These are documented in the widgets' css property description.","title":"CSS variables"},{"location":"docs/customization/css-tips/#loading-images","text":"Image urls are resolved in this order: - in the session's directory - in theme's directory - in the server's remote-root directory if the option is set - as absolute paths","title":"Loading images"},{"location":"docs/customization/themes/","text":"Built-in themes # Themes can be loaded with the --theme option. Multiple themes can be combined. Built-in themes can be loaded using their name, custom theme files can be loaded using their path. Available themes (full color scheme): nord : arctic color palette ( https://www.nordtheme.com/ ) orange : grey and orange theme Creating a custom theme # Creating a custom theme is as simple as writing a tiny css file that will override the default css variables defined in default.scss : : root { --color-accent : red ; } This will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example : . panel-container { --color-accent : blue ; } This will change the default accent color to blue for all elements in panel widgets. Autoreload # Theme files are reloaded automatically when they are modified. SCSS # If you want to use the SCSS syntax to write your theme, follow the Running from sources instructions, create a .scss file in src/scss/themes/ and run npm run watch-css . The theme will be watched and compiled automatically to a css file located in app/assets/themes/ (css files in this directory can be selected from the theme option by their name, without .css suffix).","title":"Themes"},{"location":"docs/customization/themes/#built-in-themes","text":"Themes can be loaded with the --theme option. Multiple themes can be combined. Built-in themes can be loaded using their name, custom theme files can be loaded using their path. Available themes (full color scheme): nord : arctic color palette ( https://www.nordtheme.com/ ) orange : grey and orange theme","title":"Built-in themes"},{"location":"docs/customization/themes/#creating-a-custom-theme","text":"Creating a custom theme is as simple as writing a tiny css file that will override the default css variables defined in default.scss : : root { --color-accent : red ; } This will change the default accent color to red. Variables can also be overridden for a specific subset of elements, for example : . panel-container { --color-accent : blue ; } This will change the default accent color to blue for all elements in panel widgets.","title":"Creating a custom theme"},{"location":"docs/customization/themes/#autoreload","text":"Theme files are reloaded automatically when they are modified.","title":"Autoreload"},{"location":"docs/customization/themes/#scss","text":"If you want to use the SCSS syntax to write your theme, follow the Running from sources instructions, create a .scss file in src/scss/themes/ and run npm run watch-css . The theme will be watched and compiled automatically to a css file located in app/assets/themes/ (css files in this directory can be selected from the theme option by their name, without .css suffix).","title":"SCSS"},{"location":"docs/getting-started/introduction/","text":"Welcome to Open Stage Control documentation. Along these pages you'll learn how to setup OSC on your system and everything you need to start building your own control interface. Still using v0 ? The documentation for this version is available here . Overview # Open Stage Control consists of 3 modules: the server, the launcher and the client. The server is the core of the software, it is responsible for sending and receiving all osc/midi messages, and act as a web server that serves the clients web application. It is written in Javascript and runs with Electron, a cross-platform framework based on Chromium. By default, the server always opens a client window when it starts but it can be run in headless mode, without any window. The launcher provides a simple way to configure and start the server. It appears whenever the server is not launched from a terminal or without being configured. The client is the web application made available by the server when it starts. Any compatible browser that connects to the server by browsing to its address will create a new client instance and be able to open and modify sessions. Requirements # The server can run on all platforms supported by Electron . Systems that can run Node.js may also be able to run it in headless mode (see Running with Node ). The client is compatible with the following browsers: Firefox: version 75 Chromium / Chrome: version 60 iOS devices must be of version 10.3 or higher. Installation # Linux 64bit Ubuntu / Debian Download open-stage-control-VERSION-amd64.deb Install it by running this as root in a terminal: dpkg -i path/to/open-stage-control-VERSION-ARCH.deb Other linux distributions Download open-stage-control-VERSION-linux-x64.zip Extract it in the location of your choice The file inside it named open-stage-control is the app's main executable Mac 64bit Download open-stage-control-VERSION-osx.zip Extract it in the location of your choice Drag open-stage-control.app in your Application folder Windows 64bit Download open-stage-control-VERSION-win32-x64.zip Extract it in the location of your choice The file inside it named open-stage-control.exe is the app's main executable Other systems Install Node.js Download open-stage-control-VERSION-node.zip Extract it in the location of your choice In a terminal, run node /path/to/open-stage-control-VERSION-node --help","title":"Introduction"},{"location":"docs/getting-started/introduction/#overview","text":"Open Stage Control consists of 3 modules: the server, the launcher and the client. The server is the core of the software, it is responsible for sending and receiving all osc/midi messages, and act as a web server that serves the clients web application. It is written in Javascript and runs with Electron, a cross-platform framework based on Chromium. By default, the server always opens a client window when it starts but it can be run in headless mode, without any window. The launcher provides a simple way to configure and start the server. It appears whenever the server is not launched from a terminal or without being configured. The client is the web application made available by the server when it starts. Any compatible browser that connects to the server by browsing to its address will create a new client instance and be able to open and modify sessions.","title":"Overview"},{"location":"docs/getting-started/introduction/#requirements","text":"The server can run on all platforms supported by Electron . Systems that can run Node.js may also be able to run it in headless mode (see Running with Node ). The client is compatible with the following browsers: Firefox: version 75 Chromium / Chrome: version 60 iOS devices must be of version 10.3 or higher.","title":"Requirements"},{"location":"docs/getting-started/introduction/#installation","text":"Linux 64bit Ubuntu / Debian Download open-stage-control-VERSION-amd64.deb Install it by running this as root in a terminal: dpkg -i path/to/open-stage-control-VERSION-ARCH.deb Other linux distributions Download open-stage-control-VERSION-linux-x64.zip Extract it in the location of your choice The file inside it named open-stage-control is the app's main executable Mac 64bit Download open-stage-control-VERSION-osx.zip Extract it in the location of your choice Drag open-stage-control.app in your Application folder Windows 64bit Download open-stage-control-VERSION-win32-x64.zip Extract it in the location of your choice The file inside it named open-stage-control.exe is the app's main executable Other systems Install Node.js Download open-stage-control-VERSION-node.zip Extract it in the location of your choice In a terminal, run node /path/to/open-stage-control-VERSION-node --help","title":"Installation"},{"location":"docs/getting-started/running-from-sources/","text":"Running the app from the sources slightly differs from using prebuilt binaries: we'll build and launch the app with npm (node package manager). Requirements # Node.js (v16) git Run from sources # Download git clone https://github.com/jean-emmanuel/open-stage-control cd open-stage-control/ # uncomment next line if you want the latest release # instead of the current development version # git checkout $(git describe --tags `git rev-list --tags --max-count=1`) npm install npm run build Raspberry systems Run one of these instead of npm install (you can get the system's arch by running uname -m in a terminal) npm install --arch=arm64 npm install --arch=armv7l Updating from sources git pull npm install npm run build Run npm start [ -- options ] A double hyphen ( -- ) is used here to tell npm that the options are to be passed to the app. MIDI support When running from sources, MIDI support won't be enabled unless the MIDI configuration procedure for \"other systems\" is followed. Build documentation # In order to make the local documentation available through the server's --docs option and the launcher's Documentation menu action, an extra step is needed. # install docs website theme python3 -m pip install mkdocs-material # build docs website npm run build-docs Package from sources # Follow the \"Run from sources\" instructions, then: # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x) export PLATFORM = TARGET_PLATFORM # TARGET_ARCH can be ia32, x64, armv7l or arm64 export ARCH = TARGET_ARCH npm run package # The node-only package can be built with npm run package-node This will build the app in dist/open-stage-control-PLATFORM-ARCH . Building the app for windows from a linux system requires wine to be installed. Debian/Ubuntu installer # npm run deb64","title":"Running from sources"},{"location":"docs/getting-started/running-from-sources/#requirements","text":"Node.js (v16) git","title":"Requirements"},{"location":"docs/getting-started/running-from-sources/#run-from-sources","text":"Download git clone https://github.com/jean-emmanuel/open-stage-control cd open-stage-control/ # uncomment next line if you want the latest release # instead of the current development version # git checkout $(git describe --tags `git rev-list --tags --max-count=1`) npm install npm run build Raspberry systems Run one of these instead of npm install (you can get the system's arch by running uname -m in a terminal) npm install --arch=arm64 npm install --arch=armv7l Updating from sources git pull npm install npm run build Run npm start [ -- options ] A double hyphen ( -- ) is used here to tell npm that the options are to be passed to the app. MIDI support When running from sources, MIDI support won't be enabled unless the MIDI configuration procedure for \"other systems\" is followed.","title":"Run from sources"},{"location":"docs/getting-started/running-from-sources/#build-documentation","text":"In order to make the local documentation available through the server's --docs option and the launcher's Documentation menu action, an extra step is needed. # install docs website theme python3 -m pip install mkdocs-material # build docs website npm run build-docs","title":"Build documentation"},{"location":"docs/getting-started/running-from-sources/#package-from-sources","text":"Follow the \"Run from sources\" instructions, then: # TARGET_PLATFORM can be linux, win32 (windows) or darwin (os x) export PLATFORM = TARGET_PLATFORM # TARGET_ARCH can be ia32, x64, armv7l or arm64 export ARCH = TARGET_ARCH npm run package # The node-only package can be built with npm run package-node This will build the app in dist/open-stage-control-PLATFORM-ARCH . Building the app for windows from a linux system requires wine to be installed.","title":"Package from sources"},{"location":"docs/getting-started/running-from-sources/#debianubuntu-installer","text":"npm run deb64","title":"Debian/Ubuntu installer"},{"location":"docs/getting-started/running-with-node/","text":"Lite headless mode # It's possible to run the server in headless mode with the nodejs engine embedded in Electron, this reduces memory / cpu usage significantly. ELECTRON_RUN_AS_NODE=1 open-stage-control path/to/open-stage-control/resources/app/ [options] Running with node # If Electron does not run on your platform, it is possible to run the server in headless mode using Node.js . Install Node.js Download open-stage-control-[version]-node.zip package and extract it Run node /path/to/open-stage-control [options] Info When running from sources or with regular binaries (packaged with electron), the command slightly differs: electron package: node /path/to/open-stage-control/resources/app [options] from sources: node /path/to/open-stage-control/app [options]","title":"Running with node"},{"location":"docs/getting-started/running-with-node/#lite-headless-mode","text":"It's possible to run the server in headless mode with the nodejs engine embedded in Electron, this reduces memory / cpu usage significantly. ELECTRON_RUN_AS_NODE=1 open-stage-control path/to/open-stage-control/resources/app/ [options]","title":"Lite headless mode"},{"location":"docs/getting-started/running-with-node/#running-with-node","text":"If Electron does not run on your platform, it is possible to run the server in headless mode using Node.js . Install Node.js Download open-stage-control-[version]-node.zip package and extract it Run node /path/to/open-stage-control [options] Info When running from sources or with regular binaries (packaged with electron), the command slightly differs: electron package: node /path/to/open-stage-control/resources/app [options] from sources: node /path/to/open-stage-control/app [options]","title":"Running with node"},{"location":"docs/getting-started/server-configuration/","text":"The server can be configured with many options, either from a terminal or with the help of the launcher . Options # send # Defines the default osc/midi targets. These will be added to the widget's individual targets. Targets must be separated by a space and formatted as follows: ip_address:port host_name:port midi:device_name load # Path to a session file (.json). All clients connecting the server will load it. state # Path to a state file (.state). All clients connecting the server will load it. custom-module # Path to a custom module file (.js). WARNING: custom module can access the file system, use at your own risk. port # HTTP port for the server (default: 8080 ). osc-port # OSC (UDP) input port (default: port ). tcp-port # OSC (TCP) input port. tcp-targets # TCP servers to connect to. When sending osc messages, if the target matches one of these, TCP protocol will be used instead of UDP. Targets must be separated by a space and formatted as follows: ip_address:port host_name:port midi # MIDI options separated by spaces, MIDI support must be enabled, see MIDI configuration . debug # Print sent and received messages in the console. This may impact performance and should not be enabled in production. no-gui # Disable built-in client window. fullscreen # Start the built-in client window in fullscreen. theme # Theme names or paths. See Themes . client-options # Default client options , separated by spaces. disable-vsync # Disable built-in client window's vertical synchronization. force-gpu # Disable built-in client window's gpu blacklist (may improve rendering performance in some cases). read-only # Disable session editing, and file saving. remote-saving # Disable file saving for hosts that don't match the regular expression. Sessions are saved and opened on the server's filesystem. It is possible to limit this feature to specific client with a regular expression. For example, \"127.0.0.1|192.168.0.10\" disables remote saving except for clients with ip addresses 127.0.0.1 (the server's local address) and 192.168.0.10 . remote-root # Set file browsing root folder. Prevent writing files outside of this folder. authentication # Restrict access to user:password (remote clients will be prompted for these credentials). instance-name # Server's name on zeroconf/bonjour network. Incremented automatically if not available. use-ssl # Use HTTPS protocol instead of HTTP (a self-signed certificate will be created) Command-line options # The following options can only be set from a terminal. disable-gpu # Disable hardware acceleration for the launcher window and the built-in client window. inspect # Enable node inspector. cache-dir # Override default cache directory (contains browser cache and localStorage data). config-file # Override default config file location (contains session history and launcher config). Defaults to cache-dir/config.json . help # Show help. docs # Serve documentation website locally and open it with the system's default browser version # Show version number. Running in a terminal # Options name must be prepended with a double dash ( -- ) in a terminal. Example open-stage-control --no-gui --load path/to/your/session.json --theme path/to/your/theme.css Launches the server in headless mode, and makes all clients load provided session and theme automatically. Running in a terminal on Windows # Windows users launching the app from a terminal need to add a double dash ( -- ) and a space before their options: open-stage-control.exe -- --port 5555 [ ... ] # when running from sources npm start -- -- [ options ]","title":"Server configuration"},{"location":"docs/getting-started/server-configuration/#options","text":"","title":"Options"},{"location":"docs/getting-started/server-configuration/#send","text":"Defines the default osc/midi targets. These will be added to the widget's individual targets. Targets must be separated by a space and formatted as follows: ip_address:port host_name:port midi:device_name","title":"send"},{"location":"docs/getting-started/server-configuration/#load","text":"Path to a session file (.json). All clients connecting the server will load it.","title":"load"},{"location":"docs/getting-started/server-configuration/#state","text":"Path to a state file (.state). All clients connecting the server will load it.","title":"state"},{"location":"docs/getting-started/server-configuration/#custom-module","text":"Path to a custom module file (.js). WARNING: custom module can access the file system, use at your own risk.","title":"custom-module"},{"location":"docs/getting-started/server-configuration/#port","text":"HTTP port for the server (default: 8080 ).","title":"port"},{"location":"docs/getting-started/server-configuration/#osc-port","text":"OSC (UDP) input port (default: port ).","title":"osc-port"},{"location":"docs/getting-started/server-configuration/#tcp-port","text":"OSC (TCP) input port.","title":"tcp-port"},{"location":"docs/getting-started/server-configuration/#tcp-targets","text":"TCP servers to connect to. When sending osc messages, if the target matches one of these, TCP protocol will be used instead of UDP. Targets must be separated by a space and formatted as follows: ip_address:port host_name:port","title":"tcp-targets"},{"location":"docs/getting-started/server-configuration/#midi","text":"MIDI options separated by spaces, MIDI support must be enabled, see MIDI configuration .","title":"midi"},{"location":"docs/getting-started/server-configuration/#debug","text":"Print sent and received messages in the console. This may impact performance and should not be enabled in production.","title":"debug"},{"location":"docs/getting-started/server-configuration/#no-gui","text":"Disable built-in client window.","title":"no-gui"},{"location":"docs/getting-started/server-configuration/#fullscreen","text":"Start the built-in client window in fullscreen.","title":"fullscreen"},{"location":"docs/getting-started/server-configuration/#theme","text":"Theme names or paths. See Themes .","title":"theme"},{"location":"docs/getting-started/server-configuration/#client-options","text":"Default client options , separated by spaces.","title":"client-options"},{"location":"docs/getting-started/server-configuration/#disable-vsync","text":"Disable built-in client window's vertical synchronization.","title":"disable-vsync"},{"location":"docs/getting-started/server-configuration/#force-gpu","text":"Disable built-in client window's gpu blacklist (may improve rendering performance in some cases).","title":"force-gpu"},{"location":"docs/getting-started/server-configuration/#read-only","text":"Disable session editing, and file saving.","title":"read-only"},{"location":"docs/getting-started/server-configuration/#remote-saving","text":"Disable file saving for hosts that don't match the regular expression. Sessions are saved and opened on the server's filesystem. It is possible to limit this feature to specific client with a regular expression. For example, \"127.0.0.1|192.168.0.10\" disables remote saving except for clients with ip addresses 127.0.0.1 (the server's local address) and 192.168.0.10 .","title":"remote-saving"},{"location":"docs/getting-started/server-configuration/#remote-root","text":"Set file browsing root folder. Prevent writing files outside of this folder.","title":"remote-root"},{"location":"docs/getting-started/server-configuration/#authentication","text":"Restrict access to user:password (remote clients will be prompted for these credentials).","title":"authentication"},{"location":"docs/getting-started/server-configuration/#instance-name","text":"Server's name on zeroconf/bonjour network. Incremented automatically if not available.","title":"instance-name"},{"location":"docs/getting-started/server-configuration/#use-ssl","text":"Use HTTPS protocol instead of HTTP (a self-signed certificate will be created)","title":"use-ssl"},{"location":"docs/getting-started/server-configuration/#command-line-options","text":"The following options can only be set from a terminal.","title":"Command-line options"},{"location":"docs/getting-started/server-configuration/#disable-gpu","text":"Disable hardware acceleration for the launcher window and the built-in client window.","title":"disable-gpu"},{"location":"docs/getting-started/server-configuration/#inspect","text":"Enable node inspector.","title":"inspect"},{"location":"docs/getting-started/server-configuration/#cache-dir","text":"Override default cache directory (contains browser cache and localStorage data).","title":"cache-dir"},{"location":"docs/getting-started/server-configuration/#config-file","text":"Override default config file location (contains session history and launcher config). Defaults to cache-dir/config.json .","title":"config-file"},{"location":"docs/getting-started/server-configuration/#help","text":"Show help.","title":"help"},{"location":"docs/getting-started/server-configuration/#docs","text":"Serve documentation website locally and open it with the system's default browser","title":"docs"},{"location":"docs/getting-started/server-configuration/#version","text":"Show version number.","title":"version"},{"location":"docs/getting-started/server-configuration/#running-in-a-terminal","text":"Options name must be prepended with a double dash ( -- ) in a terminal. Example open-stage-control --no-gui --load path/to/your/session.json --theme path/to/your/theme.css Launches the server in headless mode, and makes all clients load provided session and theme automatically.","title":"Running in a terminal"},{"location":"docs/getting-started/server-configuration/#running-in-a-terminal-on-windows","text":"Windows users launching the app from a terminal need to add a double dash ( -- ) and a space before their options: open-stage-control.exe -- --port 5555 [ ... ] # when running from sources npm start -- -- [ options ]","title":"Running in a terminal on Windows"},{"location":"docs/midi/midi-configuration/","text":"Installation # Linux / Windows / OSX Since version 1.7.0 , Open Stage Control comes bundled with built-in MIDI support if you're using the 64bit package for Linux, OSX or Windows. Other systems Enabling MIDI support on other systems or when building Open Stage Control from sources requires additional softwares to be installed on the server's system: python 3 python package python-rtmidi Linux Install python3 and python3-pip from your distribution's package repository Install python-rtmidi from a terminal by executing this command python3 -m pip install python-rtmidi --upgrade Mac Download and install Python 3 for Mac OS Open a terminal Install pip (package installer for python) by executing these commands curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py Install python-rtmidi by executing this command python -m pip install python-rtmidi --upgrade Windows Download and install Python 3 for Windows make sure to check the option \"Add Python 3.x to PATH\" Open a terminal ( Win + R ) Install pip (package installer for python) by executing these commands curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py Install python-rtmidi by executing this command python -m pip install python-rtmidi --upgrade Configuration # The server's midi option accepts the following parameters, separated by spaces. If an option contains space characters, it must be quoted. list Print the available MIDI ports to the console when the server starts. This action is also available in the launcher's menu. device_name:input,output Create a virtual MIDI device that will translate OSC messages to MIDI messages device_name is an arbitrary identifier that can be used as a target by widgets (see Widget setup ). It doesn't have to match any device's real name. input / output can be port numbers or strings (as reported by the list action). If a string is specified, the first port whose name contains the string will be used (comparison is case-insensitive). sysex Enable parsing of system exclusive messages (disabled by default). mtc Enable parsing of midi time code messages (disabled by default). active_sensing Enable parsing of midi active sensing messages (disabled by default). Active sensing messages will be received as sysex. pc_offset Send program changes with a -1 offset to match some software/hardware implementations note_off_velocity Enable receiving noteOff messages with a velocity and on a different address than noteOn messages. device_name:virtual ( Linux / Mac only ): creates a virtual midi device with one input port and one output port jack ( Linux only ): use JACK MIDI instead of ALSA. python-rtmidi must be compiled with jack support for this to work. path=/path/to/python Only use this if you know what you are doing. This option should not be set when using the official Linux / Windows / OSX packages. Indicates where to find python binary in case open stage control doesn't ( Error: spawn python3 ENOENT ). Widget setup # In order to send MIDI messages, a widget must have at least one target formatted as follows: midi:device_name (where device_name is one of the declared midi devices) Its address and preArgs properties must be set according to Open Stage Control's midi messages specification. Warning Messages received from a MIDI port only affect widgets that send to this port. Debug # Enabling the server's debug options will print some extra information (sent/received midi messages, midi setup information, etc) Example configuration # Setting the server's midi option as follows: sysex synth:1,2 daw:3,3 enables sysex support (sysex messages will not be ignored) creates a midi device \"synth\" connected with input 1 and output 2 creates a midi device \"daw\" connected with input 3 and output 3 If a widget has its target set to midi:synth , it will receive MIDI from port 1 and send MIDI to port 2.","title":"MIDI configuration"},{"location":"docs/midi/midi-configuration/#installation","text":"Linux / Windows / OSX Since version 1.7.0 , Open Stage Control comes bundled with built-in MIDI support if you're using the 64bit package for Linux, OSX or Windows. Other systems Enabling MIDI support on other systems or when building Open Stage Control from sources requires additional softwares to be installed on the server's system: python 3 python package python-rtmidi Linux Install python3 and python3-pip from your distribution's package repository Install python-rtmidi from a terminal by executing this command python3 -m pip install python-rtmidi --upgrade Mac Download and install Python 3 for Mac OS Open a terminal Install pip (package installer for python) by executing these commands curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py Install python-rtmidi by executing this command python -m pip install python-rtmidi --upgrade Windows Download and install Python 3 for Windows make sure to check the option \"Add Python 3.x to PATH\" Open a terminal ( Win + R ) Install pip (package installer for python) by executing these commands curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py Install python-rtmidi by executing this command python -m pip install python-rtmidi --upgrade","title":"Installation"},{"location":"docs/midi/midi-configuration/#configuration","text":"The server's midi option accepts the following parameters, separated by spaces. If an option contains space characters, it must be quoted. list Print the available MIDI ports to the console when the server starts. This action is also available in the launcher's menu. device_name:input,output Create a virtual MIDI device that will translate OSC messages to MIDI messages device_name is an arbitrary identifier that can be used as a target by widgets (see Widget setup ). It doesn't have to match any device's real name. input / output can be port numbers or strings (as reported by the list action). If a string is specified, the first port whose name contains the string will be used (comparison is case-insensitive). sysex Enable parsing of system exclusive messages (disabled by default). mtc Enable parsing of midi time code messages (disabled by default). active_sensing Enable parsing of midi active sensing messages (disabled by default). Active sensing messages will be received as sysex. pc_offset Send program changes with a -1 offset to match some software/hardware implementations note_off_velocity Enable receiving noteOff messages with a velocity and on a different address than noteOn messages. device_name:virtual ( Linux / Mac only ): creates a virtual midi device with one input port and one output port jack ( Linux only ): use JACK MIDI instead of ALSA. python-rtmidi must be compiled with jack support for this to work. path=/path/to/python Only use this if you know what you are doing. This option should not be set when using the official Linux / Windows / OSX packages. Indicates where to find python binary in case open stage control doesn't ( Error: spawn python3 ENOENT ).","title":"Configuration"},{"location":"docs/midi/midi-configuration/#widget-setup","text":"In order to send MIDI messages, a widget must have at least one target formatted as follows: midi:device_name (where device_name is one of the declared midi devices) Its address and preArgs properties must be set according to Open Stage Control's midi messages specification. Warning Messages received from a MIDI port only affect widgets that send to this port.","title":"Widget setup"},{"location":"docs/midi/midi-configuration/#debug","text":"Enabling the server's debug options will print some extra information (sent/received midi messages, midi setup information, etc)","title":"Debug"},{"location":"docs/midi/midi-configuration/#example-configuration","text":"Setting the server's midi option as follows: sysex synth:1,2 daw:3,3 enables sysex support (sysex messages will not be ignored) creates a midi device \"synth\" connected with input 1 and output 2 creates a midi device \"daw\" connected with input 3 and output 3 If a widget has its target set to midi:synth , it will receive MIDI from port 1 and send MIDI to port 2.","title":"Example configuration"},{"location":"docs/midi/midi-messages/","text":"Define static argument values using the preArgs option in order to complete the respective MIDI message. /note channel note velocity # NoteOn event or noteOff if velocity equals 0 . Incoming noteOff events will be received as /note with velocity 0 if note_off_velocity is not set during setup . channel : integer between 1 and 16 note : integer between 0 and 127 velocity : integer between 0 and 127 Example A push button might be configured as follows in order to send a MIDI note whose velocity is defined by the button's on/off value: address : /note preArgs : [1, 60] (for MIDI channel 1, and note 60 / C4) on : 100 (for noteOn velocity of 100 on button push) off : 0 (to send a noteOff on button release) target : midi:device_name (where device_name is one of the declared midi devices defined during setup ) /note_off channel note velocity # NoteOff event with any velocity. Incoming noteOff events will be received as /note_off if note_off_velocity is set during setup . /control channel cc value # Control change event. channel : integer between 1 and 16 cc : integer between 0 and 127 value : integer between 0 and 127 Example A fader might be configured as follows in order to send a MIDI control message (a volume control in this example): address : /control pre-args : [1, 7] (MIDI channel 1, control number 7 generally used as volume control) range : {\"min\": 0, \"max\": 127} (MIDI values are encoded in this range) target : midi:device_name /program channel program # Program change event. channel : integer between 1 and 16 program : integer between 0 and 127* Info * Some devices / softwares display the program value between 1 and 128, thus interpreting program change 0 as program change 1 and so on. Add the pc_offset parameter to the server's midi option to make Open Stage Control behave this way. /pitch channel pitch # PitchWheel event. channel : integer between 1 and 16 pitch : integer between 0 and 16383 /sysex msg # System exclusive message. msg : hexadecimal sysex data string of the form f0 ... f7 . Instead of a single hexadecimal string, arguments can be separated and defined either as hexadecimal bytes or as integers. When received, system messages are always formatted as a single hexadecimal string. /mtc timecode # MIDI time code message. timecode : hh:mm:ss:ff string. /channel_pressure channel pressure # Channel pressure event. channel : integer between 1 and 16 pressure : integer between 0 and 127 /key_pressure channel note pressure # Polyphonic key pressure event. channel : integer between 1 and 16 note : integer between 0 and 127 pressure : integer between 0 and 127","title":"MIDI messages"},{"location":"docs/midi/midi-messages/#note-channel-note-velocity","text":"NoteOn event or noteOff if velocity equals 0 . Incoming noteOff events will be received as /note with velocity 0 if note_off_velocity is not set during setup . channel : integer between 1 and 16 note : integer between 0 and 127 velocity : integer between 0 and 127 Example A push button might be configured as follows in order to send a MIDI note whose velocity is defined by the button's on/off value: address : /note preArgs : [1, 60] (for MIDI channel 1, and note 60 / C4) on : 100 (for noteOn velocity of 100 on button push) off : 0 (to send a noteOff on button release) target : midi:device_name (where device_name is one of the declared midi devices defined during setup )","title":"/note channel note velocity"},{"location":"docs/midi/midi-messages/#note_off-channel-note-velocity","text":"NoteOff event with any velocity. Incoming noteOff events will be received as /note_off if note_off_velocity is set during setup .","title":"/note_off channel note velocity"},{"location":"docs/midi/midi-messages/#control-channel-cc-value","text":"Control change event. channel : integer between 1 and 16 cc : integer between 0 and 127 value : integer between 0 and 127 Example A fader might be configured as follows in order to send a MIDI control message (a volume control in this example): address : /control pre-args : [1, 7] (MIDI channel 1, control number 7 generally used as volume control) range : {\"min\": 0, \"max\": 127} (MIDI values are encoded in this range) target : midi:device_name","title":"/control channel cc value"},{"location":"docs/midi/midi-messages/#program-channel-program","text":"Program change event. channel : integer between 1 and 16 program : integer between 0 and 127* Info * Some devices / softwares display the program value between 1 and 128, thus interpreting program change 0 as program change 1 and so on. Add the pc_offset parameter to the server's midi option to make Open Stage Control behave this way.","title":"/program channel program"},{"location":"docs/midi/midi-messages/#pitch-channel-pitch","text":"PitchWheel event. channel : integer between 1 and 16 pitch : integer between 0 and 16383","title":"/pitch channel pitch"},{"location":"docs/midi/midi-messages/#sysex-msg","text":"System exclusive message. msg : hexadecimal sysex data string of the form f0 ... f7 . Instead of a single hexadecimal string, arguments can be separated and defined either as hexadecimal bytes or as integers. When received, system messages are always formatted as a single hexadecimal string.","title":"/sysex msg"},{"location":"docs/midi/midi-messages/#mtc-timecode","text":"MIDI time code message. timecode : hh:mm:ss:ff string.","title":"/mtc timecode"},{"location":"docs/midi/midi-messages/#channel_pressure-channel-pressure","text":"Channel pressure event. channel : integer between 1 and 16 pressure : integer between 0 and 127","title":"/channel_pressure channel pressure"},{"location":"docs/midi/midi-messages/#key_pressure-channel-note-pressure","text":"Polyphonic key pressure event. channel : integer between 1 and 16 note : integer between 0 and 127 pressure : integer between 0 and 127","title":"/key_pressure channel note pressure"},{"location":"docs/user-interface/client/","text":"1. Menu # Session New session: create a new empty session and enable the editor Open: browse session files on the server Open recent: open a recent session on the server Save / Save as: save session file on the server Fragment mode: when enabled, the session will be saved as a fragment file (only the root's first child will be saved) Save backup: save a copy of current session with a incremented suffix appended to the file name Import: import a session file from the client's filesystem Export: export a session file to the client's filesystem State Store: save all widgets' state to a persistent slot (stored in the client's cache) Recall: apply state storer in the persistent slot (updated widgets may send messages) Send All: make all widgets send their current value Open: browse state files on the server Save / Save as: save state file on the server Import: import a state file from the client's filesystem Export: export a state file to the client's filesystem Editor Enable: toggle editor's state Grid: toggle grid Project tree: toggle project tree's visibility Inspector: toggle inspector's visibility Relative units (%): when enabled, newly created widgets will have their position and size set in percents. Console Enable: toggle console's state Clear console: remove logged messages from the console Virtual keyboard: (desktop only) toggle virtual keyboard (displayed only when a text input is in focus, except for code editors in the inspector) Fullscreen: toggle fullscreen Prevent sleep (mobile only): attempt to prevent device from going to sleep when idle 2. Sidepanels # The sidepanels are only visible when the editor is active, they can be resized and/or hidden. Both are described in the editor section. 3. Session # It is the main component, it contains all the widgets and takes all the available space when the sidepanels are closed. 4. Notifications # Notifications appear in the lower right corner, they are usually used to convey server status information. 5. Modals # Modals are virtual popup windows that may contain various content: file browser, color picker, error, widgets... Keyboard shortcuts # Linux Shortcut Description Ctrl + Mousewheel change global zoom (pixel scaling) Ctrl + 0 reset global zoom Ctrl + E enable/disable editor Ctrl + K show/hide console Ctrl + L clear console Ctrl + S save session Ctrl + Shift + S save session as... Ctrl + O open a session file Ctrl + W close client Windows Shortcut Description Ctrl + Mousewheel change global zoom (pixel scaling) Ctrl + 0 reset global zoom Ctrl + E enable/disable editor Ctrl + K show/hide console Ctrl + L clear console Ctrl + S save session Ctrl + Shift + S save session as... Ctrl + O open a session file Alt + F4 close client Mac Shortcut Description Cmd + Mousewheel change global zoom (pixel scaling) Cmd + 0 reset zoom Cmd + E enable/disable editor Cmd + K show/hide console Cmd + L clear console Cmd + S save session Cmd + Shift + S save session as... Cmd + O open a session file Cmd + W close client","title":"Client"},{"location":"docs/user-interface/client/#1-menu","text":"Session New session: create a new empty session and enable the editor Open: browse session files on the server Open recent: open a recent session on the server Save / Save as: save session file on the server Fragment mode: when enabled, the session will be saved as a fragment file (only the root's first child will be saved) Save backup: save a copy of current session with a incremented suffix appended to the file name Import: import a session file from the client's filesystem Export: export a session file to the client's filesystem State Store: save all widgets' state to a persistent slot (stored in the client's cache) Recall: apply state storer in the persistent slot (updated widgets may send messages) Send All: make all widgets send their current value Open: browse state files on the server Save / Save as: save state file on the server Import: import a state file from the client's filesystem Export: export a state file to the client's filesystem Editor Enable: toggle editor's state Grid: toggle grid Project tree: toggle project tree's visibility Inspector: toggle inspector's visibility Relative units (%): when enabled, newly created widgets will have their position and size set in percents. Console Enable: toggle console's state Clear console: remove logged messages from the console Virtual keyboard: (desktop only) toggle virtual keyboard (displayed only when a text input is in focus, except for code editors in the inspector) Fullscreen: toggle fullscreen Prevent sleep (mobile only): attempt to prevent device from going to sleep when idle","title":"1. Menu"},{"location":"docs/user-interface/client/#2-sidepanels","text":"The sidepanels are only visible when the editor is active, they can be resized and/or hidden. Both are described in the editor section.","title":"2. Sidepanels"},{"location":"docs/user-interface/client/#3-session","text":"It is the main component, it contains all the widgets and takes all the available space when the sidepanels are closed.","title":"3. Session"},{"location":"docs/user-interface/client/#4-notifications","text":"Notifications appear in the lower right corner, they are usually used to convey server status information.","title":"4. Notifications"},{"location":"docs/user-interface/client/#5-modals","text":"Modals are virtual popup windows that may contain various content: file browser, color picker, error, widgets...","title":"5. Modals"},{"location":"docs/user-interface/client/#keyboard-shortcuts","text":"Linux Shortcut Description Ctrl + Mousewheel change global zoom (pixel scaling) Ctrl + 0 reset global zoom Ctrl + E enable/disable editor Ctrl + K show/hide console Ctrl + L clear console Ctrl + S save session Ctrl + Shift + S save session as... Ctrl + O open a session file Ctrl + W close client Windows Shortcut Description Ctrl + Mousewheel change global zoom (pixel scaling) Ctrl + 0 reset global zoom Ctrl + E enable/disable editor Ctrl + K show/hide console Ctrl + L clear console Ctrl + S save session Ctrl + Shift + S save session as... Ctrl + O open a session file Alt + F4 close client Mac Shortcut Description Cmd + Mousewheel change global zoom (pixel scaling) Cmd + 0 reset zoom Cmd + E enable/disable editor Cmd + K show/hide console Cmd + L clear console Cmd + S save session Cmd + Shift + S save session as... Cmd + O open a session file Cmd + W close client","title":"Keyboard shortcuts"},{"location":"docs/user-interface/editor/","text":"Widget selection # Clicking on a widget, on a tab label or on an item in the project tree selects the widgets for editing: All its editable properties are shown in the inspector panel The corresponding item in the project tree is highlighted A selection outline is drawn around the widget Dragging / Resizing handles are added to the widget To interact with a widget directly without selecting it, either use the middle mouse button or hold Shift + Win ( Shift + Cmd on Mac). Menu # Right clicking on a widget displays a menu with the following actions Show in tree : show widget in project tree (hidden when clicking in the project tree) Position : Send to back : Send selected widget to back (first of siblings) Send farther : Send selected widget farther Bring closer : Bring selected widget closer Bring to front : Bring selected widget to front (last of siblings) Copy : copy widget's data Cut : copy widget's data and delete selected widget Paste : paste copied widget in selected container Paste : paste the widget as is ID + 1 : increments the id of the copied widget (and all its children) before pasting Clone : create a clone widget targetting the copied widget Add widget : create a new widget in selected container Add tab : create a new tab in selected container Export : export as fragment file Delete : delete selected tab or widget Inspector # Selected widget's properties are displayed and can be modified in the inspector. The properties reference lists the available properties for each widget type. Property fields are all multiline (press shift + enter for new line). Properties are written in JSON, with some flexibility brought by the JSON5 format. For example, double quotes around object keys are not mandatory. Clicking on a property name spawns a help modal window Properties are divided into multiple categories that can be toggled with a click. Alt + Click on a category closes the other categories before toggling selected category. Some properties (for example onValue ) have a special code editor with syntax highlighting and many keyboard shortcuts (available by clicking on the \"Help\" button). In these properties, pressing enter will not submit pending changes but instead insert a new line at the cursor position (as you would expect in a regular editor). To submit pending changes, press Ctrl + Enter (or ++cmd+enter== on Mac) or click outside the editor. Widgets can be locked for edition by enabling their lock property. When locked, a widget can't be modified by the editor but it remains possible to delete it or to move it from a container to another in the project tree. Project tree # The project tree displays the whole widget structure of the session. Widgets can be reordered or moved to another container with drag-and-drop. The \"Filter\" input allows filtering displayed widgets by their id . It's also possible to only display a single type of widget by typing type:fader for example. Invisible widgets are displayed with a lower opacity and their name in italic. Locked widgets are displayed with a lock icon after their name. Widget resizing / dragging # Selected widget can be resized using its south, south-east and east handles. It can be dragged with its north-west handle (holding Alt extends this handle to the widget's size to ease dragging). If the widget's position/size was written in percents, the editor will try to keep using percents. When the grid is enabled, widget resizing / dragging snaps to a 10 pixel wide grid. Multi-widgets editing # Multiple widgets can be edited at once. The inspector will only display properties that are shared by all selected widgets Selection can only contain sibling widgets (same direct parent) Context-menu actions and properties changes apply to all selected widgets Resizing / Dragging will affect all selected widgets, relatively the selection's size and position Keyboard shortcuts # Linux / Windows Shortcut Description Ctrl + G Toggle grid. Ctrl + T Toggle session tree. Ctrl + I Toggle inspector. Click Widget selection. Ctrl + Click Multi-widget selection. Widgets can be toggled from selection by clicking on them individually. Shift + Click + Drag Draw a selection rectangle and attempt to select widgets in it. If Ctrl is pressed too, current selection is kept and will be merged with the new one if possible. Ctrl + Z Undo Ctrl + Y Ctrl + Shift + Z Redo Del Delete selected widgets Ctrl + C Copy selected widgets Ctrl + X Cut selected widgets Ctrl + V Paste clipboard in selected widget Ctrl + Shift + V Paste and increment id Ctrl + D Duplicate selected widget Ctrl + Shift + D Duplicate selected widget and increment id Alt + C + Drag Paste selection to position Alt + C + Shift + Drag Paste selection to dragged position and increment id Ctrl + Up Ctrl + Down Ctrl + Left Ctrl + Right Move selected widgets (1 grid unit, hold Shift for 5 grid units) Alt + Up Alt + Down Alt + Left Alt + Right Resize selected widgets (1 grid unit, hold Shift for 5 grid units) Ctrl + A Select current widget's siblings and itself Ctrl + Shift + A Cancel current widget selection Up Select current widget's previous sibling Down Select current widget's next sibling Left Select current widget's parent Right Select current widget's first child T Show selected widget in the project tree Home Send selected widget to back Page Up Send selected widget farther Page Down Bring selected widget closer End Bring selected widget to front F2 Bring \"label\" property input into view if selected widget has one H Hide selection area and widget resize / drag handles while pressed Alt + Mousewheel change editor zoom Ctrl + 0 reset zoom Mac Shortcut Description Cmd + G Toggle grid. Cmd + T Toggle session tree. Cmd + I Toggle inspector. Click Widget selection. Cmd + Click Multi-widget selection. Widgets can be toggled from selection by clicking on them individually. Shift + Click + Drag Draw a selection rectangle and attempt to select widgets in it. If Cmd is pressed too, current selection is kept and will be merged with the new one if possible. Cmd + Z Undo Cmd + Y Cmd + Shift + Z Redo Backspace Delete selected widgets Cmd + C Copy selected widgets Cmd + X Cut selected widgets Cmd + V Paste clipboard in selected widget Cmd + Shift + V Paste and increment id Cmd + D Duplicate selected widget Cmd + Shift + D Duplicate selected widget and increment id Alt + C + Drag Paste selection to position Alt + C + Shift + Drag Paste selection to dragged position and increment id Cmd + Up Cmd + Down Cmd + Left Cmd + Right Move selected widgets (1 grid unit, hold Shift for 5 grid units) Alt + Up Alt + Down Alt + Left Alt + Right Resize selected widgets (1 grid unit, hold Shift for 5 grid units) Cmd + A Select current widget's siblings and itself Cmd + Shift + A Cancel current widget selection Up Select current widget's previous sibling Down Select current widget's next sibling Left Select current widget's parent Right Select current widget's first child T Show selected widget in the project tree Home Send selected widget to back Page Up Send selected widget farther Page Down Bring selected widget closer End Bring selected widget to front F2 Bring \"label\" property input into view if selected widget has one H Hide selection area and widget resize / drag handles while pressed Alt + Mousewheel change editor zoom Cmd + 0 reset zoom","title":"Editor"},{"location":"docs/user-interface/editor/#widget-selection","text":"Clicking on a widget, on a tab label or on an item in the project tree selects the widgets for editing: All its editable properties are shown in the inspector panel The corresponding item in the project tree is highlighted A selection outline is drawn around the widget Dragging / Resizing handles are added to the widget To interact with a widget directly without selecting it, either use the middle mouse button or hold Shift + Win ( Shift + Cmd on Mac).","title":"Widget selection"},{"location":"docs/user-interface/editor/#menu","text":"Right clicking on a widget displays a menu with the following actions Show in tree : show widget in project tree (hidden when clicking in the project tree) Position : Send to back : Send selected widget to back (first of siblings) Send farther : Send selected widget farther Bring closer : Bring selected widget closer Bring to front : Bring selected widget to front (last of siblings) Copy : copy widget's data Cut : copy widget's data and delete selected widget Paste : paste copied widget in selected container Paste : paste the widget as is ID + 1 : increments the id of the copied widget (and all its children) before pasting Clone : create a clone widget targetting the copied widget Add widget : create a new widget in selected container Add tab : create a new tab in selected container Export : export as fragment file Delete : delete selected tab or widget","title":"Menu"},{"location":"docs/user-interface/editor/#inspector","text":"Selected widget's properties are displayed and can be modified in the inspector. The properties reference lists the available properties for each widget type. Property fields are all multiline (press shift + enter for new line). Properties are written in JSON, with some flexibility brought by the JSON5 format. For example, double quotes around object keys are not mandatory. Clicking on a property name spawns a help modal window Properties are divided into multiple categories that can be toggled with a click. Alt + Click on a category closes the other categories before toggling selected category. Some properties (for example onValue ) have a special code editor with syntax highlighting and many keyboard shortcuts (available by clicking on the \"Help\" button). In these properties, pressing enter will not submit pending changes but instead insert a new line at the cursor position (as you would expect in a regular editor). To submit pending changes, press Ctrl + Enter (or ++cmd+enter== on Mac) or click outside the editor. Widgets can be locked for edition by enabling their lock property. When locked, a widget can't be modified by the editor but it remains possible to delete it or to move it from a container to another in the project tree.","title":"Inspector"},{"location":"docs/user-interface/editor/#project-tree","text":"The project tree displays the whole widget structure of the session. Widgets can be reordered or moved to another container with drag-and-drop. The \"Filter\" input allows filtering displayed widgets by their id . It's also possible to only display a single type of widget by typing type:fader for example. Invisible widgets are displayed with a lower opacity and their name in italic. Locked widgets are displayed with a lock icon after their name.","title":"Project tree"},{"location":"docs/user-interface/editor/#widget-resizing-dragging","text":"Selected widget can be resized using its south, south-east and east handles. It can be dragged with its north-west handle (holding Alt extends this handle to the widget's size to ease dragging). If the widget's position/size was written in percents, the editor will try to keep using percents. When the grid is enabled, widget resizing / dragging snaps to a 10 pixel wide grid.","title":"Widget resizing / dragging"},{"location":"docs/user-interface/editor/#multi-widgets-editing","text":"Multiple widgets can be edited at once. The inspector will only display properties that are shared by all selected widgets Selection can only contain sibling widgets (same direct parent) Context-menu actions and properties changes apply to all selected widgets Resizing / Dragging will affect all selected widgets, relatively the selection's size and position","title":"Multi-widgets editing"},{"location":"docs/user-interface/editor/#keyboard-shortcuts","text":"Linux / Windows Shortcut Description Ctrl + G Toggle grid. Ctrl + T Toggle session tree. Ctrl + I Toggle inspector. Click Widget selection. Ctrl + Click Multi-widget selection. Widgets can be toggled from selection by clicking on them individually. Shift + Click + Drag Draw a selection rectangle and attempt to select widgets in it. If Ctrl is pressed too, current selection is kept and will be merged with the new one if possible. Ctrl + Z Undo Ctrl + Y Ctrl + Shift + Z Redo Del Delete selected widgets Ctrl + C Copy selected widgets Ctrl + X Cut selected widgets Ctrl + V Paste clipboard in selected widget Ctrl + Shift + V Paste and increment id Ctrl + D Duplicate selected widget Ctrl + Shift + D Duplicate selected widget and increment id Alt + C + Drag Paste selection to position Alt + C + Shift + Drag Paste selection to dragged position and increment id Ctrl + Up Ctrl + Down Ctrl + Left Ctrl + Right Move selected widgets (1 grid unit, hold Shift for 5 grid units) Alt + Up Alt + Down Alt + Left Alt + Right Resize selected widgets (1 grid unit, hold Shift for 5 grid units) Ctrl + A Select current widget's siblings and itself Ctrl + Shift + A Cancel current widget selection Up Select current widget's previous sibling Down Select current widget's next sibling Left Select current widget's parent Right Select current widget's first child T Show selected widget in the project tree Home Send selected widget to back Page Up Send selected widget farther Page Down Bring selected widget closer End Bring selected widget to front F2 Bring \"label\" property input into view if selected widget has one H Hide selection area and widget resize / drag handles while pressed Alt + Mousewheel change editor zoom Ctrl + 0 reset zoom Mac Shortcut Description Cmd + G Toggle grid. Cmd + T Toggle session tree. Cmd + I Toggle inspector. Click Widget selection. Cmd + Click Multi-widget selection. Widgets can be toggled from selection by clicking on them individually. Shift + Click + Drag Draw a selection rectangle and attempt to select widgets in it. If Cmd is pressed too, current selection is kept and will be merged with the new one if possible. Cmd + Z Undo Cmd + Y Cmd + Shift + Z Redo Backspace Delete selected widgets Cmd + C Copy selected widgets Cmd + X Cut selected widgets Cmd + V Paste clipboard in selected widget Cmd + Shift + V Paste and increment id Cmd + D Duplicate selected widget Cmd + Shift + D Duplicate selected widget and increment id Alt + C + Drag Paste selection to position Alt + C + Shift + Drag Paste selection to dragged position and increment id Cmd + Up Cmd + Down Cmd + Left Cmd + Right Move selected widgets (1 grid unit, hold Shift for 5 grid units) Alt + Up Alt + Down Alt + Left Alt + Right Resize selected widgets (1 grid unit, hold Shift for 5 grid units) Cmd + A Select current widget's siblings and itself Cmd + Shift + A Cancel current widget selection Up Select current widget's previous sibling Down Select current widget's next sibling Left Select current widget's parent Right Select current widget's first child T Show selected widget in the project tree Home Send selected widget to back Page Up Send selected widget farther Page Down Bring selected widget closer End Bring selected widget to front F2 Bring \"label\" property input into view if selected widget has one H Hide selection area and widget resize / drag handles while pressed Alt + Mousewheel change editor zoom Cmd + 0 reset zoom","title":"Keyboard shortcuts"},{"location":"docs/user-interface/launcher/","text":"1. Menu # Start: start the server (hidden when started) Stop: stop the server (hidden when stopped) New window: open a new client window (hidden when stopped) Load: load server configuration from file Save / Save as: save server configuration to file List MIDI devices: list available MIDI devices in the console Console: Clear: clear console Autoscroll: enable/disable console autoscroll Check for update at startup: enable/disable this feature Autostart: start the server automatically when launcher is started Always on top: pin the launcher window above other the windows The \"play/stop\" icon can be used to start and stop the server without opening the menu. 2. Configuration form # Each server option is displayed here. When clicking on an option's label, a short help will be printed in the console. When an option is not correctly set, its label will turn to orange and an error message will be printed in the console. 3. Console # The console displays various information, runtime errors and server debug messages. Keyboard shortcuts # Linux Shortcut Description F5 start server F6 stop server Ctrl + N open new client window Ctrl + O load settings Ctrl + S save settings Ctrl + Shift + S save settings as... Ctrl + M list midi devices Ctrl + L clear console Ctrl + W close window Windows Shortcut Description F5 start server F6 stop server Ctrl + N open new client window Ctrl + O load settings Ctrl + S save settings Ctrl + Shift + S save settings as... Ctrl + M list midi devices Ctrl + L clear console Alt + F4 close window Mac Shortcut Description F5 start server F6 stop server Cmd + N open new client window Cmd + O load settings Cmd + S save settings Cmd + Shift + S save settings as... Cmd + M list midi devices Cmd + L clear console Cmd + W close window Cmd + Q quit app","title":"Launcher"},{"location":"docs/user-interface/launcher/#1-menu","text":"Start: start the server (hidden when started) Stop: stop the server (hidden when stopped) New window: open a new client window (hidden when stopped) Load: load server configuration from file Save / Save as: save server configuration to file List MIDI devices: list available MIDI devices in the console Console: Clear: clear console Autoscroll: enable/disable console autoscroll Check for update at startup: enable/disable this feature Autostart: start the server automatically when launcher is started Always on top: pin the launcher window above other the windows The \"play/stop\" icon can be used to start and stop the server without opening the menu.","title":"1. Menu"},{"location":"docs/user-interface/launcher/#2-configuration-form","text":"Each server option is displayed here. When clicking on an option's label, a short help will be printed in the console. When an option is not correctly set, its label will turn to orange and an error message will be printed in the console.","title":"2. Configuration form"},{"location":"docs/user-interface/launcher/#3-console","text":"The console displays various information, runtime errors and server debug messages.","title":"3. Console"},{"location":"docs/user-interface/launcher/#keyboard-shortcuts","text":"Linux Shortcut Description F5 start server F6 stop server Ctrl + N open new client window Ctrl + O load settings Ctrl + S save settings Ctrl + Shift + S save settings as... Ctrl + M list midi devices Ctrl + L clear console Ctrl + W close window Windows Shortcut Description F5 start server F6 stop server Ctrl + N open new client window Ctrl + O load settings Ctrl + S save settings Ctrl + Shift + S save settings as... Ctrl + M list midi devices Ctrl + L clear console Alt + F4 close window Mac Shortcut Description F5 start server F6 stop server Cmd + N open new client window Cmd + O load settings Cmd + S save settings Cmd + Shift + S save settings as... Cmd + M list midi devices Cmd + L clear console Cmd + W close window Cmd + Q quit app","title":"Keyboard shortcuts"},{"location":"docs/widgets/advanced-syntaxes/","text":"Advanced syntaxes # Advanced syntaxes are special blocks of code that can be written in the widgets properties to customize the widgets and how they behave. These blocks end up replaced with the value they hold before the widgets evaluate the properties they're in. Inheritance: @{id.property} # The inheritance syntax returns either a widget's value or one of its properties. When using this syntax, value or property changes will be applied automatically. id : target widget's id . A widget can fetch its own properties or its direct parent's by using the keywords this or parent instead of id . When this or parent can be used, using the target widget's id instead won't work. property : target widget's property name. If omitted (along with the dot), the widget's value will be returned ( @{widgetId} is the same as @{widgetId.value} ). value always resolves to the target widget's current value, not its value property. Unique identifier Each widget has a unique random identifier that can be retrieved with the property name uuid (e.g. @{this.uuid} , @{parent.uuid} ). Dynamic properties # Some properties, when changed, trigger a complete widget recreation that ends any ongoing user interaction. Also, updating these properties continuously (e.g. when linked to a slider's dynamic value) can be very cpu expensive. Some properties have much cheaper update routines and can be considered as dynamic , as in performance safe. These properties are marked in the documentation with a . Circular references cases # container widgets can inherit their children's properties only to define dynamic properties widgets can inherit their own value property only to define dynamic properties Object properties # If the retrieved property is an object ( {} ), a subset can be retrieved directly by appending a dot and a key (array index or object key) : @{parent.variables.key} Nesting # The inheritance syntax supports 1-level nesting for defining the target widget's id dynamically : @{fader_@{toggle_1}} OSC listeners: OSC{address, default, usePreArgs} # The OSC listener syntax returns the value received on specified address (or the default value if none has been received yet). address : osc address to listen to; if the leading slash ( / ) is omitted, the address will be prefixed with the widget's address property default (optional): default value returned before any message is received. Must be a primitive value, not an object or an array. usePreArgs (optional): by default, osc listeners inherit the widget's preArgs (these must be matched for the osc messages to be processed). Set to false bypass them. Options can contain @{} blocks. Receiving MIDI Midi messages will be processed only if the receiver's widget includes the emitting MIDI device in its targets. Array/Object default value JS { return OSC { address } || { \"key a\" : 1 , \"key b\" , 2 } } Custom variables: VAR{variableName, default} # This syntax creates a custom variable in the widget that can be read and modified from any widget's script property (see scripting ). Changes made to this variable using setVar() in scripts will be applied automatically where VAR{} is used.` File imports: IMPORT{file_name} # This allows loading the content of an external file in a property. If used in a JS{} of #{} block, it will be seen as a string variable containing the raw content of the file. Changes made to the file be applied automatically. File paths are resolved in this order: - in the session's directory - in theme's directory - in the server's remote-root directory if the option is set - as absolute paths Warning Fragments and session files already loaded with fragment widgets should not be imported using this syntax. Javascript: JS{ <code> } # This syntax allows defining a property using Javascript . The code will be compiled as a function and executed in a restricted context. if no return statement is found, the formula will return an empty string javascript strict mode is always enabled setTimeout and setInterval functions are not available A property cannot contain multiple JS{} blocks Available variables # console : javascript console locals : object for storing/reading arbitrary values. Changing its properties does not trigger any synchronisation even if the value is used somewhere else. globals : same as locals but shared between all widgets, contains a few useful variables: screen : client screen informations ( {width, height, orientation} ) env : client options (ie: url query options), ip : client's ip address, url : server url, platform : operating system as seen by the client session : session file path clipboard : instance of navigator Clipboard Parsing errors can be read in the console ( Ctrl + K ). Warning Modifying values in locals or globals does not trigger anything if they are used somewhere else. Using in advanced syntaxes # In this context, @{} , VAR{} and OSC{} syntaxes are seen as variables. When they change, the whole block will be evaluated again. Do not mutate When these syntaxes return objects or arrays, mutating said objects will affect the underlying variables in memory and may lead to unexpected behavior. The @{} syntax, when used for anything else than the widget's value, will always return a copy of the property and is not affected by this. Javascript: #{ <code> } # This is a shorthand for the JS{} syntax, the only difference being that <code> is automatically prepended with a return statement. A property can contain multiple #{} blocks. Compilation order #{} blocks are compiled after JS{} blocks","title":"Advanced syntaxes"},{"location":"docs/widgets/advanced-syntaxes/#advanced-syntaxes","text":"Advanced syntaxes are special blocks of code that can be written in the widgets properties to customize the widgets and how they behave. These blocks end up replaced with the value they hold before the widgets evaluate the properties they're in.","title":"Advanced syntaxes"},{"location":"docs/widgets/advanced-syntaxes/#inheritance-idproperty","text":"The inheritance syntax returns either a widget's value or one of its properties. When using this syntax, value or property changes will be applied automatically. id : target widget's id . A widget can fetch its own properties or its direct parent's by using the keywords this or parent instead of id . When this or parent can be used, using the target widget's id instead won't work. property : target widget's property name. If omitted (along with the dot), the widget's value will be returned ( @{widgetId} is the same as @{widgetId.value} ). value always resolves to the target widget's current value, not its value property. Unique identifier Each widget has a unique random identifier that can be retrieved with the property name uuid (e.g. @{this.uuid} , @{parent.uuid} ).","title":"Inheritance: @{id.property}"},{"location":"docs/widgets/advanced-syntaxes/#dynamic-properties","text":"Some properties, when changed, trigger a complete widget recreation that ends any ongoing user interaction. Also, updating these properties continuously (e.g. when linked to a slider's dynamic value) can be very cpu expensive. Some properties have much cheaper update routines and can be considered as dynamic , as in performance safe. These properties are marked in the documentation with a .","title":"Dynamic properties"},{"location":"docs/widgets/advanced-syntaxes/#circular-references-cases","text":"container widgets can inherit their children's properties only to define dynamic properties widgets can inherit their own value property only to define dynamic properties","title":"Circular references cases"},{"location":"docs/widgets/advanced-syntaxes/#object-properties","text":"If the retrieved property is an object ( {} ), a subset can be retrieved directly by appending a dot and a key (array index or object key) : @{parent.variables.key}","title":"Object properties"},{"location":"docs/widgets/advanced-syntaxes/#nesting","text":"The inheritance syntax supports 1-level nesting for defining the target widget's id dynamically : @{fader_@{toggle_1}}","title":"Nesting"},{"location":"docs/widgets/advanced-syntaxes/#osc-listeners-oscaddress-default-usepreargs","text":"The OSC listener syntax returns the value received on specified address (or the default value if none has been received yet). address : osc address to listen to; if the leading slash ( / ) is omitted, the address will be prefixed with the widget's address property default (optional): default value returned before any message is received. Must be a primitive value, not an object or an array. usePreArgs (optional): by default, osc listeners inherit the widget's preArgs (these must be matched for the osc messages to be processed). Set to false bypass them. Options can contain @{} blocks. Receiving MIDI Midi messages will be processed only if the receiver's widget includes the emitting MIDI device in its targets. Array/Object default value JS { return OSC { address } || { \"key a\" : 1 , \"key b\" , 2 } }","title":"OSC listeners: OSC{address, default, usePreArgs}"},{"location":"docs/widgets/advanced-syntaxes/#custom-variables-varvariablename-default","text":"This syntax creates a custom variable in the widget that can be read and modified from any widget's script property (see scripting ). Changes made to this variable using setVar() in scripts will be applied automatically where VAR{} is used.`","title":"Custom variables: VAR{variableName, default}"},{"location":"docs/widgets/advanced-syntaxes/#file-imports-importfile_name","text":"This allows loading the content of an external file in a property. If used in a JS{} of #{} block, it will be seen as a string variable containing the raw content of the file. Changes made to the file be applied automatically. File paths are resolved in this order: - in the session's directory - in theme's directory - in the server's remote-root directory if the option is set - as absolute paths Warning Fragments and session files already loaded with fragment widgets should not be imported using this syntax.","title":"File imports: IMPORT{file_name}"},{"location":"docs/widgets/advanced-syntaxes/#javascript-js-code","text":"This syntax allows defining a property using Javascript . The code will be compiled as a function and executed in a restricted context. if no return statement is found, the formula will return an empty string javascript strict mode is always enabled setTimeout and setInterval functions are not available A property cannot contain multiple JS{} blocks","title":"Javascript: JS{ &lt;code&gt; }"},{"location":"docs/widgets/advanced-syntaxes/#available-variables","text":"console : javascript console locals : object for storing/reading arbitrary values. Changing its properties does not trigger any synchronisation even if the value is used somewhere else. globals : same as locals but shared between all widgets, contains a few useful variables: screen : client screen informations ( {width, height, orientation} ) env : client options (ie: url query options), ip : client's ip address, url : server url, platform : operating system as seen by the client session : session file path clipboard : instance of navigator Clipboard Parsing errors can be read in the console ( Ctrl + K ). Warning Modifying values in locals or globals does not trigger anything if they are used somewhere else.","title":"Available variables"},{"location":"docs/widgets/advanced-syntaxes/#using-in-advanced-syntaxes","text":"In this context, @{} , VAR{} and OSC{} syntaxes are seen as variables. When they change, the whole block will be evaluated again. Do not mutate When these syntaxes return objects or arrays, mutating said objects will affect the underlying variables in memory and may lead to unexpected behavior. The @{} syntax, when used for anything else than the widget's value, will always return a copy of the property and is not affected by this.","title":"Using in advanced syntaxes"},{"location":"docs/widgets/advanced-syntaxes/#javascript-code","text":"This is a shorthand for the JS{} syntax, the only difference being that <code> is automatically prepended with a return statement. A property can contain multiple #{} blocks. Compilation order #{} blocks are compiled after JS{} blocks","title":"Javascript: #{ &lt;code&gt; }"},{"location":"docs/widgets/canvas/","text":"Canvas widget # The canvas widget allows creating custom widgets with user-defined drawings and touch reactions. It has two special properties, touch and draw , that work like the script property : they are used to defined scripts that will be executed when specific events occurs. This widget requires a good understanding of the javascript Canvas API and of the javascript programming language in general. Canvas properties # valueLength # This property must be set to the number of values held by the widget : 1 for a simple slider, 2 for an XY pad, etc. Attempts to set the widget's value with a different number of values will be ignored. set ( \"this\" , 1 ) // works if valueLength == 1 set ( \"this\" , [ 1 , 2 ]) // works if valueLength == 2 autoClear # This is a convenience option that clears the canvas context and calls beginPath before each drawing. When this property is set to false , the canvas must be cleared manually. continuous # If this property is enabled, the widget will be redrawn at a fixed rate even if not interacted with (see onDraw ). onTouch # This script is executed when the widget is touched, when it is released, and during the movement of the pointer while the widget is touched. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value width : canvas width in pixels height : canvas height in pixels event : object containing the following: type : \"start\" , \"move\" or \"stop\" target : id of the widget under the pointer, \"this\" if it's the canvas widget itself, null if no widget is under the pointer targetName : name attribute of the html element under the pointer targetTagName : tag name of the html element under the pointer offsetX , offsetY : touch coordinates in pixels, relative to the html element under the pointer movementX , movementY : movement of the pointer in pixels since the last event pointerId : unique identifier used to differentiate fingers in multitouch situation altKey , ctrlKey , shiftKey : keyboard modifier states force : amount of pressure applied to the touch surface between 0 and 1 (see Touch.force ). Equals 0 if the API is not supported or if no pressure information is found. radiusX , radiusY , rotationAngle : see Touch.rotationAngle (iOS only) altitudeAngle , azimuthAngle : see Touch.altitudeAngle (iOS only) touchType : \"direct\" or \"stylus\" Extra html elements Elements added using the html property can be touched as well, event.targetName can be used to determine which element is touched. onDraw # This script is executed when the widget should be redrawn, which is when it's touched and when it receives a value. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value width : canvas width in pixels height : canvas height in pixels ctx : canvas rendering context of the widget cssVars : object containing the computed value of some of the widget's style properties such as colorWidget , alphaFill , padding , etc onResize # This script is executed when the widget has resized, before it is redrawn. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value width : canvas width in pixels height : canvas height in pixels cssVars : object containing the computed value of some of the widget's style properties such as colorWidget , alphaFill , padding , etc Example: XY pad # Let's create a simple xy pad, with a value made of two numbers between 0 and 1. We set valueLength to 2 to make sure the widget only accepts incoming messages with two values (x and y). First, we use the onTouch property to store the touch coordinates in the locals object. We also call set() to store these in the widget's value (this way, the widget can send messages and sync with other widgets). // onTouch // store normalized coordinates if ( event . type == \"start\" ) { locals . x = event . offsetX / width locals . y = event . offsetY / height } else { // when the pointer is moving, increment coordinates // because offsetX and offsetY may not be relevant // if the pointer hovers a different widgets locals . x += event . movementX / width locals . y += event . movementY / height } // update widget value and send set ( \"this\" , [ locals . x , locals . y ]) Then, we use the onDraw property to draw a circle at the touch coordinates. // onDraw // draw circle at touch coordinates ctx . arc ( value [ 0 ] * width , value [ 1 ] * height , 6 , 0 , Math . PI * 2 ) // use colorFill property as stroke color ctx . strokeStyle = cssVars . colorFill // draw stroke ctx . stroke () Finally, we use the onValue property to apply limits to the values. // onValue // apply limits var x = Math . max ( 0 , Math . min ( 1 , value [ 0 ])), y = Math . max ( 0 , Math . min ( 1 , value [ 1 ])) // re-update widget value without retriggering script or sending message set ( \"this\" , [ x , y ], { sync : false , send : false }) // the widget will automatically send its value if // this script was triggered by a user interaction // no need to call send() here but we could, for example // if we want to split the value in to multiple messages Example: multi slider # Let's build a row of 20-sliders with a single widget. We first set valueLength to... 20 ! // onTouch // store normalized coordinates if ( event . type == \"start\" ) { locals . x = event . offsetX / width locals . y = event . offsetY / height } else { // when the pointer is moving, increment coordinates // because offsetX and offsetY may not be relevant // if the pointer hovers a different widgets locals . x += event . movementX / width locals . y += event . movementY / height } // which slider are we touching ? var n = parseInt ( locals . x * value . length ) n = Math . max ( 0 , Math . min ( n , value . length - 1 )) // update value at slider's index // 1 - locals.y because y axis is from top to bottom in js canvas value [ n ] = 1 - locals . y // update widget value and send set ( \"this\" , value ) // onDraw ctx . fillStyle = cssVars . colorFill ctx . globalAlpha = cssVars . alphaFillOn var sliderWidth = width / value . length - 1 for ( var i in value ){ ctx . beginPath () ctx . rect ( i * width / value . length , height , sliderWidth , - value [ i ] * height ) ctx . fill () } // onValue // apply limits for ( var i in value ) { value [ i ] = Math . max ( 0 , Math . min ( 1 , value [ i ])) } // re-update widget value without retriggering script or sending message set ( \"this\" , value , { sync : false , send : false })","title":"Canvas widget"},{"location":"docs/widgets/canvas/#canvas-widget","text":"The canvas widget allows creating custom widgets with user-defined drawings and touch reactions. It has two special properties, touch and draw , that work like the script property : they are used to defined scripts that will be executed when specific events occurs. This widget requires a good understanding of the javascript Canvas API and of the javascript programming language in general.","title":"Canvas widget"},{"location":"docs/widgets/canvas/#canvas-properties","text":"","title":"Canvas properties"},{"location":"docs/widgets/canvas/#valuelength","text":"This property must be set to the number of values held by the widget : 1 for a simple slider, 2 for an XY pad, etc. Attempts to set the widget's value with a different number of values will be ignored. set ( \"this\" , 1 ) // works if valueLength == 1 set ( \"this\" , [ 1 , 2 ]) // works if valueLength == 2","title":"valueLength"},{"location":"docs/widgets/canvas/#autoclear","text":"This is a convenience option that clears the canvas context and calls beginPath before each drawing. When this property is set to false , the canvas must be cleared manually.","title":"autoClear"},{"location":"docs/widgets/canvas/#continuous","text":"If this property is enabled, the widget will be redrawn at a fixed rate even if not interacted with (see onDraw ).","title":"continuous"},{"location":"docs/widgets/canvas/#ontouch","text":"This script is executed when the widget is touched, when it is released, and during the movement of the pointer while the widget is touched. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value width : canvas width in pixels height : canvas height in pixels event : object containing the following: type : \"start\" , \"move\" or \"stop\" target : id of the widget under the pointer, \"this\" if it's the canvas widget itself, null if no widget is under the pointer targetName : name attribute of the html element under the pointer targetTagName : tag name of the html element under the pointer offsetX , offsetY : touch coordinates in pixels, relative to the html element under the pointer movementX , movementY : movement of the pointer in pixels since the last event pointerId : unique identifier used to differentiate fingers in multitouch situation altKey , ctrlKey , shiftKey : keyboard modifier states force : amount of pressure applied to the touch surface between 0 and 1 (see Touch.force ). Equals 0 if the API is not supported or if no pressure information is found. radiusX , radiusY , rotationAngle : see Touch.rotationAngle (iOS only) altitudeAngle , azimuthAngle : see Touch.altitudeAngle (iOS only) touchType : \"direct\" or \"stylus\" Extra html elements Elements added using the html property can be touched as well, event.targetName can be used to determine which element is touched.","title":"onTouch"},{"location":"docs/widgets/canvas/#ondraw","text":"This script is executed when the widget should be redrawn, which is when it's touched and when it receives a value. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value width : canvas width in pixels height : canvas height in pixels ctx : canvas rendering context of the widget cssVars : object containing the computed value of some of the widget's style properties such as colorWidget , alphaFill , padding , etc","title":"onDraw"},{"location":"docs/widgets/canvas/#onresize","text":"This script is executed when the widget has resized, before it is redrawn. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value width : canvas width in pixels height : canvas height in pixels cssVars : object containing the computed value of some of the widget's style properties such as colorWidget , alphaFill , padding , etc","title":"onResize"},{"location":"docs/widgets/canvas/#example-xy-pad","text":"Let's create a simple xy pad, with a value made of two numbers between 0 and 1. We set valueLength to 2 to make sure the widget only accepts incoming messages with two values (x and y). First, we use the onTouch property to store the touch coordinates in the locals object. We also call set() to store these in the widget's value (this way, the widget can send messages and sync with other widgets). // onTouch // store normalized coordinates if ( event . type == \"start\" ) { locals . x = event . offsetX / width locals . y = event . offsetY / height } else { // when the pointer is moving, increment coordinates // because offsetX and offsetY may not be relevant // if the pointer hovers a different widgets locals . x += event . movementX / width locals . y += event . movementY / height } // update widget value and send set ( \"this\" , [ locals . x , locals . y ]) Then, we use the onDraw property to draw a circle at the touch coordinates. // onDraw // draw circle at touch coordinates ctx . arc ( value [ 0 ] * width , value [ 1 ] * height , 6 , 0 , Math . PI * 2 ) // use colorFill property as stroke color ctx . strokeStyle = cssVars . colorFill // draw stroke ctx . stroke () Finally, we use the onValue property to apply limits to the values. // onValue // apply limits var x = Math . max ( 0 , Math . min ( 1 , value [ 0 ])), y = Math . max ( 0 , Math . min ( 1 , value [ 1 ])) // re-update widget value without retriggering script or sending message set ( \"this\" , [ x , y ], { sync : false , send : false }) // the widget will automatically send its value if // this script was triggered by a user interaction // no need to call send() here but we could, for example // if we want to split the value in to multiple messages","title":"Example: XY pad"},{"location":"docs/widgets/canvas/#example-multi-slider","text":"Let's build a row of 20-sliders with a single widget. We first set valueLength to... 20 ! // onTouch // store normalized coordinates if ( event . type == \"start\" ) { locals . x = event . offsetX / width locals . y = event . offsetY / height } else { // when the pointer is moving, increment coordinates // because offsetX and offsetY may not be relevant // if the pointer hovers a different widgets locals . x += event . movementX / width locals . y += event . movementY / height } // which slider are we touching ? var n = parseInt ( locals . x * value . length ) n = Math . max ( 0 , Math . min ( n , value . length - 1 )) // update value at slider's index // 1 - locals.y because y axis is from top to bottom in js canvas value [ n ] = 1 - locals . y // update widget value and send set ( \"this\" , value ) // onDraw ctx . fillStyle = cssVars . colorFill ctx . globalAlpha = cssVars . alphaFillOn var sliderWidth = width / value . length - 1 for ( var i in value ){ ctx . beginPath () ctx . rect ( i * width / value . length , height , sliderWidth , - value [ i ] * height ) ctx . fill () } // onValue // apply limits for ( var i in value ) { value [ i ] = Math . max ( 0 , Math . min ( 1 , value [ i ])) } // re-update widget value without retriggering script or sending message set ( \"this\" , value , { sync : false , send : false })","title":"Example: multi slider"},{"location":"docs/widgets/fragments/","text":"Fragments # Fragments allow breaking sessions into multiple files and reusable components made of multiple widgets. Fragment files # When right-clicking on a widget in the editor mode, it is possible to export it as a fragment file. Fragment files have the same extension as session files ( .json ) and can be opened like regular sessions. When doing so, keep in mind that only the first child of the root widget will be saved. It is possible to save a fragment file as a session file (and vice versa) by toggling the Fragment mode in the main menu. Fragment widgets # Fragment widgets work like clone widget except their source widget are loaded from fragment files or session files. When the sources files are modified, the fragment widgets are updated automatically.","title":"Fragments"},{"location":"docs/widgets/fragments/#fragments","text":"Fragments allow breaking sessions into multiple files and reusable components made of multiple widgets.","title":"Fragments"},{"location":"docs/widgets/fragments/#fragment-files","text":"When right-clicking on a widget in the editor mode, it is possible to export it as a fragment file. Fragment files have the same extension as session files ( .json ) and can be opened like regular sessions. When doing so, keep in mind that only the first child of the root widget will be saved. It is possible to save a fragment file as a session file (and vice versa) by toggling the Fragment mode in the main menu.","title":"Fragment files"},{"location":"docs/widgets/fragments/#fragment-widgets","text":"Fragment widgets work like clone widget except their source widget are loaded from fragment files or session files. When the sources files are modified, the fragment widgets are updated automatically.","title":"Fragment widgets"},{"location":"docs/widgets/general-mechanics/","text":"Interaction # These are interaction events widgets are likely to respond to: Mouse Touch Description Mousedown Tap Handled at pressing time, not releasing. Click Click Handled at release time. Double Click Double Tap Some widgets handle double click / double tap events. Drag Drag The widgets respond to mouse and touch drag gestures with a 1:1 precision ratio. Widgets sensibility can be tuned with the sensibility property. Single-touch widgets (i.e. all widgets except mutlixy and range ) also accept an alternate interaction event for fine control. Mouse Touch Description Ctrl + Drag / Holding the Ctrl key while dragging with the mouse increases the gesture's precision by 10. / Two-fingers drag Using two fingers on a single-touch target increases the gesture's precision by 10. Sending messages # When interacted with, widgets with at least one target (including the server's defaults) send osc messages of the following form: /address ...preArgs ...value If they have MIDI targets, the server will try to convert the osc messages into a MIDI messages (see MIDI messages ). Receiving messages # When an osc message is received, it updates every widgets that meets the following conditions same address same preArgs (no distinction between integers and round floats ) The remaining arguments after preArgs are passed to the widget. When a MIDI message is received, it's converted into an osc message (see MIDI messages ) and follows the same rules, except that only the widgets that include the emitting MIDI device in their targets will be able to receive it. Widget synchronization # Within a single client's scope, there are multiple ways to synchronize widgets: If they share the same id : in this case, the synchronized widget doesn't send any osc/midi message. This case is mostly used for widget cloning. If they share a linkId : in this case, the synchronized widget sends its osc/midi message normally. If their value properties depend on each other using the advanced syntaxes Using scripting Client synchronization # From a client to another, widgets are automatically synchronized if they share the following properties: address preArgs targets Client synchronization can be disabled with the clientSync client option .","title":"General mechanics"},{"location":"docs/widgets/general-mechanics/#interaction","text":"These are interaction events widgets are likely to respond to: Mouse Touch Description Mousedown Tap Handled at pressing time, not releasing. Click Click Handled at release time. Double Click Double Tap Some widgets handle double click / double tap events. Drag Drag The widgets respond to mouse and touch drag gestures with a 1:1 precision ratio. Widgets sensibility can be tuned with the sensibility property. Single-touch widgets (i.e. all widgets except mutlixy and range ) also accept an alternate interaction event for fine control. Mouse Touch Description Ctrl + Drag / Holding the Ctrl key while dragging with the mouse increases the gesture's precision by 10. / Two-fingers drag Using two fingers on a single-touch target increases the gesture's precision by 10.","title":"Interaction"},{"location":"docs/widgets/general-mechanics/#sending-messages","text":"When interacted with, widgets with at least one target (including the server's defaults) send osc messages of the following form: /address ...preArgs ...value If they have MIDI targets, the server will try to convert the osc messages into a MIDI messages (see MIDI messages ).","title":"Sending messages"},{"location":"docs/widgets/general-mechanics/#receiving-messages","text":"When an osc message is received, it updates every widgets that meets the following conditions same address same preArgs (no distinction between integers and round floats ) The remaining arguments after preArgs are passed to the widget. When a MIDI message is received, it's converted into an osc message (see MIDI messages ) and follows the same rules, except that only the widgets that include the emitting MIDI device in their targets will be able to receive it.","title":"Receiving messages"},{"location":"docs/widgets/general-mechanics/#widget-synchronization","text":"Within a single client's scope, there are multiple ways to synchronize widgets: If they share the same id : in this case, the synchronized widget doesn't send any osc/midi message. This case is mostly used for widget cloning. If they share a linkId : in this case, the synchronized widget sends its osc/midi message normally. If their value properties depend on each other using the advanced syntaxes Using scripting","title":"Widget synchronization"},{"location":"docs/widgets/general-mechanics/#client-synchronization","text":"From a client to another, widgets are automatically synchronized if they share the following properties: address preArgs targets Client synchronization can be disabled with the clientSync client option .","title":"Client synchronization"},{"location":"docs/widgets/properties-reference/","text":"Common # Generic properties # Properties shared by all widgets widget property type default description lock # boolean false Set to true to prevent modifying this widget with the editor. This will not prevent deleting the widget or moving it from a container to another. type # string \"auto\" Widget type id # string \"auto\" Widgets sharing the same id will act as clones and update each other's value(s) without sending extra osc messages. visible # boolean true Set to false to hide the widget. interaction # boolean true Set to false to disable pointer interactions. comments # string \"\" User comments. geometry property type default description left # number | string \"auto\" When both top and left are set to auto, the widget is positioned according to the normal flow of the page (from left to right, by order of creation). Otherwise, the widget will be positioned at absolute coordinates top # number | percentage \"auto\" When both top and left are set to auto, the widget is positioned according to the normal flow of the page (from left to right, by order of creation). Otherwise, the widget will be positioned at absolute coordinates width # number | percentage \"auto\" Widget width height # number | percentage \"auto\" Widget height expand # boolean | number \"false\" If parent's layout is vertical or horizontal , set this to true to stretch the widget to use available space automatically. style property type default description colorText # string \"auto\" Text color. Set to \"auto\" to inherit from parent widget. colorWidget # string \"auto\" Widget's default accent color. Set to \"auto\" to inherit from parent widget. colorStroke # string \"auto\" Stroke color. Set to \"auto\" to use colorWidget . colorFill # string \"auto\" Fill color. Set to \"auto\" to use colorWidget . alphaStroke # number \"auto\" Stroke color opacity. alphaFillOff # number \"auto\" Fill color opacity (off). alphaFillOn # number \"auto\" Fill color opacity (on). lineWidth # number \"auto\" Stroke width. borderRadius # number | string \"auto\" Border radius expressed as a number or a css string. This property may not work for all widgets. padding # number \"auto\" Inner spacing. html # string \"\" Custom html content to be inserted in the widget (before the widget's content). Elements are all unstyled by default, css should be used to customize their appearance. The code is automatically wrapped in <div class=\"html\"></div> Allowed HTML tags: h1-6, blockquote, p, a, ul, ol, nl, li, b, i, strong, em, strike, code, hr, br, div, table, thead, img, caption, tbody, tr, th, td, pre Allowed attributes: <*>: class, style, title, name <img>: src, width, height css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke value property type default description value # * \"\" Define the widget's value depending on other widget's values / properties using the advanced property syntax default # * \"\" If set, the widget will be initialized with this value when the session is loaded. linkId # string | array \"\" Widgets sharing the same linkId update each other's value(s) AND send their respective osc messages. When prefixed with >>, the linkId will make the widget act as a master (sending but not receiving) When prefixed with <<, the linkId will make the widget act as a slave (receiving but not sending) osc property type default description address # string \"auto\" OSC address for sending / receiving messages, it must start with a slash ( / ) By default (\"auto\"), the widget's id is used: /widget_id preArgs # * | array \"\" A value or array of values that will be prepended to the widget's value in the OSC messages it sends. Incoming messages must match these to affect by the widget. typeTags # string \"\" Defines the osc argument types, one letter per argument (including preArgs) - If empty, the types are inferred automatically from the values (with numbers casted to floats by default) - If there are more arguments than type letters, the last type is used for the extra arguments See OSC 1.0 specification for existing typetags decimals # integer 2 Defines the number of decimals to send. target # string | array | null \"\" This defines the targets of the widget's OSC messages - A string or array of strings formatted as follow: ip:port or [\"ip:portA\", \"ip:portB\"] - If midi is enabled, targets can be midi:device_name - If no target is set, messages can still be sent if the server has default targets ignoreDefaults # boolean false Set to true to ignore the server's default targets bypass # boolean false Set to true to prevent the widget from sending any osc message scripting property type default description onCreate # script \"\" Script executed when the widget is created. See documentation . onValue # script \"\" Script executed when the widget's value updates. See documentation . Basics # button # On / off button. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --color-text-on : colorTextOn colorTextOn # string \"auto\" Defines the widget's text color when active. label # string | boolean \"auto\" Set to false to hide completely - Insert icons using the prefix ^ followed by the icon's name : ^play , ^pause , etc (see https://fontawesome.com/search?m=free&s=solid - Icons can be transformed with the following suffixes: .flip-[horizontal|vertical|both] , .rotate-[90|180|270] , .spin , .pulse . Example: ^play.flip-horizontal vertical # boolean false Set to true to display the text vertically wrap # boolean | string false Set to true to wrap long lines automatically. Set to soft to avoid breaking words. Choices: false , true , soft button property type default description on # * 1 Set to null to send send no argument in the osc message. Ignored if mode is momentary . off # * 0 Set to null to send send no argument in the osc message. Must be different from on . Ignored if mode is momentary or tap . mode # string \"toggle\" Interaction mode: - toggle (classic on/off switch) - push (press & release) - momentary (no release, no value sent with the address) - tap (no release, sends on as value) Choices: toggle , push , momentary , tap doubleTap # boolean false Set to true to make the button require a double tap to be pushed instead of a single tap decoupled # boolean false Set to true make the local feedback update only when it receives a value from an osc/midi message that matches the on or off property. When decoupled , the button's value is ambiguous: when intercated with, it will send the value that's requested ( on or off for toggle and push modes, on for tap mode, null for momentary ), otherwise it will return the value received from the feedback message ( on or off property). - decoupled (toggle mode that only updates its state when it receives a value from an osc/midi message*) From a script property, feedback messages can be simulated with: set(\"widget_id\", value, {external: true}) scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Additional variables: - locals.touchCoords : [x, y] array representing the touch coordinates, normalized between 0 and 1. - locals.external : true if value was received from an osc/midi message, false otherwise . switch # Value selector button. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --color-text-on : colorTextOn colorTextOn # string \"auto\" Defines the widget's text color when active. layout # string \"vertical\" Defines how items should be laid out Choices: vertical , horizontal , grid gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". wrap # boolean | string false Set to true to wrap long lines automatically. Set to soft to avoid breaking words. Choices: false , true , soft switch property type default description values # array | object { \"Value 1\": 1, \"Value 2\": 2 } Array of possible values to switch between : [1,2,3] Object of \"label\":value pairs. Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept mode # string \"tap\" Interaction mode: - tap : activates when the pointer is down but prevents further scrolling - slide : same as tap but allows sliding between values - click : activates upon click only and allows further scrolling - flip : selects the next value upon click regardless of where the widget is touched Choices: tap , slide , click , flip dropdown # Native dropdown menu. style property type default description label # string | boolean \"auto\" Displayed text (defaults to current value). Keywords %key and %value will be replaced by the widget's selected key/value. icon # boolean \"true\" Set to false to hide the dropdown icon align # string \"center\" Set to left or right to change text alignment (otherwise center) Choices: center , left , right dropdown property type default description values # array | object { \"Value 1\": 1, \"Value 2\": 2 } Array of possible values to switch between : [1,2,3] Object of label:value pairs. Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept menu # Drag and drop menu with a circular or grid layout. geometry property type default description size # number | array 200 - If layout is circular : diameter (in px) - Else: square size or [width, height] array ignoreTabs # boolean false Set to true to allow the menu overflowing its tab ancestors. style property type default description label # string | boolean \"auto\" Displayed text (defaults to current value). Keywords %key and %value will be replaced by the widget's selected key/value. icon # boolean \"true\" Set to false to hide the dropdown icon textAlign # string \"center\" Set to left or right to change text alignment (otherwise center) Choices: center , left , right menuAlignV # string \"center\" Set to top or bottom to change menu alignment (otherwise center) Choices: center , top , bottom menuAlignH # string \"center\" Set to left or right to change menu alignment (otherwise center) Choices: center , left , right layout # string \"circular\" Defines whether the menu's layout should be rendered in a circle or in a box Choices: circular , horizontal , vertical , grid gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". menu property type default description toggle # boolean false Set to true to make the menu stay opened after mouse/touch release doubleTap # boolean false Set to true to make the menu require a double tap to be opened instead of a single tap values # array | object [ 1, 2, 3 ] Array of possible values to switch between : [1,2,3] Object of label:value pairs. Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept weights # array \"\" Array of number defining the weights of each value in values Ignored when mode is grid input # Text input. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height align # string \"center\" Set to left or right to change text alignment (otherwise center) Choices: center , left , right unit # string \"\" Unit will be appended to the displayed widget's value (it doesn't affect osc messages) input property type default description asYouType # boolean false Set to true to make the input send its value at each keystroke numeric # boolean false Set to true to allow numeric values only and display a numeric keyboard on mobile devices validation # string \"\" Regular expression: if the submitted value doesn't match the regular expression, it will be reset to the last valid value. If leading and trailing slashes are omitted, they will be added automatically and the flag will be set to \"gm\" Examples: - ^[0-9]*$ accepts digits only, any number of them - /^[a-zs]{0,10}$/i accept between 0 and 10 alphabetic characters and spaces (case insensitive) maxLength # number \"\" Maximum number of characters allowed scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height textarea # Text area (multi line input). Tip: hit shift + enter for new lines. file # File/Folder selector (server-side). style property type default description align # string \"center\" Set to left or right to change text alignment (otherwise center) Choices: center , left , right hidePath # boolean false Set to true to only display the filename (the whole path will still be used as value) mode # string \"open\" File browser mode Choices: open , save file property type default description directory # string \"auto\" Default browsing directory extension # string \"*\" Only display files with this extension allowDir # boolean false Allow selecting a folder (by pressing \"open\" when no file is selected) Containers # panel # Widgets or Tabs container. style property type default description colorBg # string \"auto\" Panel background color. Set to \"auto\" to inherit from parent widget. layout # string \"default\" Defines how children are laid out. Choices: default , vertical , horizontal , grid justify # string \"start\" If layout is vertical or horizontal , defines how widgets should be justified. Choices: start , end , center , space-around , space-between gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". contain # boolean true If layout is vertical or horizontal , prevents children from overflowing the panel. scroll # boolean true Set to false to disable scrollbars innerPadding # boolean true Set to false to make the padding property apply only between children and not at the container's inner boundaries. verticalTabs # boolean false Set to true to display for vertical tab layout panel property type default description variables # * \"@{parent.variables}\" Defines one or more arbitrary variables that can be inherited by children widgets traversing # boolean false Set to true to enable traversing gestures in this widget. Set to smart to limit affected widgets by the type of the first touched widget Choices: false , true , smart value property type default description value # integer | array \"\" If the panel contains tabs, its value defines which tab is selected selected (by index, starting with 0). If the panel contains widgets and scroll is true , its value is an array that contains the scrolling state between 0 and 1 for the x and y axis. children property type default description widgets # array [] Each element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously. tabs # array [] Each element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously modal # A toggle button that opens a popup panel. Cannot contain tabs directly. geometry property type default description popupWidth # number | percentage \"80%\" Modal popup's size popupHeight # number | percentage \"80%\" Modal popup's size popupLeft # number | percentage \"auto\" Modal popup's position popupTop # number | percentage \"auto\" Modal popup's position relative # boolean false Set to true to make the modal's position relative to the button's position. ignoreTabs # boolean false Set to true to allow the modal overflowing its tab ancestors. style property type default description colorBg # string \"auto\" Panel background color. Set to \"auto\" to inherit from parent widget. layout # string \"default\" Defines how children are laid out. Choices: default , vertical , horizontal , grid justify # string \"start\" If layout is vertical or horizontal , defines how widgets should be justified. Choices: start , end , center , space-around , space-between gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". contain # boolean true If layout is vertical or horizontal , prevents children from overflowing the panel. scroll # boolean true Set to false to disable scrollbars innerPadding # boolean true Set to false to make the padding property apply only between children and not at the container's inner boundaries. label # string | boolean \"auto\" Set to false to hide completely - Insert icons using the prefix ^ followed by the icon's name : ^play , ^pause , etc (see https://fontawesome.com/icons?d=gallery&s=solid&m=free ) - Icons can be transformed with the following suffixes: .flip-[horizontal|vertical|both] , .rotate-[90|180|270] , .spin , .pulse . Example: ^play.flip-horizontal popupLabel # string | boolean \"auto\" Alternative label for the modal popup popupPadding # number \"auto\" Modal's inner spacing. modal property type default description variables # * \"@{parent.variables}\" Defines one or more arbitrary variables that can be inherited by children widgets traversing # boolean false Set to true to enable traversing gestures in this widget. Set to smart to limit affected widgets by the type of the first touched widget Choices: false , true , smart doubleTap # boolean false Set to true to make the modal require a double tap to open instead of a single tap value property type default description value # integer \"\" Defines the modal's state: 0 for closed, 1 for opened children property type default description widgets # array [] Each element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously. tabs # array [] Each element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously clone # Widget replication with overridable properties. clone property type default description widgetId # string \"\" id of the widget to clone props # object {} Cloned widget's properties to override fragment # Embedded session or fragment file with overridable properties. fragment property type default description file # string \"\" Fragment file path (relative to the session or theme file location by default, falling back to absolute path) props # object {} Fragment widget's properties to override matrix # Generic matrix for creating rows/columns of widgets. style property type default description colorBg # string \"auto\" Panel background color. Set to \"auto\" to inherit from parent widget. layout # string \"horizontal\" Defines how children are laid out. Choices: horizontal , vertical , grid justify # string \"start\" If layout is vertical or horizontal , defines how widgets should be justified. Choices: start , end , center , space-around , space-between gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". contain # boolean true If layout is vertical or horizontal , prevents children from overflowing the panel. scroll # boolean true Set to false to disable scrollbars innerPadding # boolean true Set to false to make the padding property apply only between children and not at the container's inner boundaries. matrix property type default description variables # * \"@{parent.variables}\" Defines one or more arbitrary variables that can be inherited by children widgets traversing # boolean false Set to true to enable traversing gestures in this widget. Set to smart to limit affected widgets by the type of the first touched widget Choices: false , true , smart widgetType # string \"button\" Defines the type of the widgets in the matrix quantity # number 4 Defines the number of widgets in the matrix props # object {} Defines a set of property to override the widgets' defaults. JS{} and #{} blocks in this field are resolved with an extra variable representing each widget's index: $ (e.g. #{$} ) Advanced syntax blocks (@{}, OSC{}, JS{}, VAR{} and #{}) are resolved at the matrix' scope (ie @{this.variables} returns the matrix' variables property) Advanced syntax blocks can be passed to children without being resolved at the matrix' scope by adding an underscore before the opening bracket. Note: unless overridden, children inherit from the matrix' id and osc properties ( id and address are appended with /$ ) value property type default description value # integer | array \"\" If the panel contains tabs, its value defines which tab is selected selected (by index, starting with 0). If the panel contains widgets and scroll is true , its value is an array that contains the scrolling state between 0 and 1 for the x and y axis. children property type default description widgets # array [] Each element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously. tabs # array [] Each element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously keyboard # Piano keyboard. style property type default description colorWhite # string \"auto\" White keys color. colorBlack # string \"auto\" Black keys color. keyboard property type default description keys # number 25 Defines the number keys start # number 48 MIDI note number to start with (default is C4) Standard keyboards settings are: [25, 48] , [49, 36] , [61, 36] , [88, 21] traversing # boolean true Set to false to disable traversing gestures on # * 1 Set to null to send send no argument in the osc message off # * 0 Set to null to send send no argument in the osc message velocity # boolean false Set to true to map the touch coordinates between off (top) and on (bottom). Requires on and off to be numbers mode # string \"push\" Interaction mode: - push (press & release) - toggle (on/off switches) - tap (no release) Choices: push , toggle , tap patchbay # Connect inputs to outputs. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height patchbay property type default description inputs # array | object [ \"input_1\", \"input_2\" ] - Array of input names : ['input_1', 'input_2'] - Object of \"label_1\": \"input_1\" pairs (example: {\"label a\": \"value 1\", \"label b\": \"value 2\"} ). Numeric labels must be prepended or appended with a white space (or any other non-numeric character) otherwise the order of the values won't be kept Patchbay inputs can be connected to one or more outputs and will send messages of the following form when they are connected/disconnected: /patchbay_address input_x output_x output_y etc If no output is connected to the input, the message will be /patchbay_address input_x The inputs values can be consumed with the property inheritance syntax: @{patchbay_id/input_1} returns an array of output names connected to input_1 outputs # array | object [ \"output_1\", \"output_2\" ] List of output values the inputs can connect to (see inputs ). exclusive # boolean false If set to true , each input will be allowed to have only one connection at a time. scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height folder # Flat container that doesn't affect layout. Mostly useful for grouping widgets in the tree. folder property type default description variables # * \"@{parent.variables}\" Defines one or more arbitrary variables that can be inherited by children widgets children property type default description widgets # array [] Each element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously. tabs # array [] Each element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously root # Main (unique) container style property type default description colorBg # string \"auto\" Panel background color. Set to \"auto\" to inherit from parent widget. layout # string \"default\" Defines how children are laid out. Choices: default , vertical , horizontal , grid justify # string \"start\" If layout is vertical or horizontal , defines how widgets should be justified. Choices: start , end , center , space-around , space-between gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". contain # boolean true If layout is vertical or horizontal , prevents children from overflowing the panel. scroll # boolean true Set to false to disable scrollbars innerPadding # boolean true Set to false to make the padding property apply only between children and not at the container's inner boundaries. verticalTabs # boolean false Set to true to display for vertical tab layout hideMenu # boolean false Set to true to hide the main menu button. root property type default description variables # * \"@{parent.variables}\" Defines one or more arbitrary variables that can be inherited by children widgets traversing # boolean false Set to true to enable traversing gestures in this widget. Set to smart to limit affected widgets by the type of the first touched widget Choices: false , true , smart value property type default description value # integer | array \"\" If the panel contains tabs, its value defines which tab is selected selected (by index, starting with 0). If the panel contains widgets and scroll is true , its value is an array that contains the scrolling state between 0 and 1 for the x and y axis. children property type default description widgets # array [] Each element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously. tabs # array [] Each element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously tab # Tabbed panel widget style property type default description colorBg # string \"auto\" Panel background color. Set to \"auto\" to inherit from parent widget. layout # string \"default\" Defines how children are laid out. Choices: default , vertical , horizontal , grid justify # string \"start\" If layout is vertical or horizontal , defines how widgets should be justified. Choices: start , end , center , space-around , space-between gridTemplate # string | number \"\" If layout is grid , can be either a number of columns or a valid value for the css property \"grid-template\". contain # boolean true If layout is vertical or horizontal , prevents children from overflowing the panel. scroll # boolean true Set to false to disable scrollbars innerPadding # boolean true Set to false to make the padding property apply only between children and not at the container's inner boundaries. verticalTabs # boolean false Set to true to display for vertical tab layout label # string | boolean \"auto\" Set to false to hide completely - Insert icons using the prefix ^ followed by the icon's name : ^play , ^pause , etc (see https://fontawesome.com/icons?d=gallery&s=solid&m=free ) - Icons can be transformed with the following suffixes: .flip-[horizontal|vertical|both] , .rotate-[90|180|270] , .spin , .pulse . Example: ^play.flip-horizontal tab property type default description variables # * \"@{parent.variables}\" Defines one or more arbitrary variables that can be inherited by children widgets traversing # boolean false Set to true to enable traversing gestures in this widget. Set to smart to limit affected widgets by the type of the first touched widget Choices: false , true , smart value property type default description value # integer | array \"\" If the panel contains tabs, its value defines which tab is selected selected (by index, starting with 0). If the panel contains widgets and scroll is true , its value is an array that contains the scrolling state between 0 and 1 for the x and y axis. children property type default description widgets # array [] Each element of the array must be a widget object. A panel cannot contain widgets and tabs simultaneously. tabs # array [] Each element of the array must be a tab object. A panel cannot contain widgets and tabs simultaneously Frames # frame # Embed a page in a frame (local network only). value property type default description value # string \"\" External web page URL. svg # Svg parser. svg property type default description svg # string \"\" Svg xml definition (will be wrapped in a < svg /> element) html # Simple HTML parser. image # Load a image (url or base64-encoded). style property type default description size # string \"cover\" CSS background-size Choices: cover , contain , auto position # string \"center\" CSS background-position Choices: center , left , right , top , bottom , left top , left bottom , right top , right bottom repeat # string \"no-repeat\" CSS background-repeat Choices: no-repeat , repeat , repeat-x , repeat-y , space , round image property type default description cache # boolean true Set to false to disable image caching (forces file reload when updating or editing the widget). When true, sending reload to the widget reloads its image without changing its value value property type default description value # string \"\" - File url or path (relative to the session or theme file location by default, falling back to absolute path) - Base64 encoded image : data:image/... Graphs # plot # XY coordinates plot. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height dots # boolean false Draw dots on the line bars # boolean false Set to true to use draw bars instead (disables logScaleX and forces x axis even spacing) pips # boolean true Set to false to hide the scale plot property type default description rangeX # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the x axis rangeY # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the y axis origin # number | boolean \"auto\" Defines the y axis origin. Set to false to disable it value property type default description value # array | string \"\" - Array of y values: [y1, y2, ...] - Array of [x, y] array values: [[x1 , y1], [x2, y2], ...] - String array : \"[y1, y2, ...]\" or \"[[x1 , y1], [x2, y2], ...]\" - String object to update specific coordinates only: \"{0: y1, 1: y2}\" or \"{0: [x1, y1], 1: [x2, y2]}\" scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height eq # Draws logarithmic frequency response from an array of filter objects. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height dots # boolean false Draw dots on the line bars # boolean false Set to true to use draw bars instead (disables logScaleX and forces x axis even spacing) pips # boolean true Set to false to hide the scale eq property type default description rangeX # object { \"min\": 20, \"max\": 22000 } Defines the min and max values for the x axis (in Hz, logarithmic scale) rangeY # object { \"min\": -6, \"max\": 6 } Defines the min and max values for the y axis (in dB) origin # number | boolean \"auto\" Defines the y axis origin. Set to false to disable it filters # array \"\" Each item must be an object with the following properties - type : string (\"highpass\", \"highshelf\", \"lowpass\", \"lowshelf\", \"peak\", \"bandpass\" or \"notch\", default: \"peak\") - freq : number (filter's resonant frequency, default: 1000) - q : number (Q factor, default: 1) - gain : number (default: 0) - on : boolean (default: true) See https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode pips # boolean true Set to false to hide the scale value property type default description value # array | string \"\" - Array of y values: [y1, y2, ...] - Array of [x, y] array values: [[x1 , y1], [x2, y2], ...] - String array : \"[y1, y2, ...]\" or \"[[x1 , y1], [x2, y2], ...]\" - String object to update specific coordinates only: \"{0: y1, 1: y2}\" or \"{0: [x1, y1], 1: [x2, y2]}\" scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height visualizer # Display its value over time. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height pips # boolean true Set to false to hide the scale visualizer property type default description rangeX # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the x axis rangeY # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the y axis origin # number \"auto\" Defines the y axis origin. Set to false to disable it duration # number 1 Defines visualization duration in seconds framerate # number 30 Defines visualization framerate logScaleY # boolean | number false Set to true to use logarithmic scale for the y axis (base 10). Set to a number to define the logarithm's base. freeze # boolean false Set to true to freeze current view and ignore incoming values value property type default description value # array | string \"\" - Array of y values: [y1, y2, ...] - Array of [x, y] array values: [[x1 , y1], [x2, y2], ...] - String array : \"[y1, y2, ...]\" or \"[[x1 , y1], [x2, y2], ...]\" - String object to update specific coordinates only: \"{0: y1, 1: y2}\" or \"{0: [x1, y1], 1: [x2, y2]}\" scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height Indicators # led # Intensity display. led property type default description mode # string \"intensity\" Defines how value is interpreted (see value ) Choices: intensity , color range # object { \"min\": 0, \"max\": 1 } Value range alphaRange # object { \"min\": 0, \"max\": 1 } Alpha range (if mode is color ) logScale # boolean false If mode is intensity , set to true to use logarithmic scale. value property type default description value # number | array | string \"\" If mode is intensity : - Number : intensity between range.min and range.max If mode is color : - Array : [r, g, b] ( r , g and b between range.min and range.max ) - Array : [r, g, b, alpha] ( alpha between alphaRange.min and alphaRange.max ) - String : CSS color text # Display text. style property type default description vertical # boolean false Set to true to display the text vertically wrap # boolean | string false Set to true to wrap long lines automatically. Set to soft to avoid breaking words. Choices: false , true , soft align # string \"center\" Text alignment. Choices: center , left , right , top , bottom , left top , left bottom , right top , right bottom Pads # xy # Two-dimensional slider. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height pointSize # integer 20 Defines the points' size ephemeral # boolean false When set to true , the point will be drawn only while touched. pips # boolean true Set to false to hide the scale xy property type default description snap # boolean false By default, the points are dragged from their initial position. If set to true , touching anywhere on the widget's surface will make them snap to the touching coordinates spring # boolean false When set to true , the widget will go back to its default value when released rangeX # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the x axis rangeY # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the y axis logScaleX # boolean | number false Set to true to use logarithmic scale for the x axis. Set to -1 for exponential scale. logScaleY # boolean | number false Set to true to use logarithmic scale for the y axis. Set to -1 for exponential scale. doubleTap # boolean | string false Set to true to make the fader reset to its default value when receiving a double tap. Can also be an osc address, which case the widget will just send an osc message: /<doubleTap> <preArgs> sensitivity # number 1 Defines the pad's sensitivity when snap is false scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height onTouch # script \"\" Script executed when the widget is touched and released. See documentation . rgb # Color picker with optional alpha slider. rgb property type default description snap # boolean false By default, the points are dragged from their initial position. If set to true , touching anywhere on the widget's surface will make them snap to the touching coordinates spring # boolean false When set to true , the widget will go back to its default value when released range # object { \"min\": 0, \"max\": 255 } Defines the widget's output scale. alpha # boolean false Set to true to enable alpha channel rangeAlpha # object { \"min\": 0, \"max\": 1 } Defines the widget's output scale for the alpha channel. scripting property type default description onTouch # script \"\" Script executed when the widget is touched and released. See documentation . multixy # Multi-point XY pad. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height pointSize # integer 20 Defines the points' size ephemeral # boolean false When set to true , the points will be drawn only while touched. pips # boolean true Set to false to hide the scale multixy property type default description points # integer | array 2 Defines the number of points on the pad Can be an array of strings that will be used as labels for the points (ex: ['A', 'B'] ) snap # boolean false By default, the points are dragged from their initial position. If set to true , touching anywhere on the widget's surface will make them snap to the touching coordinates spring # boolean false When set to true , the widget will go back to its default value when released rangeX # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the x axis rangeY # object { \"min\": 0, \"max\": 1 } Defines the min and max values for the y axis logScaleX # boolean | number false Set to true to use logarithmic scale for the x axis. Set to -1 for exponential scale. logScaleY # boolean | number false Set to true to use logarithmic scale for the y axis. Set to -1 for exponential scale. doubleTap # boolean | string false Set to true to make the fader reset to its default value when receiving a double tap. Can also be an osc address, which case the widget will just send an osc message: /<doubleTap> <preArgs> sensitivity # number 1 Defines the pad's sensitivity when snap is false scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height onTouch # script \"\" Script executed when the widget is touched and released. See documentation . canvas # Multitouch canvas widget with user-defined drawing functions and touch reactions. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height canvas property type default description valueLength # number 1 Defines the number of values accepted by the widget (minimum 1). Incoming messages that don't comply will be ignored When calling set() from a script, submitted value should be an array only if valueLength is greater than 1. autoClear # boolean true If set to false , the canvas context won't be cleared automatically and ctx.clear() will need to be called in onDraw . continuous # boolean | number false If set to true , onDraw will be called at each frame, otherwise it will be called only when the widget is touched and when it receives a value. Can be a number between 1 and 60 to specify the framerate (default: 30 fps). scripting property type default description onValue # script \"\" Script executed whenever the widget's value updates. See documentation . onTouch # script \"\" Script executed when the widget is touched and released, and when the pointer moves when the widget is touched. See documentation . onDraw # script \"\" Script executed when the widget is redrawn. See documentation . onResize # script \"\" Script executed when the widget is resized. See documentation . Sliders # fader # Vertical / horizontal slider. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height design # string \"default\" Design style Choices: default , round , compact knobSize # number \"auto\" Fader knob size horizontal # boolean false Set to true to display the fader horizontally pips # boolean false Set to true to show range breakpoints (ignored if design is compact ) dashed # boolean | array false Set to true to display a dashed gauge. Can be set as an array of two numbers : [dash_size, gap_size] gradient # array | object [] When set, the meter's gauge will be filled with a linear color gradient - each item must be a CSS color string. - as an object : each key must be a number between 0 and 1 - each item must be a CSS color string. Examples: ['blue', 'red'] , fader property type default description snap # boolean false By default, dragging the widget will modify it's value starting from its last value. Setting this to true will make it snap directly to the mouse/touch position spring # boolean false When set to true , the widget will go back to its default value when released doubleTap # boolean false Set to true to make the fader reset to its default value when receiving a double tap. Can also be an osc address, in which case the widget will just send an osc message ( /<doubleTap> <preArgs> ) range # object { \"min\": 0, \"max\": 1 } Defines the breakpoints of the fader's scale: - keys can be percentages and/or min / max - values can be number or object if a custom label is needed Example: ( {min:{\"-inf\": 0}, \"50%\": 0.25, max: {\"+inf\": 1}} ) logScale # boolean | number false Set to true to use logarithmic scale. Set to -1 for exponential scale. sensitivity # number 1 Defines the fader's sensitivity when snap is false steps # string | number | array \"\" Restricts the widget's value: - empty or 0 : use values defined in range - number : define a number of evenly spaced steps - array : use arbitrary values origin # number \"auto\" Defines the starting point's value of the fader's gauge scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height onTouch # script \"\" Script executed when the widget is touched and released. See documentation . knob # Rotative knob slider. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height design # string \"default\" Design style Note: \"solid\" design uses \"colorStroke\" for the central knob color. Choices: default , solid , line pips # boolean false Set to true to show the scale's breakpoints dashed # boolean | array false Set to true to display a dashed gauge. Can be set as an array of two numbers : [dash_size, gap_size] angle # number 270 Defines the angle's width of the knob, in degrees knob property type default description mode # string \"vertical\" - vertical : relative move in vertical motion - circular : relative move in circular motion - snap : snap to touch position - snap-alt : alternative snap mode that allow jumping from range.min to range.max . sensitivity is ignored with this mode. Choices: vertical , circular , snap , snap-alt spring # boolean false When set to true , the widget will go back to its default value when released doubleTap # boolean false Set to true to make the knob reset to its default value when receiving a double tap. Can also be an osc address, in which case the widget will just send an osc message ( /<doubleTap> <preArgs> ) range # object { \"min\": 0, \"max\": 1 } Defines the breakpoints of the fader's scale: - keys can be percentages and/or min / max - values can be number or object if a custom label is needed Example: ( {min:{\"-inf\": 0}, \"50%\": 0.25, max: {\"+inf\": 1}} ) logScale # boolean | number false Set to true to use logarithmic scale. Set to -1 for exponential scale. sensitivity # number 1 Defines the knob's sensitivity when mode is not snap steps # string | number | array \"\" Restricts the widget's value: - empty or 0 : use values defined in range - number : define a number of evenly spaced steps - array : use arbitrary values origin # number \"auto\" Defines the starting point's value of the knob's gauge scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height onTouch # script \"\" Script executed when the widget is touched and released. See documentation . encoder # A knob that sends a relative direction information instead of an absolute value. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height encoder property type default description mode # string \"circular\" - circular : relative move in circular motion - snap : snap to touch position and move in vertical motion - vertical : relative move in vertical motion Choices: circular , snap , vertical doubleTap # boolean false Set to true to make the fader reset to its default value when receiving a double tap. Can also be an osc address, in which case the widget will just send an osc message ( /<doubleTap> <preArgs> ) range # object { \"min\": 0, \"max\": 1 } Defines the breakpoints of the fader's scale: - keys can be percentages and/or min / max - values can be number or object if a custom label is needed Example: ( {min:{\"-inf\": 0}, \"50%\": 0.25, max: {\"+inf\": 1}} ) logScale # boolean | number false Set to true to use logarithmic scale. Set to -1 for exponential scale. sensitivity # number 1 When set between 0 and 1, reduces the encoder's verbosity ticks # number \"\" Defines the granularity / verbosity of the encoder (number of step for a 360\u00b0 arc) back # * -1 Defines which value is sent when rotating the encoder anticlockwise forth # * 1 Defines which value is sent when rotating the encoder clockwise release # number \"\" Defines which value is sent when releasing the encoder: - Set to null to send send no argument in the osc message - Can be an object if the type needs to be specified scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height Additional variables: - locals.speed : encoder's speed (reduce sensitivity to increase averaging) - locals.angle : encoder's angle in degrees onTouch # script \"\" Script executed when the widget is touched and released. See documentation . range # A fader with two heads for setting a range. style property type default description css # string \"\" CSS rules. See documentation . Some style-related properties can be set or read from css using css variables: - --color-background : colorBg - --color-widget : colorWidget - --color-fill : colorFill - --color-stroke : colorStroke - --color-text : colorText - --widget-padding : padding - --line-width : lineWidth - --border-radius : borderRadius - --alpha-fill-on : alphaFillOn - --alpha-fill-off : alphaFillOff - --alpha-stroke : alphaStroke - --alpha-pips : alphaPips - --alpha-pips-text : alphaPipsText Canvas-based widget have their computed width and height available as css variables (read-only): - --widget-width - --widget-height design # string \"default\" Design style Choices: default , round , compact knobSize # number \"auto\" Fader knob size horizontal # boolean false Set to true to display the fader horizontally pips # boolean false Set to true to show range breakpoints (ignored if design is compact ) dashed # boolean | array false Set to true to display a dashed gauge. Can be set as an array of two numbers : [dash_size, gap_size] gradient # array | object [] When set, the meter's gauge will be filled with a linear color gradient - each item must be a CSS color string. - as an object : each key must be a number between 0 and 1 - each item must be a CSS color string. Examples: ['blue', 'red'] , range property type default description snap # boolean false By default, dragging the widget will modify it's value starting from its last value. Setting this to true will make it snap directly to the mouse/touch position spring # boolean false When set to true , the widget will go back to its default value when released doubleTap # boolean false Set to true to make the fader reset to its default value when receiving a double tap. Can also be an osc address, in which case the widget will just send an osc message ( /<doubleTap> <preArgs> ) range # object { \"min\": 0, \"max\": 1 } Defines the breakpoints of the fader's scale: - keys can be percentages and/or min / max - values can be number or object if a custom label is needed Example: ( {min:{\"-inf\": 0}, \"50%\": 0.25, max: {\"+inf\": 1}} ) logScale # boolean | number false Set to true to use logarithmic scale. Set to -1 for exponential scale. sensitivity # number 1 Defines the fader's sensitivity when snap is false steps # string | number | array \"\" Restricts the widget's value: - empty or 0 : use values defined in range - number : define a number of evenly spaced steps - array : use arbitrary values scripting property type default description onValue # script \"\" Script executed when the widget's value updates. See documentation . Canvas-based widget have their computed width and height available as local variables: - locals.width - locals.height onTouch # script \"\" Script executed when the widget is touched and released. See documentation . Scripts # script # Scripting widget utility with keyboard bindings scripting property type default description onKeyboard # script \"\" Script executed whenever the widget receives a keyboard event if keyBinding is set). See documentation . keyBinding # string | array \"\" Key combo string or array of strings (see KeyboardJS documentation). If the editor is enabled, some keys / combos will not work. To process all keystroke events, write [''] keyRepeat # boolean true Set to false to prevent keydown repeats when holding the key combo pressed keyType # string \"keydown\" Determines which key event trigger the script's execution Choices: keydown , keyup , both variable # Receives / stores a value, to be used in scripts (using the get function) or in properties (using the @{} syntax).","title":"Properties reference"},{"location":"docs/widgets/properties-reference/#common","text":"Generic properties # Properties shared by all widgets widget property type default description","title":"Common"},{"location":"docs/widgets/properties-reference/#basics","text":"button # On / off button. style property type default description","title":"Basics"},{"location":"docs/widgets/properties-reference/#containers","text":"panel # Widgets or Tabs container. style property type default description","title":"Containers"},{"location":"docs/widgets/properties-reference/#frames","text":"frame # Embed a page in a frame (local network only). value property type default description","title":"Frames"},{"location":"docs/widgets/properties-reference/#graphs","text":"plot # XY coordinates plot. style property type default description","title":"Graphs"},{"location":"docs/widgets/properties-reference/#indicators","text":"led # Intensity display. led property type default description","title":"Indicators"},{"location":"docs/widgets/properties-reference/#pads","text":"xy # Two-dimensional slider. style property type default description","title":"Pads"},{"location":"docs/widgets/properties-reference/#sliders","text":"fader # Vertical / horizontal slider. style property type default description","title":"Sliders"},{"location":"docs/widgets/properties-reference/#scripts","text":"script # Scripting widget utility with keyboard bindings scripting property type default description","title":"Scripts"},{"location":"docs/widgets/scripting/","text":"Scripting # Widgets can run Javascript scripts upon specific events. These scripts are written in special properties under the scripting category. Advanced syntaxes Most advanced syntaxes should be avoided as much as possible in scripting properties: @{} : use get() and getProp() instead OSC{} : use get() instead (using another widget as receiver) VAR{} : use getVar() instead JS{} and #{} are useless (scripting properties are already interpreted as javascript code) unless you want to generate code procedurally The editor will always fail to recognize these syntaxes as they don't comply with the javacript language specification, even if the resulting code is valid. Events # onCreate # This script is called when the widget is created. If the widget has children, it will be executed after the children are created. Modifying parent container Modifying a non-dynamic property on a parent container from this script will not work . onValue # This script is called when the widget's value updates and when it receives a value. The following variables are available in this context: id ( string ): id of the widget that's responsible for the value update value : widget's value touch : see Touch state Keyboard & Matrix In keyboards and matrices, id is the id of the child widget that triggered the event, and value is an array containing the children's values. The touched widget's value can be retrieved with: value [ getIndex ( id )] Touch state (deprecated) This feature is deprecated, use onTouch instead When some widgets are touched or released, a special value event can be caught to trigger custom actions. If the variable touch is not undefined , this means it holds the widget's current touch state: 0/1 for the widget's touch state ( fader , knob and xy , range and multixy ) [i, 0/1] if the widget is multi touch ( range and multixy ). In this case i is the touched handle's index, starting with 0 . if ( touch !== undefined ) { // send multi touch state if ( touch . length ) send ( '/touch_address' , touch [ 0 ], touch [ 1 ]) // send global touch state else send ( '/touch_address' , touch ) } else { // do something with the value ? } To avoid unwanted script executions, touch state events will only be caught if the script contains the word touch and if onTouch is empty. onTouch # This script is executed when the widget is touched, and when it is released. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value event : object containing the following: type : \"start\" or \"stop\" handle : undefined if the event concerns the widget, integer if it concerns one of it's handles ( multixy and range widgets only) Note: the canvas widgets exposes more informations in its onTouch script. onDraw # See canvas . onKeyboard # Script widget only This script is executed when the key(s) defined in the widget's keyBinding property are pressed. The following variables are available in this context: type ( string ): keydown or keyup key ( string ): key name, code ( number ): key code ctrl ( boolean) : true if ctrl key is pressed shift ( boolean ): true if shift key is pressed alt ( boolean ): true if alt key is pressed meta ( boolean ): true if meta key is pressed Available variables # The following variables and functions are accessible in this context. console : javascript console locals : object for storing/reading arbitrary values. Changing its properties does not trigger any synchronisation even if the value is used somewhere else. globals : same as locals but shared between all widgets, contains a few useful variables: screen : client screen informations ( {width, height, orientation} ) env : client options (ie: url query options), ip : client's ip address, url : server url, platform : operating system as seen by the client session : session file path clipboard : instance of navigator Clipboard Image : javascript's Image constructor this Unlike in most javascript contexts, the special keyword this doesn't point to an object but instead returns the string \"this\" . get(id) # id : widget id as a string. Returns the value of the first matching widget. If the returned value is an object, a copy is returned to allow safe mutation. set(id, value, options) # id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. id may contains wildcards ('*'). value : new value for the widget. options (optional): object , accepts the following items: sync: false : prevents widgets from triggering synchronization and scripts script: false : prevents scripts but not synchronization send: false : prevents widgets from sending osc messages external: true : simulates a value coming from an osc/midi message Sets the value of the first matching widget. If \u00ecd contains wildcards, affects all matching widgets except the emitting widget. If the event that triggered the script's execution was initiated by a user interaction, this will make the widget send its value as well (unless options is set to {send: false} ). getVar(id, name) # id : widget id as a string. name : variable name as a string. Returns the value of a widget's custom variable. If the returned value is an object, a copy is returned to allow safe mutation. setVar(id, name, value) # id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. id may contains wildcards ('*'). name : variable name as a string. value : new value for the variable. Sets the value of a widget's custom variable (see advanced syntaxes ). If \u00ecd contains wildcards, affects all matching widgets. send(target, address, ...args) # target (optional): \"ip:port\" or \"midi:device_name\" string. If omitted, the widget's target (or the server's defaults) will be used. address : osc address, must start with a / args : values or {type: \"OSC_TYPE_LETTER\", value: VALUE} objects Sends an osc message. If the event that triggered the script's execution was not initiated by a user interaction, this function will have no effect. This function ignores the widget's bypass and ignoreDefaults properties. Examples send ( '127.0.0.1:4444' , '/address' , 1 ) send ( '127.0.0.1:4444' , '/address' , 1 , 2 ) send ( '/address' , 1 ) // uses the widget's target send ( '/address' , { type : 'i' , value : 1 }) // sends 1 as an integer getProp(id, name) # id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. name : property name. Returns the property called \"name\" of the first matching widget. If the returned value is an object, a copy is returned to allow safe mutation. getIndex(id) # id (optional): widget id as a string. Defaults to \"this\" . Returns the widget's index in its container. updateProp(id, name) # id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. name : property name. Forces a widget to check if one of its properties has changed and update itself if needed. updateCanvas(id) # id : widget id as a string. Can be \"this\" to target the host widget. Forces a canvas widget redraw. httpGet(url, callback) # url : url of the resource to fetch (local url only) callback : function executed when/if the http request succeeds, with the response text as argument stateGet(id) # id : widget id as a string, or array of id strings. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. Returns a state object ( id:value ) for matching widget and all their children. stateSet(state) # Loads a state object. If the event that triggered the script's execution was initiated by a user interaction, this will make the updated widgets send their value as well. storage # Global localStorage instance, allows storing data that persists upon refresh/relaunch. setTimeout(id, callback, delay) / setInterval(id, callback, delay) # These work like almost their native equivalent, with an extra (optional) id argument. id (optional): unique identifier, if omitted, defaults to undefined . If a timeout with the same id is already running, it is cleared before the new one is created (even if undefined ). id s are scoped to the widget's context: two timeouts with the same id in two different widgets can run concurrently callback : function to be executed delay : delay before execution is ms Reference: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval Usage note: If no concurrent timeout / interval is needed, calling setTimeout , setInterval , clearTimeout and clearInterval with no \u00ecd argument will do. clearTimeout(id) / clearInterval(id) # Clears timeout with matching id . Reference: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval setFocus(id) # id (optional): widget id as a string Gives focus to a widget (ie input widget). Built-in client only : tells the operating system to give the focus to the client window unfocus() # Built-in client only : tells the operating system to give the focus to the window that was focused before. getScroll(id) # id : widget id as a string. Returns the scroll position of a container as a [x, y] array. Deprecated Scrollable panels expose their scroll position normalized between 0 and 1 with their value. setScroll(id, x, y) # id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. x : horizontal scroll, undefined to use current value y : vertical scroll, undefined to use current value Sets the scroll state of a container. Deprecated Scrollable panels expose their scroll position normalized between 0 and 1 with their value. toolbar(i1, i2, ...) # iX : menu entry index Triggers toolbar action at specified index. Examples toolbar(0, 0) -> Open a new session toolbar(4) -> Toggle full screen Actions will only be triggered if initiated with a user interaction. Fullscreen cannot be toggled with a simulated interaction (i.e. using /SET ) openUrl(url) # url : http(s) url Built-in client only : opens url with the system's default browser External client only : opens url in a new tab If the event that triggered the script's execution was not initiated by a user interaction, this function will have no effect. runAs(id, callback) # id : widget id as a string. callback : function to be executed Run callback function as if executed by another that widget matches specified id. This will not change the value of any local variable but \"this\" and \"parent\" arguments (accepted by functions such as set() ) will be interpreted differently. Timeouts and intervals will be created and cleared in the target widget's scope.","title":"Scripting"},{"location":"docs/widgets/scripting/#scripting","text":"Widgets can run Javascript scripts upon specific events. These scripts are written in special properties under the scripting category. Advanced syntaxes Most advanced syntaxes should be avoided as much as possible in scripting properties: @{} : use get() and getProp() instead OSC{} : use get() instead (using another widget as receiver) VAR{} : use getVar() instead JS{} and #{} are useless (scripting properties are already interpreted as javascript code) unless you want to generate code procedurally The editor will always fail to recognize these syntaxes as they don't comply with the javacript language specification, even if the resulting code is valid.","title":"Scripting"},{"location":"docs/widgets/scripting/#events","text":"","title":"Events"},{"location":"docs/widgets/scripting/#oncreate","text":"This script is called when the widget is created. If the widget has children, it will be executed after the children are created. Modifying parent container Modifying a non-dynamic property on a parent container from this script will not work .","title":"onCreate"},{"location":"docs/widgets/scripting/#onvalue","text":"This script is called when the widget's value updates and when it receives a value. The following variables are available in this context: id ( string ): id of the widget that's responsible for the value update value : widget's value touch : see Touch state Keyboard & Matrix In keyboards and matrices, id is the id of the child widget that triggered the event, and value is an array containing the children's values. The touched widget's value can be retrieved with: value [ getIndex ( id )] Touch state (deprecated) This feature is deprecated, use onTouch instead When some widgets are touched or released, a special value event can be caught to trigger custom actions. If the variable touch is not undefined , this means it holds the widget's current touch state: 0/1 for the widget's touch state ( fader , knob and xy , range and multixy ) [i, 0/1] if the widget is multi touch ( range and multixy ). In this case i is the touched handle's index, starting with 0 . if ( touch !== undefined ) { // send multi touch state if ( touch . length ) send ( '/touch_address' , touch [ 0 ], touch [ 1 ]) // send global touch state else send ( '/touch_address' , touch ) } else { // do something with the value ? } To avoid unwanted script executions, touch state events will only be caught if the script contains the word touch and if onTouch is empty.","title":"onValue"},{"location":"docs/widgets/scripting/#ontouch","text":"This script is executed when the widget is touched, and when it is released. This script has access to the same variables and functions as the script property (except the event-specific ones), plus the following: value : widget value event : object containing the following: type : \"start\" or \"stop\" handle : undefined if the event concerns the widget, integer if it concerns one of it's handles ( multixy and range widgets only) Note: the canvas widgets exposes more informations in its onTouch script.","title":"onTouch"},{"location":"docs/widgets/scripting/#ondraw","text":"See canvas .","title":"onDraw"},{"location":"docs/widgets/scripting/#onkeyboard","text":"Script widget only This script is executed when the key(s) defined in the widget's keyBinding property are pressed. The following variables are available in this context: type ( string ): keydown or keyup key ( string ): key name, code ( number ): key code ctrl ( boolean) : true if ctrl key is pressed shift ( boolean ): true if shift key is pressed alt ( boolean ): true if alt key is pressed meta ( boolean ): true if meta key is pressed","title":"onKeyboard"},{"location":"docs/widgets/scripting/#available-variables","text":"The following variables and functions are accessible in this context. console : javascript console locals : object for storing/reading arbitrary values. Changing its properties does not trigger any synchronisation even if the value is used somewhere else. globals : same as locals but shared between all widgets, contains a few useful variables: screen : client screen informations ( {width, height, orientation} ) env : client options (ie: url query options), ip : client's ip address, url : server url, platform : operating system as seen by the client session : session file path clipboard : instance of navigator Clipboard Image : javascript's Image constructor this Unlike in most javascript contexts, the special keyword this doesn't point to an object but instead returns the string \"this\" .","title":"Available variables"},{"location":"docs/widgets/scripting/#getid","text":"id : widget id as a string. Returns the value of the first matching widget. If the returned value is an object, a copy is returned to allow safe mutation.","title":"get(id)"},{"location":"docs/widgets/scripting/#setid-value-options","text":"id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. id may contains wildcards ('*'). value : new value for the widget. options (optional): object , accepts the following items: sync: false : prevents widgets from triggering synchronization and scripts script: false : prevents scripts but not synchronization send: false : prevents widgets from sending osc messages external: true : simulates a value coming from an osc/midi message Sets the value of the first matching widget. If \u00ecd contains wildcards, affects all matching widgets except the emitting widget. If the event that triggered the script's execution was initiated by a user interaction, this will make the widget send its value as well (unless options is set to {send: false} ).","title":"set(id, value, options)"},{"location":"docs/widgets/scripting/#getvarid-name","text":"id : widget id as a string. name : variable name as a string. Returns the value of a widget's custom variable. If the returned value is an object, a copy is returned to allow safe mutation.","title":"getVar(id, name)"},{"location":"docs/widgets/scripting/#setvarid-name-value","text":"id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. id may contains wildcards ('*'). name : variable name as a string. value : new value for the variable. Sets the value of a widget's custom variable (see advanced syntaxes ). If \u00ecd contains wildcards, affects all matching widgets.","title":"setVar(id, name, value)"},{"location":"docs/widgets/scripting/#sendtarget-address-args","text":"target (optional): \"ip:port\" or \"midi:device_name\" string. If omitted, the widget's target (or the server's defaults) will be used. address : osc address, must start with a / args : values or {type: \"OSC_TYPE_LETTER\", value: VALUE} objects Sends an osc message. If the event that triggered the script's execution was not initiated by a user interaction, this function will have no effect. This function ignores the widget's bypass and ignoreDefaults properties. Examples send ( '127.0.0.1:4444' , '/address' , 1 ) send ( '127.0.0.1:4444' , '/address' , 1 , 2 ) send ( '/address' , 1 ) // uses the widget's target send ( '/address' , { type : 'i' , value : 1 }) // sends 1 as an integer","title":"send(target, address, ...args)"},{"location":"docs/widgets/scripting/#getpropid-name","text":"id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. name : property name. Returns the property called \"name\" of the first matching widget. If the returned value is an object, a copy is returned to allow safe mutation.","title":"getProp(id, name)"},{"location":"docs/widgets/scripting/#getindexid","text":"id (optional): widget id as a string. Defaults to \"this\" . Returns the widget's index in its container.","title":"getIndex(id)"},{"location":"docs/widgets/scripting/#updatepropid-name","text":"id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. name : property name. Forces a widget to check if one of its properties has changed and update itself if needed.","title":"updateProp(id, name)"},{"location":"docs/widgets/scripting/#updatecanvasid","text":"id : widget id as a string. Can be \"this\" to target the host widget. Forces a canvas widget redraw.","title":"updateCanvas(id)"},{"location":"docs/widgets/scripting/#httpgeturl-callback","text":"url : url of the resource to fetch (local url only) callback : function executed when/if the http request succeeds, with the response text as argument","title":"httpGet(url, callback)"},{"location":"docs/widgets/scripting/#stategetid","text":"id : widget id as a string, or array of id strings. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. Returns a state object ( id:value ) for matching widget and all their children.","title":"stateGet(id)"},{"location":"docs/widgets/scripting/#statesetstate","text":"Loads a state object. If the event that triggered the script's execution was initiated by a user interaction, this will make the updated widgets send their value as well.","title":"stateSet(state)"},{"location":"docs/widgets/scripting/#storage","text":"Global localStorage instance, allows storing data that persists upon refresh/relaunch.","title":"storage"},{"location":"docs/widgets/scripting/#settimeoutid-callback-delay-setintervalid-callback-delay","text":"These work like almost their native equivalent, with an extra (optional) id argument. id (optional): unique identifier, if omitted, defaults to undefined . If a timeout with the same id is already running, it is cleared before the new one is created (even if undefined ). id s are scoped to the widget's context: two timeouts with the same id in two different widgets can run concurrently callback : function to be executed delay : delay before execution is ms Reference: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval Usage note: If no concurrent timeout / interval is needed, calling setTimeout , setInterval , clearTimeout and clearInterval with no \u00ecd argument will do.","title":"setTimeout(id, callback, delay) / setInterval(id, callback, delay)"},{"location":"docs/widgets/scripting/#cleartimeoutid-clearintervalid","text":"Clears timeout with matching id . Reference: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval","title":"clearTimeout(id) / clearInterval(id)"},{"location":"docs/widgets/scripting/#setfocusid","text":"id (optional): widget id as a string Gives focus to a widget (ie input widget). Built-in client only : tells the operating system to give the focus to the client window","title":"setFocus(id)"},{"location":"docs/widgets/scripting/#unfocus","text":"Built-in client only : tells the operating system to give the focus to the window that was focused before.","title":"unfocus()"},{"location":"docs/widgets/scripting/#getscrollid","text":"id : widget id as a string. Returns the scroll position of a container as a [x, y] array. Deprecated Scrollable panels expose their scroll position normalized between 0 and 1 with their value.","title":"getScroll(id)"},{"location":"docs/widgets/scripting/#setscrollid-x-y","text":"id : widget id as a string. Can be \"this\" to target the host widget, or \"parent\" to target the parent widget. x : horizontal scroll, undefined to use current value y : vertical scroll, undefined to use current value Sets the scroll state of a container. Deprecated Scrollable panels expose their scroll position normalized between 0 and 1 with their value.","title":"setScroll(id, x, y)"},{"location":"docs/widgets/scripting/#toolbari1-i2","text":"iX : menu entry index Triggers toolbar action at specified index. Examples toolbar(0, 0) -> Open a new session toolbar(4) -> Toggle full screen Actions will only be triggered if initiated with a user interaction. Fullscreen cannot be toggled with a simulated interaction (i.e. using /SET )","title":"toolbar(i1, i2, ...)"},{"location":"docs/widgets/scripting/#openurlurl","text":"url : http(s) url Built-in client only : opens url with the system's default browser External client only : opens url in a new tab If the event that triggered the script's execution was not initiated by a user interaction, this function will have no effect.","title":"openUrl(url)"},{"location":"docs/widgets/scripting/#runasid-callback","text":"id : widget id as a string. callback : function to be executed Run callback function as if executed by another that widget matches specified id. This will not change the value of any local variable but \"this\" and \"parent\" arguments (accepted by functions such as set() ) will be interpreted differently. Timeouts and intervals will be created and cleared in the target widget's scope.","title":"runAs(id, callback)"}]}