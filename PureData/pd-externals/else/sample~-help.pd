#N canvas 434 23 565 597 10;
#X obj 5 568 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 5 226 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 5 433 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 5 522 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 86 443 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 149 531 1) symbol;
#X text 218 546 - audio file to load (optional), f 44;
#X text 149 546 2) symbol;
#X obj 5 466 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X obj 306 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 4 pd;
#X obj 345 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 23 41 cnv 4 4 4 empty empty Audio 0 28 2 18 #e0e0e0 #000000
0;
#X obj 458 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 478 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 515 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 464 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 502 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 77 41 cnv 4 4 4 empty empty buffer 0 28 2 18 #e0e0e0 #000000
0;
#X obj 3 4 cnv 15 301 42 empty empty sample~ 20 20 2 37 #e0e0e0 #000000
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X msg 170 134 show;
#X msg 214 144 hide;
#X text 178 274 clear;
#X text 217 274 - fills all arrays with zeros, f 53;
#X text 217 387 - normalizes to the given float value, f 53;
#X text 217 302 - sets file to write to (no symbol opens dialog box)
, f 53;
#X text 148 358 sr <float>;
#X text 184 330 show;
#X text 184 344 hide;
#X text 217 330 - shows/opens buffer supbatch window, f 53;
#X text 217 344 - hides/closes buffer supbatch window, f 53;
#X text 94 288 trim <float \, float>;
#X text 136 401 size <float>;
#X text 148 415 ms <float>;
#X text 106 386 normalize <float>;
#X text 118 372 rename <symbol>;
#X text 217 373 - changes the buffer name, f 53;
#X text 130 302 save <symbol>;
#X text 130 316 depth <float>;
#X text 217 316 - sets bit depth (16 \, 24 or 32), f 53;
#X text 217 288 - trims to a sample range, f 53;
#X text 217 358 - sets file's sample rate (default: patch's), f 53
;
#X text 217 401 - sets maximum buffer size in samples, f 53;
#X text 217 415 - sets maximum buffer size in ms, f 53;
#X text 135 475 -size <float> - sets maximum buffer size in samples
;
#X text 146 489 -ms <float> - sets maximum buffer size in ms, f 45
;
#N canvas 802 128 454 461 details 0;
#X text 150 60 <= check internal array;
#X text 69 138 Similar to:;
#X text 267 139 <= click to open;
#X obj 67 201 soundfiler;
#X obj 153 139 table vanilla_\$0;
#X text 47 246 But [sample~] is also able to define multi channel arrays
(up to 64). The convention for channel ordering is the buffer name
preceded by the channel number (from 0) and "-". For instance \, a
4 channel [sample~] object named "test" has arrays named as: "0-test"
\, "1-test" \, "2-test" and "3-test"!;
#X text 30 16 [sample~] is based on vanilla's [soundfiler] \, which
loads audio files into tables and can write sound files from given
tables.;
#X msg 117 59 show;
#X text 47 316 On the other hand \, for single or "mono" samples \,
the name "test" generates an internal array also named: "test"., f
60;
#X obj 117 86 else/sample~ else_\$0 violin.wav;
#X obj 67 168 else/initmess read -resize violin.wav vanilla_\$0;
#X text 47 354 You can use Pd vanilla's objects (such as [tabreceive~]
\, [tabplay~] \, [tabread4~] and [array]) to access the internal arrays
of [sample~]. In the case of a multi channel buffer \, you have to
give it the correct table name according to a specific channel., f
60;
#X connect 7 0 9 0;
#X connect 10 0 3 0;
#X restore 479 156 pd details;
#X obj 88 233 cnv 17 3 197 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 126 445 list <f \, f \, f>;
#X text 225 445 - sample's size \, sample rate and channels, f 48
;
#X text 73 84 [sample~] is an abstraction that creates an audio buffer
which you can use to load a sample or record into. It can load and
save multichannel files., f 62;
#X text 218 531 - buffer name (default sample_\$0), f 44;
#X text 146 504 -ch <float> - sets number of channels (default 1);
#N canvas 754 82 467 586 rec/play 0;
#X obj 121 335 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 74 200 else/setdsp~;
#X obj 113 423 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 114 495 else/out~;
#X msg 211 237 show;
#X obj 191 319 else/cusp~ 250;
#X obj 262 347 else/rampnoise~ 490;
#X text 57 337 record =>;
#X text 145 426 <= play;
#X msg 192 195 ms 2000;
#X text 247 237 <= click;
#X text 34 28 You can use [sample~] to define a buffer that you can
record into. Below we have a stereo buffer. By default \, the buffer
size is one second. You can set the size at creation by using flags
either in samples (with '-size') or in ms (with '-ms'). Note that if
you are using [sample~] to load files \, this will also set a maximum
size for the loaded sample. You can change the size with the 'size'
or 'ms' messages \, which will also set a maximum limit for loading
samples., f 62;
#X obj 121 375 else/tabwriter~ buf_\$0 2;
#X obj 113 458 else/tabplayer~ -loop buf_\$0 2;
#X text 33 124 You can use [tabwrite~] or \, alternatively \, [else/tabwriter~]
to record into arrays with multi-channel support. Moreover \, you can
use [tabplay~] or \, better yet \, [else/tabplayer~] (which also has
multi-channel support)., f 62;
#X obj 192 267 else/sample~ -ch 2 -ms 1500 buf_\$0;
#X text 250 195 <= change length to 2 seconds, f 16;
#X connect 0 0 12 0;
#X connect 2 0 13 0;
#X connect 4 0 15 0;
#X connect 5 0 12 1;
#X connect 6 0 12 2;
#X connect 9 0 15 0;
#X connect 13 0 3 0;
#X connect 13 1 3 1;
#X restore 472 197 pd rec/play;
#X text 184 246 info;
#X text 217 246 - re output size \, sample rate and channels, f 53
;
#X obj 170 195 else/display;
#X msg 125 134 info;
#X obj 170 172 else/sample~ \$0-sample stereo.wav;
#X text 130 232 open <symbol>;
#X text 172 260 reopen;
#X text 217 232 - opens sample file (no symbol opens dialog box);
#X text 217 260 - re opens the previously opened file, f 53;
#X text 20 172 click to show sample -->;
#N canvas 527 114 757 447 open/save 0;
#X msg 529 238 clear;
#X text 556 212 open/close buffer window;
#X text 573 237 clears all channels;
#X text 468 138 without symbol: opens dialog box;
#X text 490 172 reloads the last opened file;
#X text 554 309 without symbol: opens dialog box, f 17;
#X msg 474 209 show;
#X msg 515 210 hide;
#X msg 515 284 save test.wav;
#X msg 515 315 save;
#X text 13 185 The "save" message saves the contents of [sample~] into
an audio file. If no symbol is given \, a standard file dialog is opened
for naming the file., f 59;
#X text 13 311 The "depth" message sets the bit depth for writing files
\, it accepts floats:, f 59;
#X text 136 330 16 - 16-bit integer (default) \; 24 - 24-bit integer
\; 32 - 32-bit float \;;
#X text 609 283 writes to a file;
#X obj 411 389 else/display;
#X text 530 96 read a file specified by a symbol (.wav \, .aif/.aiff
or .caf), f 33;
#X text 13 224 You can specify a file extension with the "wav" \, "aif"
and "caf" messages \, but you can also specify a file extension in
the given symbol (such as "test.wav"). If you don't specify an extension
\, [sample~] saves in the same extension of the most recently opened
audio file or the last given extension message ("wav" of "aif"). By
default \, [sample~] saves in .wav format.;
#X obj 411 356 else/sample~ -ch 2 buffer_\$0;
#X msg 412 28 open stereo.wav 44100;
#X msg 385 63 open stereo.wav 44100 88200;
#X msg 422 102 open stereo.wav;
#X msg 435 138 open;
#X msg 446 173 reopen;
#X text 14 120 You can specify a sound file to load as the second argument
or via the "open" message ([sample~] can load 'wav' \, 'caf' and 'aif/aiff'
sound files). Without a given symbol \, "open" opens a dialog box.
The "reopen" message reloads the last opened file.;
#X connect 0 0 17 0;
#X connect 6 0 17 0;
#X connect 7 0 17 0;
#X connect 8 0 17 0;
#X connect 9 0 17 0;
#X connect 17 0 14 0;
#X connect 18 0 17 0;
#X connect 19 0 17 0;
#X connect 20 0 17 0;
#X connect 21 0 17 0;
#X connect 22 0 17 0;
#X restore 467 176 pd open/save;
#X connect 21 0 59 0;
#X connect 22 0 59 0;
#X connect 58 0 59 0;
#X connect 59 0 57 0;
