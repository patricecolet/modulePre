#N canvas 596 23 563 569 10;
#X declare -path pdlua/examples;
#X declare -lib pdlua;
#N canvas 718 80 544 393 quickstart 0;
#N canvas 423 76 587 151 class 0;
#X text 65 19 - Class creation: Say you wrote a 'foo' external in Lua. The first expression in the text file "foo.pd_lua" should be of the form:, f 78;
#X text 65 75 This creates a new Pd class called "foo". The 'local' declaration is optional \, but recommended - without it \, 'foo' is global \, which means any Lua code can modify it (possibly by accident). After this \, you you can add methods to the class., f 78;
#X obj 107 51 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 191 54 local foo = pd.Class:new():register("foo");
#X restore 328 134 pd class creation;
#N canvas 423 76 644 176 clocks 0;
#X text 85 49 You can bind methods to clocks \, for timing based on Pd's logical clock.;
#X text 85 92 Remember to clean up your clocks in object:finalize() \, or weird things will happen.;
#X text 85 77 See doc/examples/ldelay.pd_lua for details.;
#X obj 475 82 ldelay 1000;
#X obj 475 50 bng 16 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X obj 475 112 bng 16 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X connect 3 0 5 0;
#X connect 4 0 3 0;
#X restore 328 255 pd clocks;
#X text 65 119 Check to the right basic steps;
#N canvas 423 76 752 395 send/receive 0;
#X text 55 43 You can send messages to receivers like this:;
#X text 54 84 (again the <> represent curly brackets);
#X obj 503 109 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf #000000 #000000;
#X msg 538 37 1000;
#X msg 576 37 100;
#X text 56 105 See doc/examples/lsend.pd_lua for details.;
#X obj 503 141 lsend splat-1;
#X obj 538 90 lsend splat-2;
#X obj 72 62 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 79 62 pd.send("receiver" \, "selector" \, <"a" \, "message" \, 1 \, 2 \, 3>;
#X text 79 241 Remember to clean up your receivers in object:finalize() \, or weird things will happen.;
#X text 78 183 You can bind methods to receivers \, to get messages from [send receiver] and " \; receiver message".;
#X floatatom 615 224 5 0 0 0 - - - 0;
#X text 79 220 See doc/examples/lreceive.pd_lua for details.;
#X obj 492 195 lreceive splat- 1 2 3;
#X obj 492 236 else/display;
#X connect 2 0 6 0;
#X connect 3 0 7 0;
#X connect 4 0 7 0;
#X connect 14 0 15 0;
#X connect 14 1 12 0;
#X restore 328 229 pd send/receive;
#N canvas 602 23 505 657 object 0;
#X text 46 101 or equivalently:;
#X text 344 196 [foo a b 1 2 3 c];
#X text 39 220 would have sel equal to "foo" and the atoms:;
#X text 37 273 Being a method \, 'initialize' has a 'self' variable (which is the object to be created) \, and if you want your objects to have inlets or outlets you need need to set those fields in this method (Pd doesn't support changing the number of inlets or outlets after an object is created):, f 73;
#X text 34 371 The default inlet/outlet counts are 0;
#X text 38 245 where <> should be curly brackets \, but Pd won't print them in a comment., f 73;
#X obj 63 48 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X obj 63 120 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 70 50 function foo:initialize(sel \, atoms);
#X text 71 63 -- code;
#X text 71 77 end;
#X text 71 125 foo.initialize = function (self \, sel \, atoms);
#X text 70 139 -- code;
#X text 69 152 end;
#X obj 74 331 cnv 15 400 30 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 316 220 <"a" \, "b" \, 1 \, 2 \, 3 \, "c">;
#X text 82 330 self.inlets = 1;
#X text 82 346 self.outlets = 2;
#X text 38 12 - Object Initialization: The most important methid is 'initialize' \, which is executed when a new object is created:, f 67;
#X text 38 182 'sel' is usually (always?) the class name \, 'atoms' are the creation arguments in a Lua table. For example a Pd object:, f 72;
#X text 53 404 The return value of 'initialize' is used to allow objects to fail to create (for example \, if the creation arguments are bad). Most of the time you will 'return true' \, but if you really can't create then you can 'return false'.;
#X obj 70 513 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 77 515 function foo:postinitialize();
#X text 77 529 -- code;
#X text 78 544 end;
#X text 53 458 If you need to do things after the Pd object is created \, but before control is returned to Pd \, (such as registering receivers or clocks) you can use the 'postinitialize' method:;
#X text 81 590 The 'finalize' method is called when the object is deleted by Pd. You can clean up stuff here if needed. The default implementation does nothing.;
#X restore 328 158 pd object initialization and finalization;
#X f 24;
#N canvas 232 87 975 437 inlet/outlet 0;
#X text 73 25 Each inlet should have at least one method that will be called when an item it can handle arrives at that input.;
#X obj 90 111 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 97 115 function foo:in_1_float(f);
#X text 96 128 -- code;
#X text 98 141 end;
#X obj 90 184 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 96 201 -- code;
#X text 98 214 end;
#X obj 90 258 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 96 275 -- code;
#X text 98 288 end;
#X text 74 237 A "gimme" method for [foo] accepts any input:;
#X text 97 262 function foo:in_1(sel \, atoms);
#X text 74 163 A "stop" method for inlet 2 of [foo]:;
#X text 97 188 function foo:in_2_stop();
#X text 73 55 The name of the method is constructed as "in_n_selector" where n is the inlet number (starting from 1) and selector is a type such as "float" or "bang" \, or a selector name such as "start". Here is a float method for [foo] inlet 1:;
#X obj 90 332 cnv 15 400 50 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 96 349 -- code;
#X text 98 362 end;
#X text 74 311 A method for symbols on any input:;
#X text 97 336 function foo:in_n_symbol(i \, s);
#X obj 555 154 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 562 158 self:outlet(2 \, "bang" \, <>);
#X text 536 177 (as usual <> should be curly brackets);
#X text 538 133 This will cause the second outlet to emit a bang:;
#X obj 555 224 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 538 203 This will cause the second outlet to emit a float:;
#X text 562 228 self:outlet(2 \, "float" \, <123>);
#X obj 555 274 cnv 15 400 40 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 538 252 This will cause the first outlet to emit a list:;
#X text 562 295 self:outlet(1 \, "list" \, somelist);
#X text 562 278 self.somelist = <some items in a list>;
#X text 538 115 Use self:outlet(outlet_number \, type \, table);
#X restore 328 198 pd inlet/outlet methods;
#N canvas 623 234 536 319 extra 0;
#X text 55 54 Execute a Lua file using Pd's path to find it:;
#X text 55 91 Report an error to Pd's console:;
#X obj 72 72 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X obj 72 115 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 80 72 self:dofile("filename");
#X text 80 115 self:error("message");
#X text 55 136 This will allow the object to be highlighted from Pd's menu using Find->Find Last Error.;
#X text 66 205 Print a string to Pd's console:;
#X text 66 242 Note that pd.post() should not really be used for errors.;
#X obj 83 222 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 91 222 pd.post("a string");
#X text 52 180 function:;
#X text 42 31 method:;
#X restore 327 281 pd extra;
#X text 60 150 NOTE: [pdlua]/[pdluax] was originally written by Claude Heiland-Allen and has gone through the hands of a few people over the years \, including mrpeach \, zmoelnig and albert graef. Recently it's been included into PlugData and distributed as part of the ELSE library for compatibility to Vanilla. Alexandre Porres \, author of ELSE \, up to now \, has really nothing to do with it besides shipping it and working on the documentation revision. The object is distributed with the GPL 2 license \, see 'pdlua' subfolder for more., f 39;
#X obj 223 334 declare -path pdlua/examples;
#X text 126 333 Examples from:;
#X obj 63 69 else/openfile -h https://agraef.github.io/pd-lua/tutorial/pd-lua-intro.html;
#X text 62 24 Find basic instructions/examples below on how to write externals in Lua. For a detailed tutorial \, check the 'pdlua/tutorial' folder for a PDF document. You can also find this tutorial online at:, f 66;
#X restore 437 407 pd quickstart;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Load\ externals\ written\ in\ Lua 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty pdlua 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X obj 4 436 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 471 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 506 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 143 445 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 539 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 243 481 NONE;
#X text 243 516 NONE;
#X text 177 446 load <symbol>;
#X text 261 446 - load and run a '*.lua' file;
#X text 16 401 See also:;
#X obj 46 293 pdlua;
#X text 178 250 <-- load and run a Lua file, f 15;
#X text 82 293 <-- global interface to pdlua;
#X text 22 93 [pdlua] registers a loader that allows Pd externals written in Lua (with the "*.pd_lua" extension) to be loaded. To guarantee Pd will load these externals \, you should load [pdlua] as a library \, either at startup or with [delcare]:, f 80;
#X text 165 147 loading [pdlua] from [declare] -->;
#X text 334 389 Details on writting lua externals ----->, f 23;
#X text 23 334 The [hello] object above is loaded from a 'hello.pd_lua' file. You can also provide help files for it and right click on it to ask for them. Right click also allows you to open the .pd_lua file if your system has a known application for it., f 80;
#X text 173 395 (this version loads files as arguments), f 20;
#X obj 324 271 pdlua/hello;
#X obj 380 148 declare -lib pdlua;
#X msg 46 250 load pdlua/hello.lua;
#X text 398 271 <-- right click for help or open, f 16;
#X obj 81 402 pdluax;
#X text 23 176 If you also create [pdlua] as an object as below \, a global interface is created to load and run "*.lua" files via the 'load' message. Make sure that Pd is aware of the paths where your .pd_lua externals and .lua files are - you can also use declare for this or a namespace prefix (see we're using 'pdlua/' prefix here)., f 80;
#X connect 32 0 22 0;
