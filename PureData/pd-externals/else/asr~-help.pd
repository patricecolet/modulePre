#N canvas 506 32 565 591 10;
#X obj 5 346 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 5 430 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 5 518 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 5 565 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 108 439 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 108 354 cnv 17 3 32 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 184 439 signal;
#X obj 24 40 cnv 4 4 4 empty empty Attack/Sustain/Release 0 28 2 18
#e0e0e0 #000000 0;
#X obj 199 40 cnv 4 4 4 empty empty gated 0 28 2 18 #e0e0e0 #000000
0;
#X obj 108 389 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 142 389 float/signal;
#X obj 181 285 else/out~;
#X obj 181 246 *~;
#X obj 304 246 vsl 18 90 0 1 0 0 ewtwet wefwert empty 0 -9 0 10 #dcdcdc
#000000 #000000 0 1;
#X obj 304 218 else/sig2float~;
#X text 327 327 0;
#X text 327 242 1;
#X obj 3 3 cnv 15 301 42 empty empty asr~ 20 20 2 37 #e0e0e0 #000000
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 3 graph;
#X text 143 354 float/signal;
#X text 238 388 - attack time in ms;
#X obj 108 409 cnv 17 3 17 empty empty 2 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 142 409 float/signal;
#X text 238 408 - release time in ms;
#X text 238 439 - envelope signal;
#X text 144 524 1) float - attack time in ms (default 0);
#X text 144 544 2) float - release time in ms (default 0);
#X obj 196 154 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 249 40 cnv 4 4 4 empty empty envelope 0 28 2 18 #e0e0e0 #000000
0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 0 0;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 122 190 osc~ 440;
#X text 239 354 - gate values;
#X obj 263 159 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 331 159 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X text 264 141 attack;
#X text 333 141 release;
#N canvas 506 218 838 459 example 0;
#X obj 592 282 *~;
#X obj 592 364 else/out~;
#X obj 592 322 else/lowpass~ 0 20;
#X obj 644 261 else/rescale~ 100 1500;
#X obj 644 203 else/asr~ 250 750;
#X obj 644 91 else/randpulse~ 0.5;
#X text 445 30 [asr~] accepts any gate value \, positive or negative
and above 1 or below -1 \, so you can use it to control anything besides
amplitude.;
#X obj 169 90 else/tempo 120 100 -on;
#X obj 213 313 catch~ \$0-voice;
#X obj 101 382 clone;
#X text 79 337 see also:;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 265 158 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 265 210 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 178 103 / 127;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 163 251 throw~ \$0-voice;
#X obj 178 131 else/asr~ 50 50;
#X obj 73 173 else/bl.vsaw~;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 10 0;
#X connect 5 0 9 0;
#X connect 6 0 4 0;
#X connect 6 1 5 0;
#X connect 7 0 10 1;
#X connect 9 0 3 1;
#X connect 9 1 1 0;
#X connect 10 0 3 0;
#X restore 195 280 pd voice1;
#X obj 330 159 tgl 22 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040
#000000 0 1;
#X obj 169 135 else/display;
#X text 328 142 On/Off;
#X obj 169 165 makenote 127 150;
#X obj 213 392 else/out~;
#X obj 65 359 else/voices;
#X text 143 280 open =>;
#N canvas 179 291 434 315 voice1 0;
#X obj 73 46 inlet;
#X obj 265 158 tgl 40 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 265 210 switch~;
#X obj 163 219 *~;
#X obj 73 110 mtof;
#X obj 178 103 / 127;
#X obj 73 77 unpack float float;
#X obj 98 144 osc~ 0.125;
#X obj 163 251 throw~ \$0-voice;
#X obj 178 131 else/asr~ 50 50;
#X obj 73 173 else/bl.vsaw~;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 8 0;
#X connect 4 0 10 0;
#X connect 5 0 9 0;
#X connect 6 0 4 0;
#X connect 6 1 5 0;
#X connect 7 0 10 1;
#X connect 9 0 3 1;
#X connect 9 1 1 0;
#X connect 10 0 3 0;
#X restore 268 280 pd voice1;
#X obj 195 218 else/voices 2 1;
#X obj 195 192 else/suspedal -retrig 1;
#X text 17 10 Here we have randomly generated notes into a sustain
pedal and then feeding a [voice] object with 2 voices. Also see that
each voice subpatch has [asr~]'s status outlet to control a DSP switch
for that subpatch - open and check it. You should also try pd's [clone]
object for managing polyphonic synths.;
#X obj 498 209 else/bl.saw~;
#X obj 268 246 else/display;
#X obj 195 246 else/display;
#X obj 213 342 else/plate.rev~ 50 0.75 0.5 0.5 0.5, f 18;
#X obj 169 113 else/rand.i 48 70;
#X obj 498 137 else/rand.f~ 50 150;
#X text 714 289 <-- cutoff;
#X text 714 160 <-- gate value;
#X text 568 170 <-- Hz;
#X obj 498 170 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 644 160 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 644 289 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 3 0 34 0;
#X connect 4 0 0 1;
#X connect 4 0 3 0;
#X connect 5 0 28 0;
#X connect 5 0 33 0;
#X connect 7 0 27 0;
#X connect 8 0 26 0;
#X connect 12 0 21 2;
#X connect 13 0 15 0;
#X connect 15 0 21 0;
#X connect 15 1 21 1;
#X connect 20 0 25 0;
#X connect 20 1 24 0;
#X connect 21 0 20 0;
#X connect 21 1 20 1;
#X connect 23 0 0 0;
#X connect 24 0 19 0;
#X connect 25 0 11 0;
#X connect 26 0 16 0;
#X connect 27 0 13 0;
#X connect 28 0 32 0;
#X connect 32 0 23 0;
#X connect 33 0 4 0;
#X connect 34 0 2 1;
#X restore 480 291 pd example;
#X obj 196 185 else/asr~ 1000 500, f 23;
#X text 26 277 see also:;
#X obj 25 298 else/adsr~;
#X text 156 155 gate;
#N canvas 610 131 414 421 triggered 0;
#X obj 155 331 else/out~;
#X obj 195 79 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 155 285 *~;
#X obj 83 211 else/brown~;
#X obj 195 244 else/asr~ 50 500;
#X obj 195 108 else/tempo~ 60;
#X obj 195 175 else/timed.gate~ 500;
#X text 16 20 You can use the [timed.gate~] object to create a timed
gate so you can trigger the envelope.;
#X text 266 204 <-- gate value;
#X obj 195 204 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 208 141 <-- impulse;
#X connect 1 0 5 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 2 1;
#X connect 5 0 6 0;
#X connect 6 0 9 0;
#X connect 9 0 4 0;
#X restore 462 260 pd triggered \; by impulses;
#X obj 109 462 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 190 462 float;
#X text 237 462 - envelope status (on: 1 / off: 0);
#N canvas 549 257 434 440 status 0;
#X obj 280 329 switch~;
#X obj 280 261 tgl 50 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 100 299 *~;
#X obj 38 237 osc~ 440;
#X obj 79 349 dac~;
#X obj 147 277 else/sig2float~;
#X obj 147 313 vsl 18 100 0 0.5 0 0 empty empty empty 0 -9 0 10 #dcdcdc
#000000 #000000 0 1;
#X text 21 95 This only works for control data such as MIDI \, and
is possible because the float input of [adsr~] will always turn the
status on \, so you can use it to start the DSP. See below., f 62
;
#X obj 341 151 else/setdsp~;
#X msg 134 203 0;
#X text 157 178 gate on;
#X text 168 202 gate off;
#X text 19 15 [asr~] has a right outlet that sends a status value (1
when the envelope starts and 0 when it ends). This can be useful for
different things \, but particularly to turn on and off the DSP processing
of a subpatch or abstraction with [switch~].;
#X obj 115 235 else/asr~ 100 500, f 28;
#X msg 115 178 0.125;
#X connect 1 0 0 0;
#X connect 2 0 4 0;
#X connect 2 0 4 1;
#X connect 3 0 2 0;
#X connect 5 0 6 0;
#X connect 9 0 13 0;
#X connect 13 0 2 1;
#X connect 13 0 5 0;
#X connect 13 1 1 0;
#X connect 14 0 13 0;
#X restore 486 220 pd status;
#N canvas 768 211 409 373 fader~ 0;
#X obj 140 259 *~;
#X obj 140 294 else/out~;
#X obj 70 115 else/brown~;
#X obj 155 84 tgl 20 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 155 228 else/fader~;
#X msg 200 171 quartic;
#X msg 209 193 lin;
#X msg 192 148 sin;
#X obj 155 112 else/asr~ 1000 1500;
#X text 20 24 The [fader~] object can be useful for generating non
linear envelopes from [asr~]'s output.;
#X connect 0 0 1 0;
#X connect 2 0 0 0;
#X connect 3 0 8 0;
#X connect 4 0 0 1;
#X connect 5 0 4 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X connect 8 0 4 0;
#X restore 486 310 pd fader~;
#X obj 5 490 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X text 68 86 [asr~] is an attack/sustain/release gated envelope. At
a gate on (transition from 0 to any value) \, [asr~] goes from 0 to
that value at the specified attack time in ms. A gate off (transition
from any value to 0) makes [asr~] go to 0 at the specified release
time in ms., f 69;
#N canvas 845 52 494 456 log 0;
#X obj 390 182 else/setdsp~;
#X text 349 106 see also:;
#X obj 49 287 cnv 15 398 138 empty empty empty 20 12 0 14 #e0e0e0 #404040
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-log 441 float 0;
#X coords 0 1 440 0 400 140 1 0 0;
#X restore 48 286 graph;
#X obj 148 114 bng 20 250 50 0 empty empty empty 17 7 0 10 #dcdcdc
#000000 #000000;
#X obj 84 139 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X obj 161 151 else/timed.gate~ 6;
#X obj 349 127 else/lag~;
#X text 47 19 By default \, [asr~] is linear \, but it can operate
in "logarithmic" mode \, which implements a one pole filter (like in
the [lag~] object). This is a non-liner mode that simulates how analog
gear work. The attack or release time represent how long it takes for
the signal to converge to within 0.01% of the target value. The log
mode is set with the -log flag or "log" message., f 65;
#X msg 84 160 log \$1;
#X obj 149 243 tabwrite~ \$0-log;
#X obj 161 200 else/asr~ -log 4 4;
#X text 177 114 <= click;
#X text 314 195 turn on =>;
#X connect 4 0 6 0;
#X connect 4 0 10 0;
#X connect 5 0 9 0;
#X connect 6 0 11 0;
#X connect 9 0 11 0;
#X connect 11 0 10 0;
#X restore 503 240 pd log;
#X text 149 369 log <float>;
#X text 239 369 - non zero sets to "log" mode \, "linear" otherwise
;
#X text 163 499 -log: sets to log mode (default \, linear);
#X connect 12 0 11 0;
#X connect 14 0 13 0;
#X connect 27 0 44 0;
#X connect 37 0 12 0;
#X connect 39 0 44 1;
#X connect 40 0 44 2;
#X connect 44 0 12 1;
#X connect 44 0 14 0;
