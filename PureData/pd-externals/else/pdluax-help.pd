#N canvas 433 23 562 428 10;
#X declare -lib pdlua;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Load\ externals\ written\ in\ Lua 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty pdluax 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X obj 4 295 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 330 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 365 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 398 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 243 340 NONE;
#X text 244 308 NONE;
#X text 249 261 For more details see:;
#X text 62 261 see also:;
#X obj 127 262 pdlua;
#N canvas 315 78 929 422 details 0;
#X text 54 16 [pdluax] allows "volatile" loading of Lua source code files that define a Pd object behaviour. This way \, if you create a [pdluax foo] object loading "foo.pd_luax" \, you can edit this file and new [pdluax foo] objects will reflect the changes in the file. This is good for rapid development/testing cycles and live coding as there's no need to restart Pd if you made a little mistake.;
#X text 54 104 There are disadvantages \, as reloading the file each time is slower. The syntax is different than th eone expected by [pdlua]., f 60;
#X text 54 149 There is no "reload" functionality \, so you can have multiple objects called [pdluax foo] with different behaviours. Data shared between objects must be accessible globally. These points mean some mistakes/changes will make you restart Pd anyway.;
#X text 52 253 The last expression/statement in the file should be of the form:;
#X obj 96 282 cnv 15 300 60 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 108 286 return function (self \, sel \, atoms);
#X text 110 303 -- code here;
#X text 109 323 end;
#X text 54 357 This function is executed in the context of the 'initialize' method of the pdluax class \, and has the same arguments:;
#X text 499 17 'self' is the object to be created.;
#X text 498 34 'sel' is the name of the class.;
#X text 498 52 'atoms' are the creation arguments.;
#X obj 476 130 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 491 131 function self:in_1_float(f) ... end;
#X obj 476 180 cnv 15 400 20 empty empty empty 20 12 0 14 #dfdfdf #404040 0;
#X text 477 153 or:;
#X text 491 181 self.in_1_float = function(self \, f) ... end;
#X text 505 210 If using the second form \, remember the self argument.;
#X text 505 229 If you need a shared state between objects \, you need to use a global name. Try to pick something unique to avoid conflicts with other scripts. You also need to ensure that you don't clobber this state - remember the script can be executed more than once.;
#X text 460 93 To add methods to the new object you need to add code _inside_ the returned function. There are two syntaxes for this:, f 66;
#X text 50 226 How to write code:;
#X text 468 309 NOTE: [pdlua]/[pdluax] was originally written by Claude Heiland-Allen and has gone through the hands of a few people over the years \, including mrpeach \, zmoelnig and albert graef. Recently it's been included into PlugData and distributed as part of the ELSE library for compatibility to Vanilla. Alexandre Porres \, author of ELSE \, up to now \, has really nothing to do with it besides shipping it and working on the documentation revision. Tje object is distributed with the GPL 2 license \, see 'pdlua' subfolder for more., f 73;
#X restore 386 262 pd details;
#X text 40 207 (right click to open file);
#X obj 208 206 pdluax pdlua/hello;
#X obj 387 163 declare -lib pdlua;
#X text 324 205 <- loading hello.pd_luax in 'pdlua' subfolder, f 24;
#X text 49 89 The [pdluax] object is similar to [pdlua] but you can load "*.pd_luax" files as arguments. It is less efficient but more flexible when developing or live-coding. You also need to load [pdlua] as a library first as with the [declare] object below. You can right click the object and ask to open the source file if your system has an application set to handle this extension., f 74;
#X text 163 375 1) symbol - source file name (without extension);
