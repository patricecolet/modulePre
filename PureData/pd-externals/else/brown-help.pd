#N canvas 454 23 566 475 10;
#X obj 7 443 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 7 273 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 7 338 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 7 409 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 105 282 cnv 17 3 48 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 105 348 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 23 40 cnv 4 4 4 empty empty Brownian\\\ motion 0 28 2 18 #e0e0e0
#000000 0;
#X obj 3 3 cnv 15 301 42 empty empty brown 20 20 2 37 #e0e0e0 #000000
0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#N canvas 459 157 702 310 seed 0;
#X text 30 19 Pseudo random number generators aren't true random number
generators. Instead \, an algorithm is used to provide a sequence of
numbers that seems random. The same sequence can be reproduced if you
set a "seed" value \, which can be any integer number., f 52;
#X floatatom 47 243 10 0 0 0 - - - 12;
#X floatatom 207 243 10 0 0 0 - - - 12;
#X obj 207 167 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf
#000000 #000000;
#X obj 210 278 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X obj 50 278 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X msg 536 148 seed 507;
#X msg 386 148 seed;
#X text 596 147 <-- set seed;
#X floatatom 386 243 10 0 0 0 - - - 12;
#X floatatom 536 243 10 0 0 0 - - - 12;
#X obj 389 278 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X obj 539 278 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X obj 460 144 bng 19 250 50 0 empty empty empty 17 7 0 10 #dfdfdf
#000000 #000000;
#X obj 47 210 else/brown -seed 1039;
#X obj 207 210 else/brown -seed 1039;
#X obj 386 205 else/brown;
#X obj 536 205 else/brown;
#X text 30 98 Seeds are kept locally \, which means that if two [brown]
objects are seeded the same they will have the same output. Conversely
\, you can seed the same [brown] object twice with the same seed to
repeat the output., f 52;
#X text 367 42 You can set a seed with the '-seed' flag. If you don't
supply it \, each object gets its own seed internal seed. If you send
a 'seed' message without float \, the object also gets a unique seed
value., f 52;
#X text 379 117 Sync [brown] objects with a seed value;
#X connect 1 0 5 0;
#X connect 2 0 4 0;
#X connect 3 0 14 0;
#X connect 3 0 15 0;
#X connect 6 0 16 0;
#X connect 6 0 17 0;
#X connect 7 0 16 0;
#X connect 7 0 17 0;
#X connect 9 0 11 0;
#X connect 10 0 12 0;
#X connect 13 0 16 0;
#X connect 13 0 17 0;
#X connect 14 0 1 0;
#X connect 15 0 2 0;
#X connect 16 0 9 0;
#X connect 17 0 10 0;
#X restore 494 213 pd seed;
#X text 131 314 seed <float> - a float sets seed \, no float sets a
unique internal, f 65;
#N canvas 696 112 398 326 step 0;
#X obj 152 170 hsl 128 15 0.01 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X floatatom 149 192 11 0 0 0 - - - 0;
#X obj 133 141 else/tempo -ms 100;
#X obj 133 114 tgl 17 0 empty empty empty 17 7 0 10 #dfdfdf #000000
#000000 0 1;
#X obj 136 256 hsl 133 15 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X text 38 22 [brown] is implemented as a bounded random walk whose
default maximum step is 0.125 (as a ratio of the whole range) \, so
if it tries to step outside the bounds \, it just gets folded back
inside it. You can set another maximum step value via the first argument
or a float input., f 54;
#X obj 133 218 else/brown 0.01;
#X connect 0 0 1 0;
#X connect 1 0 6 0;
#X connect 2 0 6 0;
#X connect 3 0 2 0;
#X connect 6 0 4 0;
#X restore 494 236 pd step;
#X obj 222 240 hsl 133 16 0 127 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X obj 219 186 else/tempo -ms 100;
#X obj 219 159 tgl 17 0 empty empty empty 17 7 0 10 #dfdfdf #000000
#000000 0 1;
#X text 38 166 see also:;
#X obj 38 188 else/brown~;
#X obj 38 214 else/drunkard;
#X text 173 298 float - sets maximum random step ratio (from 0 to 1)
, f 58;
#X text 179 282 bang - generate new random step, f 57;
#X text 171 348 float - random value based on brownian motion;
#X obj 7 373 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X text 145 384 -seed <float>: sets seed (default: unique internal)
;
#X text 175 420 1) float - maximum step (default: 0.125);
#X obj 219 213 else/brown;
#X text 57 89 [brown] is a control brownian motion generator. It is
a bounded random walk (based on a pseudo random number generator algorithm).
By default \, the maximum step is "0.125" \, which is a ratio of the
whole range (and the output range is from 0 to 127). If it tries to
step outside the bounds \, it just gets folded back., f 79;
#X obj 39 238 else/fold;
#X connect 21 0 32 0;
#X connect 22 0 21 0;
#X connect 32 0 20 0;
