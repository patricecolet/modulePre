#N canvas 587 37 563 573 10;
#X obj 307 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 516 12 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 503 27 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1 0 0;
#X restore 306 4 graph;
#X obj 23 41 cnv 4 4 4 empty empty Sidechain\ compression 0 28 2 18
#e0e0e0 #000000 0;
#X obj 4 4 cnv 15 301 42 empty empty duck~ 20 20 2 37 #e0e0e0 #000000
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1;
#X restore 3 4 graph;
#X obj 5 545 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 7 278 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 7 406 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 6 474 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 107 417 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 107 285 cnv 17 3 90 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 7 441 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X text 116 511 3) float;
#X text 116 481 1) float;
#X obj 107 383 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 116 526 4) float;
#X obj 161 182 else/duck~, f 12;
#X text 181 285 signal - input signal, f 48;
#X text 181 383 signal - control signal, f 48;
#X text 40 89 [duck~] is an abstraction that performs a duck volume
effect (a.k.a sidechain compression). It attenuates an input signal
according to the level of a control signal. you can also mix the ducked
signal with the control input signal., f 79;
#X text 133 300 thresh <float> - sets threshold in dB, f 56;
#X text 139 314 ratio <float> - sets attenuation ratio, f 55;
#X text 133 328 attack <float> - sets attack time in ms, f 56;
#X text 127 342 release <float> - sets release time in ms, f 57;
#X text 181 418 signal - ducked signal alone or mixed with control
signal;
#X text 151 356 mix <float> - non zero mixes with control signal,
f 53;
#X text 190 450 -mix: mixes with control signal;
#X text 181 481 - threshold in dB (default -60), f 46;
#X text 116 496 2) float;
#X text 181 511 - attack time in ms (default 10), f 46;
#X text 181 496 - attenuation ratio (default 1), f 46;
#X text 181 526 - release time in ms (default 10), f 46;
#X obj 161 148 osc~ 440;
#X obj 161 215 else/out~;
#X obj 230 148 else/randpulse2~ 10;
#N canvas 832 127 453 375 example 0;
#X obj 213 185 *~;
#X obj 287 154 tgl 15 0 empty empty empty 17 7 0 10 #dcdcdc #000000
#000000 0 1;
#X text 50 33 When a control input signal increases above a threshold
level \, the input signal gets attenuated. The attenuation ratio relates
to how much the control signal has exceeded the threshold. For instance
\, if the signal has increased 10 dB over the threshold and the ratio
is 1 \, then th einoput signal gets attenuated by 10 dB. A ratio of
0.5 decreases 5 dB \, 2 corresponds to 20 dB and so on., f 58;
#X obj 287 185 else/glide~ 500;
#X obj 120 272 else/out~;
#X obj 120 176 noise~;
#X obj 213 149 osc~ 220;
#X obj 120 222 else/duck~ -mix -40 0.2 100 100, f 16;
#X connect 0 0 7 1;
#X connect 1 0 3 0;
#X connect 3 0 0 1;
#X connect 5 0 7 0;
#X connect 6 0 0 0;
#X connect 7 0 4 0;
#X restore 420 244 pd example;
#X connect 22 0 39 0;
#X connect 38 0 22 0;
#X connect 40 0 22 1;
