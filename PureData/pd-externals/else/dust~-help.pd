#N canvas 439 23 561 501 10;
#X obj 238 173 hsl 128 15 1 5000 1 0 empty empty empty -2 -8 0 10 #dcdcdc
#000000 #000000 0 1;
#X obj 235 255 else/out~;
#X obj 3 4 cnv 15 301 42 empty empty dust~ 20 20 2 37 #e0e0e0 #000000
0;
#X obj 307 5 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 4 pd;
#X obj 346 12 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 24 41 cnv 4 4 4 empty empty Random 0 28 2 18 #e0e0e0 #000000
0;
#X obj 459 12 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 479 12 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 465 27 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 93 41 cnv 4 4 4 empty empty impulses 0 28 2 18 #e0e0e0 #000000
0;
#X obj 4 467 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 4 316 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 365 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 434 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 107 374 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 106 325 cnv 17 3 33 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 169 374 signal;
#X text 177 443 1) float;
#X obj 235 202 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X text 319 203 density;
#X text 218 325 - density (rate) of random impulses;
#X text 238 442 - density (default 0);
#X obj 235 228 else/dust~ 1;
#X text 133 326 float/signal;
#X text 133 344 seed <float>;
#X text 40 247 see also:;
#X obj 37 269 else/dust2~;
#X text 103 90 [dust~] is based on SuperCollider's "Dust" UGEN and
outputs random impulse values (only positive values up to 1) at random
times according to a density parameter. The difference to SuperCollider's
is that it only produces actual impulses (one non zero value in between
0 valued samples)., f 55;
#X obj 6 401 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X text 135 410 -seed <float>: seed value (default: unique internal)
;
#X text 217 344 - a float sets seed \, no float sets a unique internal
;
#N canvas 777 84 466 384 seed 0;
#X text 64 15 Pseudo random number generators aren't true random number
generators. Instead \, an algorithm is used to provide a sequence of
numbers that seems random. The same sequence can be reproduced if you
set a "seed" value \, which can be any integer number., f 57;
#X text 64 129 You can set a seed with the '-seed' flag. If you don't
supply it \, each object gets its own seed internal seed. If you send
a 'seed' message without float \, the object also gets a unique seed
value., f 57;
#X msg 377 276 seed;
#X msg 367 247 seed 123;
#X obj 47 294 else/trighold~;
#X obj 197 297 else/trighold~;
#X obj 47 338 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 197 338 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 367 309 s \$0-dust;
#X obj 47 230 r \$0-dust;
#X obj 197 230 r \$0-dust;
#X obj 47 260 else/dust~ -seed 123 1;
#X obj 197 260 else/dust~ -seed 123 1;
#X text 64 78 Seeds are kept locally \, which means that if two [dust~]
objects are seeded the same they will have the same output. Conversely
\, you can seed the same [dust~] object twice with the same seed to
repeat the output., f 57;
#X connect 2 0 8 0;
#X connect 3 0 8 0;
#X connect 4 0 6 0;
#X connect 5 0 7 0;
#X connect 9 0 11 0;
#X connect 10 0 12 0;
#X connect 11 0 4 0;
#X connect 12 0 5 0;
#X restore 466 273 pd seed;
#X text 218 375 - random positive impulses;
#X connect 0 0 20 0;
#X connect 20 0 24 0;
#X connect 24 0 1 0;
