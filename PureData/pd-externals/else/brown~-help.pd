#N canvas 437 23 564 459 10;
#X obj 7 429 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 7 266 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 7 326 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 7 395 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 105 276 cnv 17 3 42 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 105 336 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 211 169 else/brown~;
#X obj 211 199 else/out~;
#X obj 23 40 cnv 4 4 4 empty empty Brown 0 28 2 18 #e0e0e0 #000000
0;
#X obj 127 40 cnv 4 4 4 empty empty generator 0 28 2 18 #e0e0e0 #000000
0;
#X obj 81 40 cnv 4 4 4 empty empty noise 0 28 2 18 #e0e0e0 #000000
0;
#X obj 3 3 cnv 15 301 42 empty empty brown~ 20 20 2 37 #e0e0e0 #000000
0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 2 3 graph;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#X text 182 336 signal - brown noise;
#X text 131 304 seed <float> - a float sets seed \, no float sets a
unique internal, f 65;
#N canvas 629 115 523 432 step 0;
#X obj 180 352 else/out~;
#X obj 180 192 else/graph~;
#X obj 183 112 hsl 128 15 0.01 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf
#000000 #000000 0 1;
#X floatatom 180 134 11 0 0 0 - - - 0;
#X text 33 19 [brown~] is implemented as a bounded random walk whose
default maximum step is 0.125 \, so if it tries to step outside the
bounds -1 to 1 \, it just gets reflected back in (1.02 becomes 0.98
\, for instance). You can set another maximum step value and values
above 1 become unstable. The higher the step \, the more it sounds
like white noise \, the lower \, the less bright the sound becomes.
You can set the step with the argument or a float input., f 76;
#X obj 180 160 else/brown~ 0.01;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 3 0 5 0;
#X connect 5 0 1 0;
#X restore 488 210 pd step;
#X text 167 274 signal - impulses get a new random step, f 59;
#X text 173 289 float - sets maximum random step (from 0 to 1), f
58;
#X text 57 92 [brown~] is a brown noise generator (aka brownian noise
or red noise) \, whose spectral energy drops 6dB per octave (sounding
less hissy than white noise). It is implemented as a bounded random
walk (based on a pseudo random number generator algorithm). By default
\, the maximum step is 0.125 \, but you can set that. If a signal is
connected \, non zero values generate new random steps., f 76;
#N canvas 819 109 351 398 signal 0;
#X obj 71 304 else/out~;
#X obj 71 144 else/graph~;
#X obj 71 112 else/brown~;
#X obj 71 78 else/impulse~ 500;
#X text 22 16 When a signal is connected to [brown~] \, non zero values
generate new random steps. This way you can use impulses to generate
new steps., f 48;
#X connect 1 0 0 0;
#X connect 2 0 1 0;
#X connect 3 0 2 0;
#X restore 476 233 pd signal;
#X obj 7 361 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X text 144 372 -seed <float>: sets seed (default: unique internal)
;
#X text 154 405 1) float - maximum step (default: 0.125);
#N canvas 475 138 704 321 seed 0;
#X obj 393 220 else/downsample~ 1;
#X obj 548 220 else/downsample~ 1;
#X obj 393 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 548 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 30 19 Pseudo random number generators aren't true random number
generators. Instead \, an algorithm is used to provide a sequence of
numbers that seems random. The same sequence can be reproduced if you
set a "seed" value \, which can be any integer number., f 52;
#X obj 57 220 else/downsample~ 1;
#X obj 57 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 207 220 else/downsample~ 1;
#X obj 207 260 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X text 365 24 You can set a seed with the '-seed' flag. If you don't
supply it \, each object gets its own seed internal seed. If you send
a 'seed' message without float \, the object also gets a unique seed
value., f 52;
#X msg 433 113 seed 507;
#X msg 393 113 seed;
#X text 495 114 <-- set seed;
#X obj 393 142 trigger bang anything;
#X obj 57 181 else/brown~ -seed 1039;
#X obj 207 181 else/brown~ -seed 1039;
#X text 30 97 Seeds are kept locally \, which means that if two [brown~]
objects are seeded the same they will have the same output. Conversely
\, you can seed the same [brown~] object twice with the same seed to
repeat the output., f 52;
#X text 387 79 Sync [brown~] objects with a seed value;
#X obj 403 192 else/brown~;
#X obj 548 192 else/brown~;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 5 0 6 0;
#X connect 7 0 8 0;
#X connect 10 0 13 0;
#X connect 11 0 13 0;
#X connect 13 0 1 0;
#X connect 13 0 0 0;
#X connect 13 1 18 0;
#X connect 13 1 19 0;
#X connect 14 0 5 0;
#X connect 15 0 7 0;
#X connect 18 0 0 0;
#X connect 19 0 1 0;
#X restore 488 187 pd seed;
#X text 29 182 see also:;
#X obj 29 203 else/brown;
#X obj 29 227 else/drunkard~;
#X connect 6 0 7 0;
