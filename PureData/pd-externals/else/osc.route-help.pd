#N struct 1006-point float x0 float y0 float xs float ys float fg float in float gridx float gridy;
#N canvas 511 32 560 459 10;
#X obj 4 301 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 336 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 401 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 106 345 cnv 17 3 17 empty empty n 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 107 310 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 433 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Route\ OSC\ messages 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty osc.route 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X text 21 212 see also:;
#X text 151 346 anything;
#X obj 18 234 else/osc.receive;
#N canvas 456 139 805 458 basic 0;
#X obj 27 20 else/slider2d 100 100 0 127 0 127 1 200 200 200 0 0 0 0 0 0 0 0 empty empty;
#X msg 27 143 /slider/2d \$1 \$2;
#X msg 55 216 /slider/amplitude/a \$1;
#X msg 75 281 /slider/amplitude/b \$1;
#X obj 261 216 else/osc.route /slider;
#X obj 261 257 else/osc.route /amplitude;
#X obj 348 283 else/display;
#X obj 261 180 else/display;
#X text 193 30 Addresses are specified with the "/" separator and [osc.route] is able to break this message and route them. Note how the '/slider' address matches input messages that start with '/slider' but have further sub addresses with following "/"., f 42;
#X obj 261 287 route float;
#X obj 324 317 else/display;
#X obj 58 188 hsl 136 16 0 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 78 253 hsl 136 16 0 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 90 317 hsl 136 16 0 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X msg 87 345 /slider/amplitude \$1;
#X obj 261 317 else/display 5;
#X obj 324 350 route /a /b, f 17;
#X obj 324 377 else/display 5;
#X obj 373 377 else/display 5;
#X msg 572 241 1 2 3;
#X msg 533 184 /one/two/three 4!;
#X msg 562 217 non osc;
#X obj 581 263 bng 19 250 50 0 empty empty empty 0 -8 0 10 #dfdfdf #000000 #000000;
#X text 619 227 non OSC messages are unmatched., f 16;
#X text 593 99 A list message also works if the 1st element is an OSC path, f 30;
#X obj 492 403 else/display;
#X obj 574 356 else/display;
#X obj 657 328 else/display;
#X msg 492 104 list /one 1 b 3;
#X obj 492 304 else/osc.route /one /one/two;
#X msg 524 160 /one/two 3 4!;
#X text 648 170 matches two outputs;
#X text 471 19 You can use an address and a sub address in the router so you don't need more than one [osc.route] object in cascade to deal with further addresses as below in the middle. Note that if no further sub address is given \, [route] can also do the same job by the way!, f 50;
#X msg 508 133 /one;
#X text 543 134 no OSC message becomes a 'bang';
#X obj 29 382 else/osc.send localhost 8003;
#X obj 261 145 else/osc.receive 8003;
#X connect 0 0 1 0;
#X connect 1 0 35 0;
#X connect 2 0 35 0;
#X connect 3 0 35 0;
#X connect 4 0 5 0;
#X connect 5 0 9 0;
#X connect 5 1 6 0;
#X connect 7 0 4 0;
#X connect 9 0 15 0;
#X connect 9 1 10 0;
#X connect 10 0 16 0;
#X connect 11 0 2 0;
#X connect 12 0 3 0;
#X connect 13 0 14 0;
#X connect 14 0 35 0;
#X connect 16 0 17 0;
#X connect 16 1 18 0;
#X connect 19 0 29 0;
#X connect 20 0 29 0;
#X connect 21 0 29 0;
#X connect 22 0 29 0;
#X connect 28 0 29 0;
#X connect 29 0 25 0;
#X connect 29 1 26 0;
#X connect 29 2 27 0;
#X connect 30 0 29 0;
#X connect 33 0 29 0;
#X connect 36 0 7 0;
#X restore 484 237 pd basic;
#X text 151 311 anything;
#X text 209 311 - messages to be routed;
#X text 209 347 - routed messages that correspond to an argument;
#X obj 106 369 cnv 17 3 17 empty empty n+1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 151 369 anything;
#X text 209 370 - unmatched message;
#X text 123 412 1) anything -;
#X text 209 412 list of OSC adrresses to route to;
#X msg 199 163 /hz/a 440;
#X msg 212 185 /hz/b 880;
#X obj 199 235 else/osc.route /hz;
#X obj 199 259 else/display;
#X obj 304 259 else/display;
#X msg 142 163 /hz 220;
#X text 43 88 [osc.route] routes OSC messages received from [osc.receive]. It follows the same logic as Vanilla's [route] where arguments set the number of outlets and an extra is created for no matches. The difference is that it manages OSC addresses instead \, specified with the "/" separator. Note how the '/hz' address matches input messages that start with '/hz' even if it has further sub addresses., f 80;
#X msg 223 209 /unmatch value;
#X obj 19 258 else/osc.parse;
#N canvas 352 74 875 446 specifications 0;
#X msg 43 78 /* bang!;
#X text 130 99 matches any subaddress of '/one';
#X msg 62 118 /*/* bang!;
#X text 135 118 matches anything here;
#X obj 43 405 else/display;
#X obj 110 405 else/display;
#X obj 178 405 else/display;
#X obj 246 405 else/display;
#X msg 78 152 /? hey;
#X msg 53 99 /B/* bang!;
#X msg 103 220 /[AB] 1;
#X msg 110 241 /[AB]/two 2;
#X text 191 227 matches any single character address in the brackets, f 28;
#X msg 117 270 /[A-C] 1;
#X obj 43 376 else/osc.route /A /B /B/2 /B/two /C, f 57;
#X obj 314 404 else/display;
#X text 177 263 characters separated by a minus sign in brackets indicate the range of characters to match to, f 48;
#X msg 130 302 /[!BA] 1;
#X text 191 303 an exclamation in the beggining of brackets negates the list and matches to any other character, f 34;
#X msg 136 323 /[!A] !;
#X obj 638 149 else/display;
#X obj 708 149 else/display;
#X obj 514 348 list tosymbol;
#X listbox 514 409 20 0 0 0 - - - 0;
#X obj 514 376 list append Yay;
#X msg 514 316 47 123 102 111 111 44 98 97 114 125;
#X msg 638 82 /{foo\\\,bar} Yay;
#X text 667 377 open curly braces = 123, f 24;
#X text 667 361 forward slash = 47, f 24;
#X text 667 393 comma = 47, f 24;
#X text 667 409 close curly braces = 125;
#X text 492 209 It's hard to deal with commas and curly braces in Pd \, specially curly braces since you can't type them or paste them. You may wonder how I was able to generate a message with it as above. If you are ninja enough you can create them with [list tosymbol] as below \, then use "set \$1" to imprint it in a message. Ninja tricks aside \, you may get such a message from the OSC sender anyway and dal with it in Pd with [osc.route]., f 56;
#X obj 346 168 else/display;
#X obj 413 168 else/display;
#X obj 480 168 else/display;
#X obj 346 139 else/osc.route /foo /bar /*, f 34;
#X text 573 30 An OSC address with a comma-separated list of strings enclosed in curly braces matches any of the strings in the list., f 40;
#X obj 638 110 else/osc.route /foo /bar;
#X msg 346 101 /foo Yay;
#X msg 414 101 /bar Yay;
#X text 102 77 '*' is a wildcard \, here it matches any single address. It can also be used, f 74;
#X text 480 90 as argument;
#X text 163 165 '?' matches any character, f 13;
#X msg 91 190 /B/?w? hi!;
#X msg 84 171 /?/?wo hey;
#X text 634 349 Important characters for tricks:;
#X text 40 11 The OSC specifications have special characters that behave in particular ways when you send or receive messages. Here we show how [osc.route] is able to deal with such specifications. If you send OSC messages from Pd \, the receiver application should also comply to these specifications., f 78;
#X connect 0 0 14 0;
#X connect 2 0 14 0;
#X connect 8 0 14 0;
#X connect 9 0 14 0;
#X connect 10 0 14 0;
#X connect 11 0 14 0;
#X connect 13 0 14 0;
#X connect 14 0 4 0;
#X connect 14 1 5 0;
#X connect 14 2 6 0;
#X connect 14 3 7 0;
#X connect 14 4 15 0;
#X connect 17 0 14 0;
#X connect 19 0 14 0;
#X connect 22 0 24 0;
#X connect 24 0 23 0;
#X connect 25 0 22 0;
#X connect 26 0 37 0;
#X connect 35 0 32 0;
#X connect 35 1 33 0;
#X connect 35 2 34 0;
#X connect 37 0 20 0;
#X connect 37 1 21 0;
#X connect 38 0 35 0;
#X connect 39 0 35 0;
#X connect 43 0 14 0;
#X connect 44 0 14 0;
#X restore 430 260 pd specifications;
#X connect 29 0 31 0;
#X connect 30 0 31 0;
#X connect 31 0 32 0;
#X connect 31 1 33 0;
#X connect 34 0 31 0;
#X connect 36 0 31 0;
