#N canvas 501 42 561 493 10;
#X obj 4 362 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 397 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 432 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 136 406 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 137 371 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 461 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 345 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc 0;
#X obj 23 40 cnv 4 4 4 empty empty Format\ OSC\ messages 0 28 2 18 #e0e0e0 #000000 0;
#X obj 458 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 478 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 515 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 464 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 502 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty osc.format 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X listbox 164 282 52 0 0 0 - - - 0;
#X obj 164 333 else/display;
#X text 19 251 see also:;
#X text 171 372 anything;
#X text 195 407 list;
#X text 229 372 - OSC message to be formatted;
#X text 214 440 NONE;
#X floatatom 164 207 9 0 0 0 - - - 0;
#X obj 167 181 hsl 136 16 0 1 0 0 empty empty empty -2 -8 0 10 #dfdfdf #000000 #000000 0 1;
#X obj 16 273 else/osc.send;
#X obj 16 318 else/osc.route;
#X msg 164 233 /fader \$1;
#X obj 164 258 else/osc.format;
#X obj 164 307 else/osc.parse;
#X obj 16 296 else/osc.parse;
#X text 232 233 <-- message to be formated as an OSC message;
#X text 229 407 - formatted OSC message;
#X text 47 85 [osc.format] is similar to Vanilla's [oscformat]. This is still way too simple and experimental. It is used in the [osc.send] abstraction and can be used for edge and lower level cases. It takes anything messages or lists whose first element is an address that start with "/". The type of data for each element in the message is either a float or a string only depenfing on the atom type \, so there are only these options (so far). You can't send bundles either. Use the original Vanilla [oscformat] or mrpeach's packOSC object for more complete objects., f 78;
#X connect 17 0 30 0;
#X connect 24 0 28 0;
#X connect 25 0 24 0;
#X connect 28 0 29 0;
#X connect 29 0 17 0;
#X connect 30 0 18 0;
