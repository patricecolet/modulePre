#N canvas 483 51 561 434 10;
#X obj 4 254 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 326 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 358 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 407 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X obj 307 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 306 3 pd;
#X obj 346 11 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 22 40 cnv 4 4 4 empty empty Signal 0 28 2 18 #e0e0e0 #000000
0;
#X obj 459 11 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 479 11 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 516 11 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 465 26 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 503 26 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 4 4 cnv 15 301 42 empty empty op~ 20 20 2 37 #e0e0e0 #000000
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 4 graph;
#X obj 77 40 cnv 4 4 4 empty empty operator 0 28 2 18 #e0e0e0 #000000
0;
#X obj 73 334 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 74 263 cnv 17 3 33 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 97 386 2) float;
#X obj 73 301 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X text 126 264 signal - input to operator, f 49;
#X obj 278 160 sig~ 5;
#X obj 278 133 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
#dcdcdc #000000 #000000 0 256;
#X obj 490 63 else/setdsp~;
#X obj 278 192 else/op~ == 5;
#N canvas 388 153 945 563 operators 0;
#X obj 49 274 sig~ 5;
#X floatatom 49 248 5 0 0 0 - - - 0;
#X obj 140 274 sig~ 5;
#X floatatom 140 248 5 0 0 0 - - - 0;
#X obj 49 108 sig~ 5;
#X floatatom 49 82 5 0 0 0 - - - 0;
#X text 41 56 greater than;
#X obj 151 108 sig~ 5;
#X floatatom 151 82 5 0 0 0 - - - 0;
#X text 143 56 less than;
#X obj 244 108 sig~ 5;
#X floatatom 244 82 5 0 0 0 - - - 0;
#X text 236 50 greater than;
#X obj 346 108 sig~ 5;
#X floatatom 346 82 5 0 0 0 - - - 0;
#X text 338 50 less than;
#X text 236 62 or equal to;
#X text 337 62 or equal to;
#X text 40 222 equal to;
#X text 132 222 not equal to;
#X obj 810 77 else/setdsp~;
#X floatatom 239 248 5 0 0 0 - - - 0;
#X floatatom 340 248 5 0 0 0 - - - 0;
#X text 230 222 logical and;
#X text 332 222 logical or;
#X obj 239 274 sig~ 1;
#X obj 340 274 sig~ 0;
#X obj 518 101 sig~ 5;
#X floatatom 518 75 5 0 0 0 - - - 0;
#X text 510 49 bitwise and;
#X obj 626 100 sig~ 5;
#X floatatom 626 74 5 0 0 0 - - - 0;
#X text 618 48 bitwise or;
#X obj 518 273 sig~ 5;
#X floatatom 518 247 5 0 0 0 - - - 0;
#X obj 630 272 sig~ 5;
#X floatatom 630 246 5 0 0 0 - - - 0;
#X text 510 216 bitwise not;
#X text 618 212 bitwise exclusive or, f 12;
#X obj 740 274 sig~ 5;
#X floatatom 740 248 5 0 0 0 - - - 0;
#X floatatom 852 247 5 0 0 0 - - - 0;
#X text 731 215 bitwise shift left, f 11;
#X obj 852 273 sig~ 15;
#X text 840 213 bitwise shift right, f 11;
#X text 190 14 COMPARATIVE OPERATORS;
#X text 678 14 BITWISE OPERATORS;
#X obj 49 138 else/op~ > 5;
#X obj 151 138 else/op~ < 5;
#X obj 244 138 else/op~ >= 5;
#X obj 346 138 else/op~ <= 5;
#X obj 49 304 else/op~ == 5;
#X obj 140 304 else/op~ != 5;
#X obj 239 304 else/op~ && 1;
#X obj 340 304 else/op~ || 1;
#X obj 518 303 else/op~ ~;
#X obj 630 302 else/op~ ^ 3;
#X obj 740 304 else/op~ << 4;
#X obj 852 303 else/op~ >> 3;
#X obj 518 131 else/op~ & 3;
#X obj 626 130 else/op~ & 3;
#X text 567 435 Note that [op~] does not have the same operators as
[op] because Pd Vanilla already provides many objects for the same
operations (such as [+~] \, [log~] \, etc...)., f 33;
#X floatatom 331 411 5 0 0 0 - - - 0;
#X obj 331 437 sig~ 0;
#X obj 331 466 else/op~ % 1.1;
#X text 78 438 The '%' (modulo) operator calls the 'fmod' function
also found in the expr family of objects. Note that it doesn't correspond
neither to [%] or [mod] objects from Vanilla., f 39;
#X text 428 465 modulo;
#X obj 331 500 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 49 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 140 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 239 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 340 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 518 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 630 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 740 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 852 337 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 49 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 151 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 244 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 346 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 518 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X obj 626 171 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 0 0 51 0;
#X connect 1 0 0 0;
#X connect 2 0 52 0;
#X connect 3 0 2 0;
#X connect 4 0 47 0;
#X connect 5 0 4 0;
#X connect 7 0 48 0;
#X connect 8 0 7 0;
#X connect 10 0 49 0;
#X connect 11 0 10 0;
#X connect 13 0 50 0;
#X connect 14 0 13 0;
#X connect 21 0 25 0;
#X connect 22 0 26 0;
#X connect 25 0 53 0;
#X connect 26 0 54 0;
#X connect 27 0 59 0;
#X connect 28 0 27 0;
#X connect 30 0 60 0;
#X connect 31 0 30 0;
#X connect 33 0 55 0;
#X connect 34 0 33 0;
#X connect 35 0 56 0;
#X connect 36 0 35 0;
#X connect 39 0 57 0;
#X connect 40 0 39 0;
#X connect 41 0 43 0;
#X connect 43 0 58 0;
#X connect 47 0 76 0;
#X connect 48 0 77 0;
#X connect 49 0 78 0;
#X connect 50 0 79 0;
#X connect 51 0 68 0;
#X connect 52 0 69 0;
#X connect 53 0 70 0;
#X connect 54 0 71 0;
#X connect 55 0 72 0;
#X connect 56 0 73 0;
#X connect 57 0 74 0;
#X connect 58 0 75 0;
#X connect 59 0 80 0;
#X connect 60 0 81 0;
#X connect 62 0 63 0;
#X connect 63 0 64 0;
#X connect 64 0 67 0;
#X restore 468 226 pd operators;
#X msg 236 160 <;
#X msg 206 160 <=;
#X msg 177 160 >;
#X msg 147 160 >=;
#X msg 117 160 ==;
#X msg 86 160 !=;
#X msg 27 160 &&;
#X msg 57 160 ||;
#X msg 420 160 ^;
#X msg 331 160 &;
#X msg 360 160 |;
#X msg 391 160 ~;
#X msg 451 160 >>;
#X msg 480 160 <<;
#X text 90 303 float/signal - secondary operator value (ignored for
bitnot);
#X text 155 387 - inlet value (default 0) - ignored for bitnot;
#X text 95 368 1) symbol -;
#X text 51 85 [op~] is a signal operator (either comparison or bitwise)
\, which is defined by the first argument. This is more efficient than
using [expr~] (which also contains all these operators)., f 67;
#X text 126 336 signal - operator result;
#X text 113 281 <symbol> -;
#X text 179 282 operator: > \, < \, >= \, <= \, == \, != \, && \, ||
\, & \, | \, ~ \, ^ \, >> and <<, f 61;
#X msg 514 160 %;
#X text 167 368 operator: > \, < \, >= \, <= \, == \, != \, && \, ||
\, & \, | \, ~ \, ^ \, >> \, << or %, f 63;
#N canvas 995 261 394 210 see 0;
#X text 86 35 see also:;
#X obj 88 54 else/op;
#X text 192 39 other operations on signals;
#X obj 233 88 else/trunc~;
#X obj 233 108 else/floor~;
#X obj 233 128 else/ceil~;
#X obj 233 148 else/rint~;
#X obj 233 68 else/wrap2~;
#X obj 233 170 else/quantizer~;
#X restore 36 222 pd see also;
#X obj 278 220 else/numbox~ 6 12 100 #c0c0c4 #440008 10 0 0 0;
#X connect 21 0 24 0;
#X connect 22 0 21 0;
#X connect 24 0 50 0;
#X connect 26 0 24 0;
#X connect 27 0 24 0;
#X connect 28 0 24 0;
#X connect 29 0 24 0;
#X connect 30 0 24 0;
#X connect 31 0 24 0;
#X connect 32 0 24 0;
#X connect 33 0 24 0;
#X connect 34 0 24 0;
#X connect 35 0 24 0;
#X connect 36 0 24 0;
#X connect 37 0 24 0;
#X connect 38 0 24 0;
#X connect 39 0 24 0;
#X connect 47 0 24 0;
